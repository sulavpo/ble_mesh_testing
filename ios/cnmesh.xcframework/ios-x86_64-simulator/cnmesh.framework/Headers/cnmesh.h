#import <Foundation/NSArray.h>
#import <Foundation/NSDictionary.h>
#import <Foundation/NSError.h>
#import <Foundation/NSObject.h>
#import <Foundation/NSSet.h>
#import <Foundation/NSString.h>
#import <Foundation/NSValue.h>

@class CnmeshJsonPluginPlugin, CnmeshKtor_httpContentType, CnmeshKotlinArray<T>, CnmeshHttpClient, CnmeshKtor_utilsAttributeKey<T>, CnmeshJsonPlugin, CnmeshJsonPluginConfig, CnmeshKtor_utilsTypeInfo, CnmeshKtor_ioInput, CnmeshKtor_httpOutgoingContent, CnmeshKotlinEnumCompanion, CnmeshKotlinEnum<E>, CnmeshLogLevel, CnmeshLoggerCompanion, CnmeshLoggingCompanion, CnmeshHttpRequestBuilder, CnmeshLogging, CnmeshLoggingConfig, CnmeshKotlinThrowable, CnmeshKotlinException, CnmeshContentNegotiationPlugin, CnmeshContentNegotiation, CnmeshContentNegotiationConfig, CnmeshJsonContentTypeMatcher, CnmeshHttpClientEngineConfig, CnmeshHttpClientConfig<T>, CnmeshKtor_eventsEvents, CnmeshHttpReceivePipeline, CnmeshHttpRequestPipeline, CnmeshHttpResponsePipeline, CnmeshHttpSendPipeline, CnmeshKotlinRuntimeException, CnmeshKotlinIllegalStateException, CnmeshHttpClientCall, CnmeshHttpRequestData, CnmeshHttpResponseData, CnmeshHttpClientCallCompanion, CnmeshHttpResponse, CnmeshKotlinUnsupportedOperationException, CnmeshKotlinIllegalArgumentException, CnmeshKtor_httpUrl, CnmeshCacheControl, CnmeshKtor_httpHttpStatusCode, CnmeshKtor_httpOutgoingContentNoContent, CnmeshEmptyContent, CnmeshKtor_ioIOException, CnmeshKtor_httpHttpMethod, CnmeshKtor_httpHeadersBuilder, CnmeshHttpRequestBuilderCompanion, CnmeshKtor_httpURLBuilder, CnmeshKtor_utilsPipelinePhase, CnmeshKtor_utilsPipeline<TSubject, TContext>, CnmeshHttpRequestPipelinePhases, CnmeshKtor_utilsGMTDate, CnmeshKtor_httpHttpProtocolVersion, CnmeshHttpSendPipelinePhases, CnmeshFormPart<T>, CnmeshChannelProvider, CnmeshInputProvider, CnmeshKtor_ioByteReadPacket, CnmeshKotlinByteArray, CnmeshKtor_httpOutgoingContentByteArrayContent, CnmeshKtor_httpOutgoingContentWriteChannelContent, CnmeshKtor_httpPartData, CnmeshHttpReceivePipelinePhases, CnmeshKotlinUnit, CnmeshHttpResponseContainer, CnmeshHttpResponsePipelinePhases, CnmeshCoroutineDispatcher, CnmeshProxyConfig, CnmeshProxyBuilder, CnmeshProxyType, Cnmeshengines, CnmeshBodyProgressPlugin, CnmeshBodyProgress, CnmeshResponseException, CnmeshDataConversion, CnmeshKtor_utilsDataConversion, CnmeshKtor_utilsDataConversionConfiguration, CnmeshDefaultRequestPlugin, CnmeshDefaultRequest, CnmeshDefaultRequestDefaultRequestBuilder, CnmeshHttpCallValidatorCompanion, CnmeshHttpCallValidator, CnmeshHttpCallValidatorConfig, CnmeshHttpPlainTextPlugin, CnmeshKtor_ioCharset, CnmeshHttpPlainText, CnmeshHttpPlainTextConfig, CnmeshHttpRedirectPlugin, CnmeshHttpRedirect, CnmeshHttpRedirectConfig, CnmeshKtor_eventsEventDefinition<T>, CnmeshHttpRequestRetryPlugin, CnmeshHttpRequestRetryDelayContext, CnmeshHttpRequestRetryModifyRequestContext, CnmeshHttpRequestRetryShouldRetryContext, CnmeshHttpRequestRetry, CnmeshHttpRequestRetryConfiguration, CnmeshHttpRequestRetryRetryEventData, CnmeshHttpSendPlugin, CnmeshHttpSend, CnmeshHttpSendConfig, CnmeshHttpTimeoutPlugin, CnmeshHttpTimeoutHttpTimeoutCapabilityConfigurationCompanion, CnmeshHttpTimeoutHttpTimeoutCapabilityConfiguration, CnmeshHttpTimeout, CnmeshUserAgentPlugin, CnmeshUserAgent, CnmeshUserAgentConfig, CnmeshHttpCacheCompanion, CnmeshHttpCacheStorage, CnmeshHttpCache, CnmeshHttpCacheConfig, CnmeshHttpCacheStorageCompanion, CnmeshHttpCacheEntry, CnmeshKtor_websocketsFrame, CnmeshWebSocketCapability, CnmeshWebSocketExtensionsCapability, CnmeshWebSocketsPlugin, CnmeshKtor_websocketsWebSocketExtensionsConfig, CnmeshWebSockets, CnmeshWebSocketsConfig, CnmeshKtor_httpCookie, CnmeshHttpCookiesCompanion, CnmeshHttpCookies, CnmeshHttpCookiesConfig, CnmeshResponseObserverPlugin, CnmeshResponseObserver, CnmeshResponseObserverConfig, CnmeshKotlinCancellationException, CnmeshJobSupport, CnmeshCoroutineStart, CnmeshKotlinAbstractCoroutineContextElement, CnmeshCoroutineDispatcherKey, CnmeshKotlinAbstractCoroutineContextKey<B, E>, CnmeshCoroutineExceptionHandlerKey, CnmeshCoroutineNameKey, CnmeshCoroutineName, CnmeshDispatchers, CnmeshMainCoroutineDispatcher, CnmeshGlobalScope, CnmeshJobKey, CnmeshNonCancellable, CnmeshNonDisposableHandle, CnmeshTimeoutCancellationException, CnmeshBufferOverflow, CnmeshChannelFactory, CnmeshKotlinNoSuchElementException, CnmeshSharingCommand, CnmeshSharingStartedCompanion, CnmeshChannelFlow<T>, CnmeshAtomicDesc, CnmeshLockFreeLinkedListNodePrepareOp, CnmeshAtomicOp<__contravariant T>, CnmeshOpDescriptor, CnmeshLockFreeLinkedListNode, CnmeshLockFreeLinkedListNodeAddLastDesc<T>, CnmeshLockFreeLinkedListNodeRemoveFirstDesc<T>, CnmeshLockFreeLinkedListNodeAbstractAtomicDesc, CnmeshAtomicfuSynchronizedObjectLockState, CnmeshKotlinAtomicReference<T>, CnmeshAtomicfuSynchronizedObject, CnmeshThreadSafeHeap<T>, CnmeshUuid, CnmeshStately_isolateStateHolder<__covariant T>, CnmeshStately_isolateIsolateState<T>, CnmeshScope, CnmeshParametersHolder, CnmeshKotlinLazyThreadSafetyMode, CnmeshModule, CnmeshLogger, CnmeshInstanceRegistry, CnmeshPropertyRegistry, CnmeshScopeRegistry, CnmeshKoinApplicationCompanion, CnmeshKoinApplication, CnmeshLevel, CnmeshKoin, CnmeshLockable, CnmeshInstanceFactory<T>, CnmeshScopeRegistryCompanion, CnmeshKotlinPair<__covariant A, __covariant B>, CnmeshScopeDSL, CnmeshSingleInstanceFactory<T>, CnmeshStringQualifier, CnmeshKind, CnmeshBeanDefinition<T>, CnmeshCallbacks<T>, CnmeshInstanceFactoryCompanion, CnmeshInstanceContext, CnmeshParametersHolderCompanion, CnmeshKoinPlatformTimeTools, CnmeshKoinPlatformTools, CnmeshInstant, CnmeshClockCompanion, CnmeshClockSystem, CnmeshDateTimePeriodCompanion, CnmeshDateTimePeriod, CnmeshDatePeriodCompanion, CnmeshDatePeriod, CnmeshDateTimeUnitCompanion, CnmeshDateTimeUnit, CnmeshDateTimeUnitMonthBased, CnmeshDateTimeUnitDayBased, CnmeshDateTimeUnitTimeBased, CnmeshDateTimeUnitDateBasedCompanion, CnmeshDateTimeUnitDateBased, CnmeshDateTimeUnitDayBasedCompanion, CnmeshDateTimeUnitMonthBasedCompanion, CnmeshDateTimeUnitTimeBasedCompanion, CnmeshDayOfWeek, CnmeshTimeZoneCompanion, CnmeshLocalDateTime, CnmeshTimeZone, CnmeshUtcOffset, CnmeshFixedOffsetTimeZoneCompanion, CnmeshInstantCompanion, CnmeshMonth, CnmeshLocalDateCompanion, CnmeshLocalDate, CnmeshLocalDateTimeCompanion, CnmeshFixedOffsetTimeZone, CnmeshUtcOffsetCompanion, CnmeshKotlinx_serialization_coreAbstractPolymorphicSerializer<T>, CnmeshDateBasedDateTimeUnitSerializer, CnmeshDatePeriodComponentSerializer, CnmeshDatePeriodIso8601Serializer, CnmeshDateTimePeriodComponentSerializer, CnmeshDateTimePeriodIso8601Serializer, CnmeshDateTimeUnitSerializer, CnmeshDayBasedDateTimeUnitSerializer, CnmeshDayOfWeekSerializer, CnmeshFixedOffsetTimeZoneSerializer, CnmeshInstantComponentSerializer, CnmeshInstantIso8601Serializer, CnmeshLocalDateComponentSerializer, CnmeshLocalDateIso8601Serializer, CnmeshLocalDateTimeComponentSerializer, CnmeshLocalDateTimeIso8601Serializer, CnmeshMonthBasedDateTimeUnitSerializer, CnmeshMonthSerializer, CnmeshTimeBasedDateTimeUnitSerializer, CnmeshTimeZoneSerializer, CnmeshUtcOffsetSerializer, CnmeshKotlinx_serialization_coreSerializersModule, CnmeshJsonDefault, CnmeshJsonElement, CnmeshJsonConfiguration, CnmeshJson, CnmeshKotlinNothing, CnmeshJsonElementCompanion, CnmeshJsonPrimitiveCompanion, CnmeshJsonPrimitive, CnmeshJsonNull, CnmeshMeshDevice, CnmeshMeshData, CnmeshProvisionCommands, CnmeshDataState<T>, CnmeshMeshManagerEvent, CnmeshMeshProvisionFilter, NSData, CnmeshCommands, CnmeshMeshNFCDevice, CnmeshDeviceFilter, CnmeshEnOceanProvisionSensor, CnmeshEnOceanProvision, CnmeshMeshState, CnmeshLightStatus, CnmeshSensorStatus, CnmeshMeshNotification, CnmeshConstants, CnmeshGenericMessageInfoBuilder, CnmeshDataStateCompanion, CnmeshNegativeAction, CnmeshPositiveAction, CnmeshUIComponentType, CnmeshGenericMessageInfo, CnmeshQueue<T>, CnmeshLinkedList<T>, CnmeshLinkedListNode<T, T_>, CnmeshUIComponentTypeDialog, CnmeshUIComponentTypeNone, CnmeshNotificationInfo, CnmeshCommandAes, CnmeshMeshDeviceConnecterImpl, CnmeshMeshDeviceAdvertisement, CnmeshMeshMode, CnmeshMeshModeNormal, CnmeshMeshModeProvision, CnmeshMeshStateConnected, CnmeshMeshStateConnecting, CnmeshMeshStateDisconnected, CnmeshMeshManagerEventMeshConnectedDevice, CnmeshMeshManagerEventMeshConnecting, CnmeshMeshManagerEventMeshConnection, CnmeshMeshManagerEventMeshDevices, CnmeshMeshManagerEventMeshManualProvisioning, CnmeshMeshManagerEventMeshOtaInProgress, CnmeshOtaStatus, CnmeshMeshManagerEventMeshOtaStatus, CnmeshMeshManagerEventMeshProvisionedDevice, CnmeshMeshManagerEventMeshProvisionedDevices, CnmeshMeshManagerEventMeshProvisioning, CnmeshMeshManagerEventMeshProvisioningMeshDevice, CnmeshMeshManagerEventMeshProvisioningMeshDevices, CnmeshMeshManagerEventMeshResetting, CnmeshDeviceOnOff, CnmeshDeviceBrightness, CnmeshCreateMeshDevice, CnmeshCommandServiceImpl, CnmeshOtaStatusStatusOtaCompleted, CnmeshOtaStatusStatusOtaFailed, CnmeshOtaStatusStatusOtaFileSending, CnmeshOtaStatusStatusOtaFileSent, CnmeshOtaStatusStatusOtaFileSentProgress, CnmeshOtaStatusStatusOtaGetDeviceStateRequest, CnmeshOtaStatusStatusOtaGetDeviceStateResponse, CnmeshOtaStatusStatusOtaMeshProgress, CnmeshOtaStatusStatusOtaSetModeRequest, CnmeshOtaStatusStatusOtaSetModeResponse, CnmeshCommandConstants, CnmeshPairConstants, CnmeshNFC, NSObject, CnmeshMeshDeviceScannerFilter, CnmeshMeshDeviceScannerConstants, CnmeshState, CnmeshPreference, CnmeshMeshGroup, CnmeshPreferenceDeviceCompanion, CnmeshPreferenceDevice, CnmeshPreferenceGroupCompanion, CnmeshPreferenceGroup, CnmeshPreferenceMeshDataCompanion, CnmeshPreferenceMeshData, CnmeshAes, CnmeshCommandsAddScene, CnmeshCommandsAddSensorTargetGroup, CnmeshCommandsAddSensorTargetGroupV2, CnmeshCommandsAddToGroup, CnmeshCommandsAssignMasterZone, CnmeshCommandsBeaconScanning, CnmeshCommandsBlink, CnmeshCommandsBlue, CnmeshCommandsBrightness, CnmeshCommandsCCT, CnmeshCommandsClearDurationTestResult, CnmeshCommandsClearFunctionTestResult, CnmeshCommandsCustom, CnmeshCommandsDayLightSensorConfigClosedLoop, CnmeshCommandsDayLightSensorConfigOnOff, CnmeshCommandsDayLightSensorGain, CnmeshCommandsDayLightSensorStepUnit, CnmeshCommandsDeleteScene, CnmeshCommandsDisableCorridorHoldGroup, CnmeshCommandsDisableDaylightCalibrationMode, CnmeshCommandsEnableCorridorHoldGroup, CnmeshCommandsEnableDaylightCalibrationMode, CnmeshCommandsGetLdrValue, CnmeshCommandsGreen, CnmeshCommandsLinkCorridorHoldGroup, CnmeshCommandsLoadScene, CnmeshCommandsManualOverride, CnmeshCommandsMaxLevel, CnmeshCommandsMotionSensorConfig, CnmeshCommandsOff, CnmeshCommandsOn, CnmeshCommandsPowerOnLevel, CnmeshCommandsRGB, CnmeshCommandsRed, CnmeshCommandsRemoveFromGroup, CnmeshCommandsSensorReportingInterval, CnmeshCommandsSetDaliFadeRate, CnmeshCommandsSetDaliFadeTime, CnmeshCommandsSetDaliMaxLevel, CnmeshCommandsSetDaliMinLevel, CnmeshCommandsSetDaliPowerOnLevel, CnmeshCommandsSetDimmingCurve, CnmeshCommandsSetFadeTime, CnmeshCommandsSetMaxLevel, CnmeshCommandsSetMinLevel, CnmeshCommandsSetMultiChannelControl, CnmeshCommandsSetNetworkId, CnmeshCommandsSetPowerOnLevel, CnmeshCommandsSetRelayMode, CnmeshCommandsSetSunricherMode, CnmeshCommandsSetTestTiming, CnmeshCommandsUnlinkCorridorHoldGroup, CnmeshEnOcean, CnmeshEnOceanButtonAction, CnmeshAdvertisement, CnmeshProvisionCommandsAddSensorToGroup, CnmeshProvisionCommandsAddToGroup, CnmeshProvisionCommandsDayLightSensorConfigClosedLoop, CnmeshProvisionCommandsDayLightSensorConfigOnOff, CnmeshProvisionCommandsMaxLevel, CnmeshProvisionCommandsMotionSensorConfig, CnmeshProvisionCommandsPowerOnLevel, CnmeshProvisionCommandsSensorReportingInterval, CnmeshProvisionCommandsSetDaliFadeRate, CnmeshProvisionCommandsSetDaliFadeTime, CnmeshProvisionCommandsSetDaliMaxLevel, CnmeshProvisionCommandsSetDaliMinLevel, CnmeshProvisionCommandsSetDaliPowerOnLevel, CBPeripheral, NSUUID, CnmeshManufacturerData, CnmeshWriteType, CnmeshDiscoveredService, CnmeshBluetoothException, CnmeshIOException, CnmeshNotConnectedException, CnmeshDiscoveredCharacteristic, CBCharacteristic, CnmeshDiscoveredDescriptor, CBDescriptor, CBService, CnmeshFilter, CnmeshLazyCharacteristic, CnmeshLazyDescriptor, CnmeshLogging_, CnmeshStateConnected, CnmeshStateConnecting, CnmeshStateConnectingBluetooth, CnmeshStateConnectingObserves, CnmeshStateConnectingServices, CnmeshStateDisconnectedStatus, CnmeshStateDisconnected, CnmeshStateDisconnectedStatusCancelled, CnmeshStateDisconnectedStatusCentralDisconnected, CnmeshStateDisconnectedStatusConnectionLimitReached, CnmeshStateDisconnectedStatusEncryptionTimedOut, CnmeshStateDisconnectedStatusFailed, CnmeshStateDisconnectedStatusL2CapFailure, CnmeshStateDisconnectedStatusLinkManagerProtocolTimeout, CnmeshStateDisconnectedStatusPeripheralDisconnected, CnmeshStateDisconnectedStatusTimeout, CnmeshStateDisconnectedStatusUnknown, CnmeshStateDisconnectedStatusUnknownDevice, CnmeshStateDisconnecting, CnmeshLogging_Format, CnmeshLogging_Level, CnmeshSystemLogEngine, CnmeshHttpStatement, CnmeshDefaultClientWebSocketSession, CnmeshFormBuilder, CnmeshKtor_ioBytePacketBuilder, CnmeshKtor_utilsNetworkAddress, CnmeshKotlinIntIterator, CnmeshKotlinIntArray, CnmeshKotlinLongIterator, CnmeshKotlinLongArray, CnmeshKotlinIntProgressionCompanion, CnmeshKotlinIntProgression, CnmeshKotlinIntRangeCompanion, CnmeshKotlinIntRange, CnmeshKotlinLongProgressionCompanion, CnmeshKotlinLongProgression, CnmeshKotlinLongRangeCompanion, CnmeshKotlinLongRange, NSDate, NSDateComponents, NSTimeZone, CnmeshJsonArrayBuilder, CnmeshJsonObjectBuilder, CnmeshKotlinByteIterator, CnmeshHttpResponseReceiveFail, CnmeshConnectTimeoutException, CnmeshSocketTimeoutException, CnmeshCloseableCoroutineDispatcher, CnmeshTypeQualifier, CnmeshFactoryInstanceFactory<T>, CnmeshScopedInstanceFactory<T>, CnmeshJsonBuilder, CnmeshCommonFlow<T>, CnmeshScannerBuilder, CnmeshPeripheralBuilder, CnmeshHexBuilder, CnmeshKtor_httpHeaderValueParam, CnmeshKtor_httpHeaderValueWithParametersCompanion, CnmeshKtor_httpHeaderValueWithParameters, CnmeshKtor_httpContentTypeCompanion, CnmeshKtor_ioChunkBuffer, CnmeshKtor_ioInputCompanion, CnmeshKtor_ioMemory, CnmeshKtor_ioBuffer, CnmeshKtor_httpUrlCompanion, CnmeshKtor_httpURLProtocol, CnmeshKtor_httpHttpStatusCodeCompanion, CnmeshKtor_httpHttpMethodCompanion, CnmeshKtor_utilsStringValuesBuilderImpl, CnmeshKtor_httpURLBuilderCompanion, CnmeshKtor_utilsGMTDateCompanion, CnmeshKtor_utilsWeekDay, CnmeshKtor_utilsMonth, CnmeshKtor_httpHttpProtocolVersionCompanion, CnmeshKtor_ioByteReadPacketCompanion, CnmeshKtor_httpContentDisposition, CnmeshKtor_utilsDelegatingConversionServiceConfiguration<T>, CnmeshKtor_ioCharsetCompanion, CnmeshKtor_ioCharsetDecoder, CnmeshKtor_ioCharsetEncoder, CnmeshKtor_websocketsFrameCompanion, CnmeshKtor_websocketsFrameType, CnmeshKtor_websocketsWebSocketExtensionHeader, CnmeshKtor_httpCookieEncoding, CnmeshAtomicfuSynchronizedObjectStatus, CnmeshKotlinx_serialization_coreSerialKind, CnmeshKtor_ioOutput, CnmeshKotlinCharArray, CnmeshKotlinKTypeProjection, CnmeshKtor_ioBufferCompanion, CnmeshKtor_ioChunkBufferCompanion, CnmeshKtor_ioMemoryCompanion, CnmeshKtor_httpURLProtocolCompanion, CnmeshKtor_utilsWeekDayCompanion, CnmeshKtor_utilsMonthCompanion, CnmeshKtor_httpContentDispositionCompanion, CnmeshKtor_websocketsFrameTypeCompanion, CnmeshKotlinCharIterator, CnmeshKotlinKVariance, CnmeshKotlinKTypeProjectionCompanion;

@protocol CnmeshJsonSerializer, CnmeshKtor_httpContentTypeMatcher, CnmeshHttpClientPlugin, CnmeshKotlinComparable, CnmeshLogger, CnmeshKtor_serializationContentConverter, CnmeshKtor_serializationConfiguration, CnmeshKotlinCoroutineContext, CnmeshCoroutineScope, CnmeshKtor_ioCloseable, CnmeshHttpClientEngine, CnmeshHttpClientEngineCapability, CnmeshKtor_utilsAttributes, CnmeshKtor_ioByteReadChannel, CnmeshHttpRequest, CnmeshKotlinKClass, CnmeshKtor_httpHeaders, CnmeshKtor_ioByteWriteChannel, CnmeshKtor_httpHttpMessage, CnmeshKtor_httpHttpMessageBuilder, CnmeshJob, CnmeshKotlinSuspendFunction2, CnmeshKtor_httpParameters, CnmeshKotlinSuspendFunction1, CnmeshKotlinIterator, CnmeshKotlinIterable, CnmeshHttpClientEngineFactory, CnmeshKotlinSuspendFunction3, CnmeshKtor_websocketsWebSocketExtension, CnmeshReceiveChannel, CnmeshSendChannel, CnmeshKtor_websocketsWebSocketSession, CnmeshClientWebSocketSession, CnmeshDeferred, CnmeshKtor_websocketsDefaultWebSocketSession, CnmeshKtor_serializationWebsocketContentConverter, CnmeshCookiesStorage, CnmeshChildHandle, CnmeshChildJob, CnmeshDisposableHandle, CnmeshKotlinSequence, CnmeshSelectClause0, CnmeshKotlinCoroutineContextKey, CnmeshKotlinCoroutineContextElement, CnmeshParentJob, CnmeshSelectInstance, CnmeshKotlinSuspendFunction0, CnmeshKotlinContinuation, CnmeshKotlinContinuationInterceptor, CnmeshRunnable, CnmeshSelectClause1, CnmeshCancellableContinuation, CnmeshCopyableThrowable, CnmeshSelectClause2, CnmeshChannelIterator, CnmeshBroadcastChannel, CnmeshFlowCollector, CnmeshFlow, CnmeshStateFlow, CnmeshSharedFlow, CnmeshMutableSharedFlow, CnmeshSharingStarted, CnmeshFusibleFlow, CnmeshProducerScope, CnmeshMainDispatcherFactory, CnmeshStately_isolateStateRunner, CnmeshKotlinCollection, CnmeshKotlinMutableIterable, CnmeshKotlinMutableCollection, CnmeshKotlinMutableIterator, CnmeshKotlinListIterator, CnmeshKotlinMutableListIterator, CnmeshKoinScopeComponent, CnmeshQualifier, CnmeshKotlinLazy, CnmeshScopeCallback, CnmeshKoinComponent, CnmeshKoinContext, CnmeshClock, CnmeshKotlinx_serialization_coreKSerializer, CnmeshKotlinx_serialization_coreEncoder, CnmeshKotlinx_serialization_coreSerialDescriptor, CnmeshKotlinx_serialization_coreSerializationStrategy, CnmeshKotlinx_serialization_coreDecoder, CnmeshKotlinx_serialization_coreDeserializationStrategy, CnmeshKotlinx_serialization_coreCompositeDecoder, CnmeshKotlinx_serialization_coreSerialFormat, CnmeshKotlinx_serialization_coreStringFormat, CnmeshKotlinx_serialization_coreCompositeEncoder, CnmeshNotifyService, CnmeshDeviceService, CnmeshOtaService, CnmeshCommandService, CnmeshPairService, CnmeshMeshDeviceScanner, CnmeshMeshDeviceConnecter, CnmeshMultiplatform_settingsSettings, CnmeshCharacteristic, CnmeshDescriptor, CnmeshPeripheral, CnmeshScanner, CnmeshService, CnmeshLogging_DataProcessor, CnmeshLogEngine, CnmeshKotlinClosedRange, CnmeshCompletableJob, CnmeshCompletableDeferred, CnmeshCoroutineExceptionHandler, CnmeshChannel, CnmeshMutableStateFlow, CnmeshKotlinSuspendFunction5, CnmeshKotlinSuspendFunction4, CnmeshKotlinSuspendFunction6, CnmeshSelectBuilder, CnmeshMutex, CnmeshSemaphore, CnmeshUuidHasher, CnmeshKotlinTimeSource, CnmeshKotlinKType, CnmeshKtor_ioObjectPool, CnmeshKotlinAppendable, CnmeshKtor_ioReadSession, CnmeshKotlinKDeclarationContainer, CnmeshKotlinKAnnotatedElement, CnmeshKotlinKClassifier, CnmeshKotlinMapEntry, CnmeshKtor_utilsStringValues, CnmeshKtor_utilsStringValuesBuilder, CnmeshKtor_httpParametersBuilder, CnmeshKotlinFunction, CnmeshKtor_utilsConversionService, CnmeshKtor_websocketsWebSocketExtensionFactory, CnmeshKotlinAnnotation, CnmeshKotlinx_serialization_coreSerializersModuleCollector, CnmeshKotlinTimeMark;

NS_ASSUME_NONNULL_BEGIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunknown-warning-option"
#pragma clang diagnostic ignored "-Wincompatible-property-type"
#pragma clang diagnostic ignored "-Wnullability"

#pragma push_macro("_Nullable_result")
#if !__has_feature(nullability_nullable_result)
#undef _Nullable_result
#define _Nullable_result _Nullable
#endif

__attribute__((swift_name("KotlinBase")))
@interface CnmeshBase : NSObject
- (instancetype)init __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (void)initialize __attribute__((objc_requires_super));
@end;

@interface CnmeshBase (CnmeshBaseCopying) <NSCopying>
@end;

__attribute__((swift_name("KotlinMutableSet")))
@interface CnmeshMutableSet<ObjectType> : NSMutableSet<ObjectType>
@end;

__attribute__((swift_name("KotlinMutableDictionary")))
@interface CnmeshMutableDictionary<KeyType, ObjectType> : NSMutableDictionary<KeyType, ObjectType>
@end;

@interface NSError (NSErrorCnmeshKotlinException)
@property (readonly) id _Nullable kotlinException;
@end;

__attribute__((swift_name("KotlinNumber")))
@interface CnmeshNumber : NSNumber
- (instancetype)initWithChar:(char)value __attribute__((unavailable));
- (instancetype)initWithUnsignedChar:(unsigned char)value __attribute__((unavailable));
- (instancetype)initWithShort:(short)value __attribute__((unavailable));
- (instancetype)initWithUnsignedShort:(unsigned short)value __attribute__((unavailable));
- (instancetype)initWithInt:(int)value __attribute__((unavailable));
- (instancetype)initWithUnsignedInt:(unsigned int)value __attribute__((unavailable));
- (instancetype)initWithLong:(long)value __attribute__((unavailable));
- (instancetype)initWithUnsignedLong:(unsigned long)value __attribute__((unavailable));
- (instancetype)initWithLongLong:(long long)value __attribute__((unavailable));
- (instancetype)initWithUnsignedLongLong:(unsigned long long)value __attribute__((unavailable));
- (instancetype)initWithFloat:(float)value __attribute__((unavailable));
- (instancetype)initWithDouble:(double)value __attribute__((unavailable));
- (instancetype)initWithBool:(BOOL)value __attribute__((unavailable));
- (instancetype)initWithInteger:(NSInteger)value __attribute__((unavailable));
- (instancetype)initWithUnsignedInteger:(NSUInteger)value __attribute__((unavailable));
+ (instancetype)numberWithChar:(char)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedChar:(unsigned char)value __attribute__((unavailable));
+ (instancetype)numberWithShort:(short)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedShort:(unsigned short)value __attribute__((unavailable));
+ (instancetype)numberWithInt:(int)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedInt:(unsigned int)value __attribute__((unavailable));
+ (instancetype)numberWithLong:(long)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedLong:(unsigned long)value __attribute__((unavailable));
+ (instancetype)numberWithLongLong:(long long)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedLongLong:(unsigned long long)value __attribute__((unavailable));
+ (instancetype)numberWithFloat:(float)value __attribute__((unavailable));
+ (instancetype)numberWithDouble:(double)value __attribute__((unavailable));
+ (instancetype)numberWithBool:(BOOL)value __attribute__((unavailable));
+ (instancetype)numberWithInteger:(NSInteger)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedInteger:(NSUInteger)value __attribute__((unavailable));
@end;

__attribute__((swift_name("KotlinByte")))
@interface CnmeshByte : CnmeshNumber
- (instancetype)initWithChar:(char)value;
+ (instancetype)numberWithChar:(char)value;
@end;

__attribute__((swift_name("KotlinUByte")))
@interface CnmeshUByte : CnmeshNumber
- (instancetype)initWithUnsignedChar:(unsigned char)value;
+ (instancetype)numberWithUnsignedChar:(unsigned char)value;
@end;

__attribute__((swift_name("KotlinShort")))
@interface CnmeshShort : CnmeshNumber
- (instancetype)initWithShort:(short)value;
+ (instancetype)numberWithShort:(short)value;
@end;

__attribute__((swift_name("KotlinUShort")))
@interface CnmeshUShort : CnmeshNumber
- (instancetype)initWithUnsignedShort:(unsigned short)value;
+ (instancetype)numberWithUnsignedShort:(unsigned short)value;
@end;

__attribute__((swift_name("KotlinInt")))
@interface CnmeshInt : CnmeshNumber
- (instancetype)initWithInt:(int)value;
+ (instancetype)numberWithInt:(int)value;
@end;

__attribute__((swift_name("KotlinUInt")))
@interface CnmeshUInt : CnmeshNumber
- (instancetype)initWithUnsignedInt:(unsigned int)value;
+ (instancetype)numberWithUnsignedInt:(unsigned int)value;
@end;

__attribute__((swift_name("KotlinLong")))
@interface CnmeshLong : CnmeshNumber
- (instancetype)initWithLongLong:(long long)value;
+ (instancetype)numberWithLongLong:(long long)value;
@end;

__attribute__((swift_name("KotlinULong")))
@interface CnmeshULong : CnmeshNumber
- (instancetype)initWithUnsignedLongLong:(unsigned long long)value;
+ (instancetype)numberWithUnsignedLongLong:(unsigned long long)value;
@end;

__attribute__((swift_name("KotlinFloat")))
@interface CnmeshFloat : CnmeshNumber
- (instancetype)initWithFloat:(float)value;
+ (instancetype)numberWithFloat:(float)value;
@end;

__attribute__((swift_name("KotlinDouble")))
@interface CnmeshDouble : CnmeshNumber
- (instancetype)initWithDouble:(double)value;
+ (instancetype)numberWithDouble:(double)value;
@end;

__attribute__((swift_name("KotlinBoolean")))
@interface CnmeshBoolean : CnmeshNumber
- (instancetype)initWithBool:(BOOL)value;
+ (instancetype)numberWithBool:(BOOL)value;
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonPlugin")))
@interface CnmeshJsonPlugin : CnmeshBase
@property (class, readonly, getter=companion) CnmeshJsonPluginPlugin *companion __attribute__((swift_name("companion")));
@property (readonly) NSArray<CnmeshKtor_httpContentType *> *acceptContentTypes __attribute__((swift_name("acceptContentTypes")));
@property (readonly) id<CnmeshJsonSerializer> serializer __attribute__((swift_name("serializer")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonPlugin.Config")))
@interface CnmeshJsonPluginConfig : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)acceptContentTypes:(CnmeshKotlinArray<CnmeshKtor_httpContentType *> *)contentTypes __attribute__((swift_name("accept(contentTypes:)")));
- (void)receiveMatcher:(id<CnmeshKtor_httpContentTypeMatcher>)matcher __attribute__((swift_name("receive(matcher:)")));
@property NSArray<CnmeshKtor_httpContentType *> *acceptContentTypes __attribute__((swift_name("acceptContentTypes")));
@property NSArray<id<CnmeshKtor_httpContentTypeMatcher>> *receiveContentTypeMatchers __attribute__((swift_name("receiveContentTypeMatchers")));
@property id<CnmeshJsonSerializer> _Nullable serializer __attribute__((swift_name("serializer")));
@end;

__attribute__((swift_name("HttpClientPlugin")))
@protocol CnmeshHttpClientPlugin
@required
- (void)installPlugin:(id)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (id)prepareBlock:(void (^)(id))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_utilsAttributeKey<id> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonPlugin.Plugin")))
@interface CnmeshJsonPluginPlugin : CnmeshBase <CnmeshHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshJsonPluginPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshJsonPlugin *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshJsonPlugin *)prepareBlock:(void (^)(CnmeshJsonPluginConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshJsonPlugin *> *key __attribute__((swift_name("key")));
@end;

__attribute__((swift_name("JsonSerializer")))
@protocol CnmeshJsonSerializer
@required
- (id)readType:(CnmeshKtor_utilsTypeInfo *)type body:(CnmeshKtor_ioInput *)body __attribute__((swift_name("read(type:body:)")));
- (CnmeshKtor_httpOutgoingContent *)writeData:(id)data __attribute__((swift_name("write(data:)")));
- (CnmeshKtor_httpOutgoingContent *)writeData:(id)data contentType:(CnmeshKtor_httpContentType *)contentType __attribute__((swift_name("write(data:contentType:)")));
@end;

__attribute__((swift_name("KotlinComparable")))
@protocol CnmeshKotlinComparable
@required
- (int32_t)compareToOther:(id _Nullable)other __attribute__((swift_name("compareTo(other:)")));
@end;

__attribute__((swift_name("KotlinEnum")))
@interface CnmeshKotlinEnum<E> : CnmeshBase <CnmeshKotlinComparable>
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshKotlinEnumCompanion *companion __attribute__((swift_name("companion")));
- (int32_t)compareToOther:(E)other __attribute__((swift_name("compareTo(other:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) int32_t ordinal __attribute__((swift_name("ordinal")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LogLevel")))
@interface CnmeshLogLevel : CnmeshKotlinEnum<CnmeshLogLevel *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) CnmeshLogLevel *all __attribute__((swift_name("all")));
@property (class, readonly) CnmeshLogLevel *headers __attribute__((swift_name("headers")));
@property (class, readonly) CnmeshLogLevel *body __attribute__((swift_name("body")));
@property (class, readonly) CnmeshLogLevel *info __attribute__((swift_name("info")));
@property (class, readonly) CnmeshLogLevel *none __attribute__((swift_name("none")));
+ (CnmeshKotlinArray<CnmeshLogLevel *> *)values __attribute__((swift_name("values()")));
@property (readonly) BOOL body __attribute__((swift_name("body")));
@property (readonly) BOOL headers __attribute__((swift_name("headers")));
@property (readonly) BOOL info __attribute__((swift_name("info")));
@end;

__attribute__((swift_name("Logger")))
@protocol CnmeshLogger
@required
- (void)logMessage:(NSString *)message __attribute__((swift_name("log(message:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LoggerCompanion")))
@interface CnmeshLoggerCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshLoggerCompanion *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Logging")))
@interface CnmeshLogging : CnmeshBase
@property (class, readonly, getter=companion) CnmeshLoggingCompanion *companion __attribute__((swift_name("companion")));
@property NSArray<CnmeshBoolean *(^)(CnmeshHttpRequestBuilder *)> *filters __attribute__((swift_name("filters")));
@property CnmeshLogLevel *level __attribute__((swift_name("level")));
@property (readonly) id<CnmeshLogger> logger __attribute__((swift_name("logger")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Logging.Companion")))
@interface CnmeshLoggingCompanion : CnmeshBase <CnmeshHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshLoggingCompanion *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshLogging *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshLogging *)prepareBlock:(void (^)(CnmeshLoggingConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshLogging *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Logging.Config")))
@interface CnmeshLoggingConfig : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)filterPredicate:(CnmeshBoolean *(^)(CnmeshHttpRequestBuilder *))predicate __attribute__((swift_name("filter(predicate:)")));
@property CnmeshLogLevel *level __attribute__((swift_name("level")));
@property id<CnmeshLogger> logger __attribute__((swift_name("logger")));
@end;

__attribute__((swift_name("KotlinThrowable")))
@interface CnmeshKotlinThrowable : CnmeshBase
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (CnmeshKotlinArray<NSString *> *)getStackTrace __attribute__((swift_name("getStackTrace()")));
- (void)printStackTrace __attribute__((swift_name("printStackTrace()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshKotlinThrowable * _Nullable cause __attribute__((swift_name("cause")));
@property (readonly) NSString * _Nullable message __attribute__((swift_name("message")));
- (NSError *)asError __attribute__((swift_name("asError()")));
@end;

__attribute__((swift_name("KotlinException")))
@interface CnmeshKotlinException : CnmeshKotlinThrowable
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentConverterException")))
@interface CnmeshContentConverterException : CnmeshKotlinException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentNegotiation")))
@interface CnmeshContentNegotiation : CnmeshBase
@property (class, readonly, getter=companion) CnmeshContentNegotiationPlugin *companion __attribute__((swift_name("companion")));
@end;

__attribute__((swift_name("Ktor_serializationConfiguration")))
@protocol CnmeshKtor_serializationConfiguration
@required
- (void)registerContentType:(CnmeshKtor_httpContentType *)contentType converter:(id<CnmeshKtor_serializationContentConverter>)converter configuration:(void (^)(id<CnmeshKtor_serializationContentConverter>))configuration __attribute__((swift_name("register(contentType:converter:configuration:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentNegotiation.Config")))
@interface CnmeshContentNegotiationConfig : CnmeshBase <CnmeshKtor_serializationConfiguration>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)registerContentType:(CnmeshKtor_httpContentType *)contentType converter:(id<CnmeshKtor_serializationContentConverter>)converter configuration:(void (^)(id<CnmeshKtor_serializationContentConverter>))configuration __attribute__((swift_name("register(contentType:converter:configuration:)")));
- (void)registerContentTypeToSend:(CnmeshKtor_httpContentType *)contentTypeToSend converter:(id<CnmeshKtor_serializationContentConverter>)converter contentTypeMatcher:(id<CnmeshKtor_httpContentTypeMatcher>)contentTypeMatcher configuration:(void (^)(id<CnmeshKtor_serializationContentConverter>))configuration __attribute__((swift_name("register(contentTypeToSend:converter:contentTypeMatcher:configuration:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentNegotiation.Plugin")))
@interface CnmeshContentNegotiationPlugin : CnmeshBase <CnmeshHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshContentNegotiationPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshContentNegotiation *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshContentNegotiation *)prepareBlock:(void (^)(CnmeshContentNegotiationConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshContentNegotiation *> *key __attribute__((swift_name("key")));
@end;

__attribute__((swift_name("Ktor_httpContentTypeMatcher")))
@protocol CnmeshKtor_httpContentTypeMatcher
@required
- (BOOL)containsContentType:(CnmeshKtor_httpContentType *)contentType __attribute__((swift_name("contains(contentType:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonContentTypeMatcher")))
@interface CnmeshJsonContentTypeMatcher : CnmeshBase <CnmeshKtor_httpContentTypeMatcher>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)jsonContentTypeMatcher __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshJsonContentTypeMatcher *shared __attribute__((swift_name("shared")));
- (BOOL)containsContentType:(CnmeshKtor_httpContentType *)contentType __attribute__((swift_name("contains(contentType:)")));
@end;

__attribute__((swift_name("CoroutineScope")))
@protocol CnmeshCoroutineScope
@required
@property (readonly) id<CnmeshKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@end;

__attribute__((swift_name("Ktor_ioCloseable")))
@protocol CnmeshKtor_ioCloseable
@required
- (void)close __attribute__((swift_name("close()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClient")))
@interface CnmeshHttpClient : CnmeshBase <CnmeshCoroutineScope, CnmeshKtor_ioCloseable>
- (instancetype)initWithEngine:(id<CnmeshHttpClientEngine>)engine userConfig:(CnmeshHttpClientConfig<CnmeshHttpClientEngineConfig *> *)userConfig __attribute__((swift_name("init(engine:userConfig:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));
- (CnmeshHttpClient *)configBlock:(void (^)(CnmeshHttpClientConfig<id> *))block __attribute__((swift_name("config(block:)")));
- (BOOL)isSupportedCapability:(id<CnmeshHttpClientEngineCapability>)capability __attribute__((swift_name("isSupported(capability:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<CnmeshKtor_utilsAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) id<CnmeshKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) id<CnmeshHttpClientEngine> engine __attribute__((swift_name("engine")));
@property (readonly) CnmeshHttpClientEngineConfig *engineConfig __attribute__((swift_name("engineConfig")));
@property (readonly) CnmeshKtor_eventsEvents *monitor __attribute__((swift_name("monitor")));
@property (readonly) CnmeshHttpReceivePipeline *receivePipeline __attribute__((swift_name("receivePipeline")));
@property (readonly) CnmeshHttpRequestPipeline *requestPipeline __attribute__((swift_name("requestPipeline")));
@property (readonly) CnmeshHttpResponsePipeline *responsePipeline __attribute__((swift_name("responsePipeline")));
@property (readonly) CnmeshHttpSendPipeline *sendPipeline __attribute__((swift_name("sendPipeline")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientConfig")))
@interface CnmeshHttpClientConfig<T> : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (CnmeshHttpClientConfig<T> *)clone __attribute__((swift_name("clone()")));
- (void)engineBlock:(void (^)(T))block __attribute__((swift_name("engine(block:)")));
- (void)installClient:(CnmeshHttpClient *)client __attribute__((swift_name("install(client:)")));
- (void)installPlugin:(id<CnmeshHttpClientPlugin>)plugin configure:(void (^)(id))configure __attribute__((swift_name("install(plugin:configure:)")));
- (void)installKey:(NSString *)key block:(void (^)(CnmeshHttpClient *))block __attribute__((swift_name("install(key:block:)")));
- (void)plusAssignOther:(CnmeshHttpClientConfig<T> *)other __attribute__((swift_name("plusAssign(other:)")));
@property BOOL developmentMode __attribute__((swift_name("developmentMode")));
@property BOOL expectSuccess __attribute__((swift_name("expectSuccess")));
@property BOOL followRedirects __attribute__((swift_name("followRedirects")));
@property BOOL useDefaultTransformers __attribute__((swift_name("useDefaultTransformers")));
@end;

__attribute__((swift_name("KotlinRuntimeException")))
@interface CnmeshKotlinRuntimeException : CnmeshKotlinException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((swift_name("KotlinIllegalStateException")))
@interface CnmeshKotlinIllegalStateException : CnmeshKotlinRuntimeException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DoubleReceiveException")))
@interface CnmeshDoubleReceiveException : CnmeshKotlinIllegalStateException
- (instancetype)initWithCall:(CnmeshHttpClientCall *)call __attribute__((swift_name("init(call:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSString *message __attribute__((swift_name("message")));
@end;

__attribute__((swift_name("HttpClientCall")))
@interface CnmeshHttpClientCall : CnmeshBase <CnmeshCoroutineScope>
- (instancetype)initWithClient:(CnmeshHttpClient *)client requestData:(CnmeshHttpRequestData *)requestData responseData:(CnmeshHttpResponseData *)responseData __attribute__((swift_name("init(client:requestData:responseData:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithClient:(CnmeshHttpClient *)client __attribute__((swift_name("init(client:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshHttpClientCallCompanion *companion __attribute__((swift_name("companion")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyInfo:(CnmeshKtor_utilsTypeInfo *)info completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("body(info:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getResponseContentWithCompletionHandler:(void (^)(id<CnmeshKtor_ioByteReadChannel> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("getResponseContent(completionHandler:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL allowDoubleReceive __attribute__((swift_name("allowDoubleReceive")));
@property (readonly) id<CnmeshKtor_utilsAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) CnmeshHttpClient *client __attribute__((swift_name("client")));
@property (readonly) id<CnmeshKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property id<CnmeshHttpRequest> request __attribute__((swift_name("request")));
@property CnmeshHttpResponse *response __attribute__((swift_name("response")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientCall.Companion")))
@interface CnmeshHttpClientCallCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshHttpClientCallCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) CnmeshKtor_utilsAttributeKey<id> *CustomResponse __attribute__((swift_name("CustomResponse"))) __attribute__((unavailable("This is going to be removed. Please file a ticket with clarification why and what for do you need it.")));
@end;

__attribute__((swift_name("KotlinUnsupportedOperationException")))
@interface CnmeshKotlinUnsupportedOperationException : CnmeshKotlinRuntimeException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NoTransformationFoundException")))
@interface CnmeshNoTransformationFoundException : CnmeshKotlinUnsupportedOperationException
- (instancetype)initWithResponse:(CnmeshHttpResponse *)response from:(id<CnmeshKotlinKClass>)from to:(id<CnmeshKotlinKClass>)to __attribute__((swift_name("init(response:from:to:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSString * _Nullable message __attribute__((swift_name("message")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ReceivePipelineException")))
@interface CnmeshReceivePipelineException : CnmeshKotlinIllegalStateException
- (instancetype)initWithRequest:(CnmeshHttpClientCall *)request info:(CnmeshKtor_utilsTypeInfo *)info cause:(CnmeshKotlinThrowable *)cause __attribute__((swift_name("init(request:info:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) CnmeshKotlinThrowable *cause __attribute__((swift_name("cause")));
@property (readonly) CnmeshKtor_utilsTypeInfo *info __attribute__((swift_name("info")));
@property (readonly) CnmeshHttpClientCall *request __attribute__((swift_name("request")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UnsupportedContentTypeException")))
@interface CnmeshUnsupportedContentTypeException : CnmeshKotlinIllegalStateException
- (instancetype)initWithContent:(CnmeshKtor_httpOutgoingContent *)content __attribute__((swift_name("init(content:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("KotlinIllegalArgumentException")))
@interface CnmeshKotlinIllegalArgumentException : CnmeshKotlinRuntimeException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UnsupportedUpgradeProtocolException")))
@interface CnmeshUnsupportedUpgradeProtocolException : CnmeshKotlinIllegalArgumentException
- (instancetype)initWithUrl:(CnmeshKtor_httpUrl *)url __attribute__((swift_name("init(url:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CacheControl")))
@interface CnmeshCacheControl : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)cacheControl __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshCacheControl *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *MAX_AGE __attribute__((swift_name("MAX_AGE")));
@property (readonly) NSString *MAX_STALE __attribute__((swift_name("MAX_STALE")));
@property (readonly) NSString *MIN_FRESH __attribute__((swift_name("MIN_FRESH")));
@property (readonly) NSString *MUST_REVALIDATE __attribute__((swift_name("MUST_REVALIDATE")));
@property (readonly) NSString *NO_CACHE __attribute__((swift_name("NO_CACHE")));
@property (readonly) NSString *NO_STORE __attribute__((swift_name("NO_STORE")));
@property (readonly) NSString *NO_TRANSFORM __attribute__((swift_name("NO_TRANSFORM")));
@property (readonly) NSString *ONLY_IF_CACHED __attribute__((swift_name("ONLY_IF_CACHED")));
@property (readonly) NSString *PRIVATE __attribute__((swift_name("PRIVATE")));
@property (readonly) NSString *PROXY_REVALIDATE __attribute__((swift_name("PROXY_REVALIDATE")));
@property (readonly) NSString *PUBLIC __attribute__((swift_name("PUBLIC")));
@property (readonly) NSString *S_MAX_AGE __attribute__((swift_name("S_MAX_AGE")));
@end;

__attribute__((swift_name("Ktor_httpOutgoingContent")))
@interface CnmeshKtor_httpOutgoingContent : CnmeshBase
- (id _Nullable)getPropertyKey:(CnmeshKtor_utilsAttributeKey<id> *)key __attribute__((swift_name("getProperty(key:)")));
- (void)setPropertyKey:(CnmeshKtor_utilsAttributeKey<id> *)key value:(id _Nullable)value __attribute__((swift_name("setProperty(key:value:)")));
- (id<CnmeshKtor_httpHeaders> _Nullable)trailers __attribute__((swift_name("trailers()")));
@property (readonly) CnmeshLong * _Nullable contentLength __attribute__((swift_name("contentLength")));
@property (readonly) CnmeshKtor_httpContentType * _Nullable contentType __attribute__((swift_name("contentType")));
@property (readonly) id<CnmeshKtor_httpHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) CnmeshKtor_httpHttpStatusCode * _Nullable status __attribute__((swift_name("status")));
@end;

__attribute__((swift_name("Ktor_httpOutgoingContent.NoContent")))
@interface CnmeshKtor_httpOutgoingContentNoContent : CnmeshKtor_httpOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EmptyContent")))
@interface CnmeshEmptyContent : CnmeshKtor_httpOutgoingContentNoContent
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)emptyContent __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshEmptyContent *shared __attribute__((swift_name("shared")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshLong *contentLength __attribute__((swift_name("contentLength")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpResponseReceiveFail")))
@interface CnmeshHttpResponseReceiveFail : CnmeshBase
- (instancetype)initWithResponse:(CnmeshHttpResponse *)response cause:(CnmeshKotlinThrowable *)cause __attribute__((swift_name("init(response:cause:)"))) __attribute__((objc_designated_initializer));
@property (readonly) CnmeshKotlinThrowable *cause __attribute__((swift_name("cause")));
@property (readonly) CnmeshHttpResponse *response __attribute__((swift_name("response")));
@end;

__attribute__((swift_name("Ktor_ioIOException")))
@interface CnmeshKtor_ioIOException : CnmeshKotlinException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConnectTimeoutException")))
@interface CnmeshConnectTimeoutException : CnmeshKtor_ioIOException
- (instancetype)initWithMessage:(NSString *)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SocketTimeoutException")))
@interface CnmeshSocketTimeoutException : CnmeshKtor_ioIOException
- (instancetype)initWithMessage:(NSString *)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("ClientUpgradeContent")))
@interface CnmeshClientUpgradeContent : CnmeshKtor_httpOutgoingContentNoContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)pipeToOutput:(id<CnmeshKtor_ioByteWriteChannel>)output completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("pipeTo(output:completionHandler:)")));
- (void)verifyHeaders:(id<CnmeshKtor_httpHeaders>)headers __attribute__((swift_name("verify(headers:)")));
@property (readonly) id<CnmeshKtor_ioByteWriteChannel> output __attribute__((swift_name("output")));
@end;

__attribute__((swift_name("Ktor_httpHttpMessage")))
@protocol CnmeshKtor_httpHttpMessage
@required
@property (readonly) id<CnmeshKtor_httpHeaders> headers_ __attribute__((swift_name("headers_")));
@end;

__attribute__((swift_name("HttpRequest")))
@protocol CnmeshHttpRequest <CnmeshKtor_httpHttpMessage, CnmeshCoroutineScope>
@required
@property (readonly) id<CnmeshKtor_utilsAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) CnmeshHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) CnmeshKtor_httpOutgoingContent *content __attribute__((swift_name("content")));
@property (readonly) CnmeshKtor_httpHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) CnmeshKtor_httpUrl *url __attribute__((swift_name("url")));
@end;

__attribute__((swift_name("DefaultHttpRequest")))
@interface CnmeshDefaultHttpRequest : CnmeshBase <CnmeshHttpRequest>
- (instancetype)initWithCall:(CnmeshHttpClientCall *)call data:(CnmeshHttpRequestData *)data __attribute__((swift_name("init(call:data:)"))) __attribute__((objc_designated_initializer));
@property (readonly) id<CnmeshKtor_utilsAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) CnmeshHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) CnmeshKtor_httpOutgoingContent *content __attribute__((swift_name("content")));
@property (readonly) id<CnmeshKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) id<CnmeshKtor_httpHeaders> headers_ __attribute__((swift_name("headers_")));
@property (readonly) CnmeshKtor_httpHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) CnmeshKtor_httpUrl *url __attribute__((swift_name("url")));
@end;

__attribute__((swift_name("Ktor_httpHttpMessageBuilder")))
@protocol CnmeshKtor_httpHttpMessageBuilder
@required
@property (readonly) CnmeshKtor_httpHeadersBuilder *headers_ __attribute__((swift_name("headers_")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestBuilder")))
@interface CnmeshHttpRequestBuilder : CnmeshBase <CnmeshKtor_httpHttpMessageBuilder>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (class, readonly, getter=companion) CnmeshHttpRequestBuilderCompanion *companion __attribute__((swift_name("companion")));
- (CnmeshHttpRequestData *)build __attribute__((swift_name("build()")));
- (id _Nullable)getCapabilityOrNullKey:(id<CnmeshHttpClientEngineCapability>)key __attribute__((swift_name("getCapabilityOrNull(key:)")));
- (void)setAttributesBlock:(void (^)(id<CnmeshKtor_utilsAttributes>))block __attribute__((swift_name("setAttributes(block:)")));
- (void)setCapabilityKey:(id<CnmeshHttpClientEngineCapability>)key capability:(id)capability __attribute__((swift_name("setCapability(key:capability:)")));
- (CnmeshHttpRequestBuilder *)takeFromBuilder:(CnmeshHttpRequestBuilder *)builder __attribute__((swift_name("takeFrom(builder:)")));
- (CnmeshHttpRequestBuilder *)takeFromWithExecutionContextBuilder:(CnmeshHttpRequestBuilder *)builder __attribute__((swift_name("takeFromWithExecutionContext(builder:)")));
- (void)urlBlock:(void (^)(CnmeshKtor_httpURLBuilder *, CnmeshKtor_httpURLBuilder *))block __attribute__((swift_name("url(block:)")));
@property (readonly) id<CnmeshKtor_utilsAttributes> attributes __attribute__((swift_name("attributes")));
@property id body __attribute__((swift_name("body")));
@property CnmeshKtor_utilsTypeInfo * _Nullable bodyType __attribute__((swift_name("bodyType")));
@property (readonly) id<CnmeshJob> executionContext __attribute__((swift_name("executionContext")));
@property (readonly) CnmeshKtor_httpHeadersBuilder *headers_ __attribute__((swift_name("headers_")));
@property CnmeshKtor_httpHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) CnmeshKtor_httpURLBuilder *url __attribute__((swift_name("url")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestBuilder.Companion")))
@interface CnmeshHttpRequestBuilderCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshHttpRequestBuilderCompanion *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestData")))
@interface CnmeshHttpRequestData : CnmeshBase
- (instancetype)initWithUrl:(CnmeshKtor_httpUrl *)url method:(CnmeshKtor_httpHttpMethod *)method headers:(id<CnmeshKtor_httpHeaders>)headers body:(CnmeshKtor_httpOutgoingContent *)body executionContext:(id<CnmeshJob>)executionContext attributes:(id<CnmeshKtor_utilsAttributes>)attributes __attribute__((swift_name("init(url:method:headers:body:executionContext:attributes:)"))) __attribute__((objc_designated_initializer));
- (id _Nullable)getCapabilityOrNullKey:(id<CnmeshHttpClientEngineCapability>)key __attribute__((swift_name("getCapabilityOrNull(key:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<CnmeshKtor_utilsAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) CnmeshKtor_httpOutgoingContent *body __attribute__((swift_name("body")));
@property (readonly) id<CnmeshJob> executionContext __attribute__((swift_name("executionContext")));
@property (readonly) id<CnmeshKtor_httpHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) CnmeshKtor_httpHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) CnmeshKtor_httpUrl *url __attribute__((swift_name("url")));
@end;

__attribute__((swift_name("Ktor_utilsPipeline")))
@interface CnmeshKtor_utilsPipeline<TSubject, TContext> : CnmeshBase
- (instancetype)initWithPhase:(CnmeshKtor_utilsPipelinePhase *)phase interceptors:(NSArray<id<CnmeshKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhases:(CnmeshKotlinArray<CnmeshKtor_utilsPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer));
- (void)addPhasePhase:(CnmeshKtor_utilsPipelinePhase *)phase __attribute__((swift_name("addPhase(phase:)")));
- (void)afterIntercepted __attribute__((swift_name("afterIntercepted()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeContext:(TContext)context subject:(TSubject)subject completionHandler:(void (^)(TSubject _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(context:subject:completionHandler:)")));
- (void)insertPhaseAfterReference:(CnmeshKtor_utilsPipelinePhase *)reference phase:(CnmeshKtor_utilsPipelinePhase *)phase __attribute__((swift_name("insertPhaseAfter(reference:phase:)")));
- (void)insertPhaseBeforeReference:(CnmeshKtor_utilsPipelinePhase *)reference phase:(CnmeshKtor_utilsPipelinePhase *)phase __attribute__((swift_name("insertPhaseBefore(reference:phase:)")));
- (void)interceptPhase:(CnmeshKtor_utilsPipelinePhase *)phase block:(id<CnmeshKotlinSuspendFunction2>)block __attribute__((swift_name("intercept(phase:block:)")));
- (NSArray<id<CnmeshKotlinSuspendFunction2>> *)interceptorsForPhasePhase:(CnmeshKtor_utilsPipelinePhase *)phase __attribute__((swift_name("interceptorsForPhase(phase:)")));
- (void)mergeFrom:(CnmeshKtor_utilsPipeline<TSubject, TContext> *)from __attribute__((swift_name("merge(from:)")));
- (void)mergePhasesFrom:(CnmeshKtor_utilsPipeline<TSubject, TContext> *)from __attribute__((swift_name("mergePhases(from:)")));
- (void)resetFromFrom:(CnmeshKtor_utilsPipeline<TSubject, TContext> *)from __attribute__((swift_name("resetFrom(from:)")));
@property (readonly) id<CnmeshKtor_utilsAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) NSArray<CnmeshKtor_utilsPipelinePhase *> *items __attribute__((swift_name("items")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestPipeline")))
@interface CnmeshHttpRequestPipeline : CnmeshKtor_utilsPipeline<id, CnmeshHttpRequestBuilder *>
- (instancetype)initWithDevelopmentMode:(BOOL)developmentMode __attribute__((swift_name("init(developmentMode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhase:(CnmeshKtor_utilsPipelinePhase *)phase interceptors:(NSArray<id<CnmeshKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithPhases:(CnmeshKotlinArray<CnmeshKtor_utilsPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) CnmeshHttpRequestPipelinePhases *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestPipeline.Phases")))
@interface CnmeshHttpRequestPipelinePhases : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)phases __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshHttpRequestPipelinePhases *shared __attribute__((swift_name("shared")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *Before __attribute__((swift_name("Before")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *Render __attribute__((swift_name("Render")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *Send __attribute__((swift_name("Send")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *State __attribute__((swift_name("State")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *Transform __attribute__((swift_name("Transform")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpResponseData")))
@interface CnmeshHttpResponseData : CnmeshBase
- (instancetype)initWithStatusCode:(CnmeshKtor_httpHttpStatusCode *)statusCode requestTime:(CnmeshKtor_utilsGMTDate *)requestTime headers:(id<CnmeshKtor_httpHeaders>)headers version:(CnmeshKtor_httpHttpProtocolVersion *)version body:(id)body callContext:(id<CnmeshKotlinCoroutineContext>)callContext __attribute__((swift_name("init(statusCode:requestTime:headers:version:body:callContext:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id body __attribute__((swift_name("body")));
@property (readonly) id<CnmeshKotlinCoroutineContext> callContext __attribute__((swift_name("callContext")));
@property (readonly) id<CnmeshKtor_httpHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) CnmeshKtor_utilsGMTDate *requestTime __attribute__((swift_name("requestTime")));
@property (readonly) CnmeshKtor_utilsGMTDate *responseTime __attribute__((swift_name("responseTime")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *statusCode __attribute__((swift_name("statusCode")));
@property (readonly) CnmeshKtor_httpHttpProtocolVersion *version __attribute__((swift_name("version")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpSendPipeline")))
@interface CnmeshHttpSendPipeline : CnmeshKtor_utilsPipeline<id, CnmeshHttpRequestBuilder *>
- (instancetype)initWithDevelopmentMode:(BOOL)developmentMode __attribute__((swift_name("init(developmentMode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhase:(CnmeshKtor_utilsPipelinePhase *)phase interceptors:(NSArray<id<CnmeshKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithPhases:(CnmeshKotlinArray<CnmeshKtor_utilsPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) CnmeshHttpSendPipelinePhases *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpSendPipeline.Phases")))
@interface CnmeshHttpSendPipelinePhases : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)phases __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshHttpSendPipelinePhases *shared __attribute__((swift_name("shared")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *Before __attribute__((swift_name("Before")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *Engine __attribute__((swift_name("Engine")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *Monitoring __attribute__((swift_name("Monitoring")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *Receive __attribute__((swift_name("Receive")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *State __attribute__((swift_name("State")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelProvider")))
@interface CnmeshChannelProvider : CnmeshBase
- (instancetype)initWithSize:(CnmeshLong * _Nullable)size block:(id<CnmeshKtor_ioByteReadChannel> (^)(void))block __attribute__((swift_name("init(size:block:)"))) __attribute__((objc_designated_initializer));
@property (readonly) id<CnmeshKtor_ioByteReadChannel> (^block)(void) __attribute__((swift_name("block")));
@property (readonly) CnmeshLong * _Nullable size __attribute__((swift_name("size")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FormBuilder")))
@interface CnmeshFormBuilder : CnmeshBase
- (void)appendPart:(CnmeshFormPart<id> *)part __attribute__((swift_name("append(part:)")));
- (void)appendKey:(NSString *)key value:(id)value headers:(id<CnmeshKtor_httpHeaders>)headers __attribute__((swift_name("append(key:value:headers:)")));
- (void)appendKey:(NSString *)key value:(CnmeshChannelProvider *)value headers_:(id<CnmeshKtor_httpHeaders>)headers __attribute__((swift_name("append(key:value:headers_:)")));
- (void)appendKey:(NSString *)key value:(CnmeshInputProvider *)value headers__:(id<CnmeshKtor_httpHeaders>)headers __attribute__((swift_name("append(key:value:headers__:)")));
- (void)appendKey:(NSString *)key value:(CnmeshKtor_ioByteReadPacket *)value headers___:(id<CnmeshKtor_httpHeaders>)headers __attribute__((swift_name("append(key:value:headers___:)")));
- (void)appendKey:(NSString *)key value:(CnmeshKotlinByteArray *)value headers____:(id<CnmeshKtor_httpHeaders>)headers __attribute__((swift_name("append(key:value:headers____:)")));
- (void)appendKey:(NSString *)key value:(id)value headers_____:(id<CnmeshKtor_httpHeaders>)headers __attribute__((swift_name("append(key:value:headers_____:)")));
- (void)appendKey:(NSString *)key value:(NSString *)value headers______:(id<CnmeshKtor_httpHeaders>)headers __attribute__((swift_name("append(key:value:headers______:)")));
- (void)appendInputKey:(NSString *)key headers:(id<CnmeshKtor_httpHeaders>)headers size:(CnmeshLong * _Nullable)size block:(CnmeshKtor_ioInput *(^)(void))block __attribute__((swift_name("appendInput(key:headers:size:block:)")));
@end;

__attribute__((swift_name("Ktor_httpOutgoingContent.ByteArrayContent")))
@interface CnmeshKtor_httpOutgoingContentByteArrayContent : CnmeshKtor_httpOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (CnmeshKotlinByteArray *)bytes __attribute__((swift_name("bytes()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FormDataContent")))
@interface CnmeshFormDataContent : CnmeshKtor_httpOutgoingContentByteArrayContent
- (instancetype)initWithFormData:(id<CnmeshKtor_httpParameters>)formData __attribute__((swift_name("init(formData:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (CnmeshKotlinByteArray *)bytes __attribute__((swift_name("bytes()")));
@property (readonly) CnmeshLong *contentLength __attribute__((swift_name("contentLength")));
@property (readonly) CnmeshKtor_httpContentType *contentType __attribute__((swift_name("contentType")));
@property (readonly) id<CnmeshKtor_httpParameters> formData __attribute__((swift_name("formData")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FormPart")))
@interface CnmeshFormPart<T> : CnmeshBase
- (instancetype)initWithKey:(NSString *)key value:(T)value headers:(id<CnmeshKtor_httpHeaders>)headers __attribute__((swift_name("init(key:value:headers:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (T)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (id<CnmeshKtor_httpHeaders>)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshFormPart<T> *)doCopyKey:(NSString *)key value:(T)value headers:(id<CnmeshKtor_httpHeaders>)headers __attribute__((swift_name("doCopy(key:value:headers:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<CnmeshKtor_httpHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) NSString *key __attribute__((swift_name("key")));
@property (readonly) T value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InputProvider")))
@interface CnmeshInputProvider : CnmeshBase
- (instancetype)initWithSize:(CnmeshLong * _Nullable)size block:(CnmeshKtor_ioInput *(^)(void))block __attribute__((swift_name("init(size:block:)"))) __attribute__((objc_designated_initializer));
@property (readonly) CnmeshKtor_ioInput *(^block)(void) __attribute__((swift_name("block")));
@property (readonly) CnmeshLong * _Nullable size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("Ktor_httpOutgoingContent.WriteChannelContent")))
@interface CnmeshKtor_httpOutgoingContentWriteChannelContent : CnmeshKtor_httpOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeToChannel:(id<CnmeshKtor_ioByteWriteChannel>)channel completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeTo(channel:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MultiPartFormDataContent")))
@interface CnmeshMultiPartFormDataContent : CnmeshKtor_httpOutgoingContentWriteChannelContent
- (instancetype)initWithParts:(NSArray<CnmeshKtor_httpPartData *> *)parts boundary:(NSString *)boundary contentType:(CnmeshKtor_httpContentType *)contentType __attribute__((swift_name("init(parts:boundary:contentType:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeToChannel:(id<CnmeshKtor_ioByteWriteChannel>)channel completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeTo(channel:completionHandler:)")));
@property (readonly) NSString *boundary __attribute__((swift_name("boundary")));
@property (readonly) CnmeshLong * _Nullable contentLength __attribute__((swift_name("contentLength")));
@property (readonly) CnmeshKtor_httpContentType *contentType __attribute__((swift_name("contentType")));
@end;

__attribute__((swift_name("HttpResponse")))
@interface CnmeshHttpResponse : CnmeshBase <CnmeshKtor_httpHttpMessage, CnmeshCoroutineScope>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) id<CnmeshKtor_ioByteReadChannel> content __attribute__((swift_name("content")));
@property (readonly) CnmeshKtor_utilsGMTDate *requestTime __attribute__((swift_name("requestTime")));
@property (readonly) CnmeshKtor_utilsGMTDate *responseTime __attribute__((swift_name("responseTime")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *status __attribute__((swift_name("status")));
@property (readonly) CnmeshKtor_httpHttpProtocolVersion *version __attribute__((swift_name("version")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultHttpResponse")))
@interface CnmeshDefaultHttpResponse : CnmeshHttpResponse
- (instancetype)initWithCall:(CnmeshHttpClientCall *)call responseData:(CnmeshHttpResponseData *)responseData __attribute__((swift_name("init(call:responseData:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (readonly) CnmeshHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) id<CnmeshKtor_ioByteReadChannel> content __attribute__((swift_name("content")));
@property (readonly) id<CnmeshKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) id<CnmeshKtor_httpHeaders> headers_ __attribute__((swift_name("headers_")));
@property (readonly) CnmeshKtor_utilsGMTDate *requestTime __attribute__((swift_name("requestTime")));
@property (readonly) CnmeshKtor_utilsGMTDate *responseTime __attribute__((swift_name("responseTime")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *status __attribute__((swift_name("status")));
@property (readonly) CnmeshKtor_httpHttpProtocolVersion *version __attribute__((swift_name("version")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpReceivePipeline")))
@interface CnmeshHttpReceivePipeline : CnmeshKtor_utilsPipeline<CnmeshHttpResponse *, CnmeshKotlinUnit *>
- (instancetype)initWithDevelopmentMode:(BOOL)developmentMode __attribute__((swift_name("init(developmentMode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhase:(CnmeshKtor_utilsPipelinePhase *)phase interceptors:(NSArray<id<CnmeshKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithPhases:(CnmeshKotlinArray<CnmeshKtor_utilsPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) CnmeshHttpReceivePipelinePhases *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpReceivePipeline.Phases")))
@interface CnmeshHttpReceivePipelinePhases : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)phases __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshHttpReceivePipelinePhases *shared __attribute__((swift_name("shared")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *After __attribute__((swift_name("After")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *Before __attribute__((swift_name("Before")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *State __attribute__((swift_name("State")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpResponseContainer")))
@interface CnmeshHttpResponseContainer : CnmeshBase
- (instancetype)initWithExpectedType:(CnmeshKtor_utilsTypeInfo *)expectedType response:(id)response __attribute__((swift_name("init(expectedType:response:)"))) __attribute__((objc_designated_initializer));
- (CnmeshKtor_utilsTypeInfo *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (id)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshHttpResponseContainer *)doCopyExpectedType:(CnmeshKtor_utilsTypeInfo *)expectedType response:(id)response __attribute__((swift_name("doCopy(expectedType:response:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshKtor_utilsTypeInfo *expectedType __attribute__((swift_name("expectedType")));
@property (readonly) id response __attribute__((swift_name("response")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpResponsePipeline")))
@interface CnmeshHttpResponsePipeline : CnmeshKtor_utilsPipeline<CnmeshHttpResponseContainer *, CnmeshHttpClientCall *>
- (instancetype)initWithDevelopmentMode:(BOOL)developmentMode __attribute__((swift_name("init(developmentMode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhase:(CnmeshKtor_utilsPipelinePhase *)phase interceptors:(NSArray<id<CnmeshKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithPhases:(CnmeshKotlinArray<CnmeshKtor_utilsPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) CnmeshHttpResponsePipelinePhases *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpResponsePipeline.Phases")))
@interface CnmeshHttpResponsePipelinePhases : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)phases __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshHttpResponsePipelinePhases *shared __attribute__((swift_name("shared")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *After __attribute__((swift_name("After")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *Parse __attribute__((swift_name("Parse")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *Receive __attribute__((swift_name("Receive")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *State __attribute__((swift_name("State")));
@property (readonly) CnmeshKtor_utilsPipelinePhase *Transform __attribute__((swift_name("Transform")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpStatement")))
@interface CnmeshHttpStatement : CnmeshBase
- (instancetype)initWithBuilder:(CnmeshHttpRequestBuilder *)builder client:(CnmeshHttpClient *)client __attribute__((swift_name("init(builder:client:)"))) __attribute__((objc_designated_initializer));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("body(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyBlock:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("body(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeWithCompletionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeBlock:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(block:completionHandler:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClientEngineClosedException")))
@interface CnmeshClientEngineClosedException : CnmeshKotlinIllegalStateException
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) CnmeshKotlinThrowable * _Nullable cause __attribute__((swift_name("cause")));
@end;

__attribute__((swift_name("HttpClientEngine")))
@protocol CnmeshHttpClientEngine <CnmeshCoroutineScope, CnmeshKtor_ioCloseable>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeData:(CnmeshHttpRequestData *)data completionHandler:(void (^)(CnmeshHttpResponseData * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(data:completionHandler:)")));
- (void)installClient:(CnmeshHttpClient *)client __attribute__((swift_name("install(client:)")));
@property (readonly) CnmeshHttpClientEngineConfig *config __attribute__((swift_name("config")));
@property (readonly) CnmeshCoroutineDispatcher *dispatcher __attribute__((swift_name("dispatcher")));
@property (readonly) NSSet<id<CnmeshHttpClientEngineCapability>> *supportedCapabilities __attribute__((swift_name("supportedCapabilities")));
@end;

__attribute__((swift_name("HttpClientEngineBase")))
@interface CnmeshHttpClientEngineBase : CnmeshBase <CnmeshHttpClientEngine>
- (instancetype)initWithEngineName:(NSString *)engineName __attribute__((swift_name("init(engineName:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));
@property (readonly) id<CnmeshKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@end;

__attribute__((swift_name("HttpClientEngineCapability")))
@protocol CnmeshHttpClientEngineCapability
@required
@end;

__attribute__((swift_name("HttpClientEngineConfig")))
@interface CnmeshHttpClientEngineConfig : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property BOOL pipelining __attribute__((swift_name("pipelining")));
@property CnmeshProxyConfig * _Nullable proxy __attribute__((swift_name("proxy")));
@property int32_t threadsCount __attribute__((swift_name("threadsCount")));
@end;

__attribute__((swift_name("HttpClientEngineFactory")))
@protocol CnmeshHttpClientEngineFactory
@required
- (id<CnmeshHttpClientEngine>)createBlock:(void (^)(CnmeshHttpClientEngineConfig *))block __attribute__((swift_name("create(block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProxyBuilder")))
@interface CnmeshProxyBuilder : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)proxyBuilder __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshProxyBuilder *shared __attribute__((swift_name("shared")));
- (CnmeshProxyConfig *)httpUrl:(CnmeshKtor_httpUrl *)url __attribute__((swift_name("http(url:)")));
- (CnmeshProxyConfig *)socksHost:(NSString *)host port:(int32_t)port __attribute__((swift_name("socks(host:port:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProxyConfig")))
@interface CnmeshProxyConfig : CnmeshBase
- (instancetype)initWithUrl:(CnmeshKtor_httpUrl *)url __attribute__((swift_name("init(url:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshKtor_httpUrl *url __attribute__((swift_name("url")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProxyType")))
@interface CnmeshProxyType : CnmeshKotlinEnum<CnmeshProxyType *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) CnmeshProxyType *socks __attribute__((swift_name("socks")));
@property (class, readonly) CnmeshProxyType *http __attribute__((swift_name("http")));
@property (class, readonly) CnmeshProxyType *unknown __attribute__((swift_name("unknown")));
+ (CnmeshKotlinArray<CnmeshProxyType *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("KotlinIterable")))
@protocol CnmeshKotlinIterable
@required
- (id<CnmeshKotlinIterator>)iterator __attribute__((swift_name("iterator()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("engines")))
@interface Cnmeshengines : CnmeshBase <CnmeshKotlinIterable>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)engines __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) Cnmeshengines *shared __attribute__((swift_name("shared")));
- (void)appendItem:(id<CnmeshHttpClientEngineFactory>)item __attribute__((swift_name("append(item:)")));
- (id<CnmeshKotlinIterator>)iterator __attribute__((swift_name("iterator()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BodyProgress")))
@interface CnmeshBodyProgress : CnmeshBase
@property (class, readonly, getter=companion) CnmeshBodyProgressPlugin *companion __attribute__((swift_name("companion")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BodyProgress.Plugin")))
@interface CnmeshBodyProgressPlugin : CnmeshBase <CnmeshHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshBodyProgressPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshBodyProgress *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshBodyProgress *)prepareBlock:(void (^)(CnmeshKotlinUnit *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshBodyProgress *> *key __attribute__((swift_name("key")));
@end;

__attribute__((swift_name("ResponseException")))
@interface CnmeshResponseException : CnmeshKotlinIllegalStateException
- (instancetype)initWithResponse:(CnmeshHttpResponse *)response __attribute__((swift_name("init(response:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable("Please, provide response text in constructor")));
- (instancetype)initWithResponse:(CnmeshHttpResponse *)response cachedResponseText:(NSString *)cachedResponseText __attribute__((swift_name("init(response:cachedResponseText:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) CnmeshHttpResponse *response __attribute__((swift_name("response")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClientRequestException")))
@interface CnmeshClientRequestException : CnmeshResponseException
- (instancetype)initWithResponse:(CnmeshHttpResponse *)response __attribute__((swift_name("init(response:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable("Please, provide response text in constructor")));
- (instancetype)initWithResponse:(CnmeshHttpResponse *)response cachedResponseText:(NSString *)cachedResponseText __attribute__((swift_name("init(response:cachedResponseText:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString *message __attribute__((swift_name("message")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DataConversion")))
@interface CnmeshDataConversion : CnmeshBase <CnmeshHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dataConversion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDataConversion *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshKtor_utilsDataConversion *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshKtor_utilsDataConversion *)prepareBlock:(void (^)(CnmeshKtor_utilsDataConversionConfiguration *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshKtor_utilsDataConversion *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultRequest")))
@interface CnmeshDefaultRequest : CnmeshBase
@property (class, readonly, getter=companion) CnmeshDefaultRequestPlugin *companion __attribute__((swift_name("companion")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultRequest.DefaultRequestBuilder")))
@interface CnmeshDefaultRequestDefaultRequestBuilder : CnmeshBase <CnmeshKtor_httpHttpMessageBuilder>
- (void)setAttributesBlock:(void (^)(id<CnmeshKtor_utilsAttributes>))block __attribute__((swift_name("setAttributes(block:)")));
- (void)urlBlock:(void (^)(CnmeshKtor_httpURLBuilder *))block __attribute__((swift_name("url(block:)")));
- (void)urlUrlString:(NSString *)urlString __attribute__((swift_name("url(urlString:)")));
- (void)urlScheme:(NSString * _Nullable)scheme host:(NSString * _Nullable)host port:(CnmeshInt * _Nullable)port path:(NSString * _Nullable)path block:(void (^)(CnmeshKtor_httpURLBuilder *))block __attribute__((swift_name("url(scheme:host:port:path:block:)")));
@property (readonly) id<CnmeshKtor_utilsAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) CnmeshKtor_httpHeadersBuilder *headers_ __attribute__((swift_name("headers_")));
@property NSString *host __attribute__((swift_name("host")));
@property int32_t port __attribute__((swift_name("port")));
@property (readonly) CnmeshKtor_httpURLBuilder *url __attribute__((swift_name("url")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultRequest.Plugin")))
@interface CnmeshDefaultRequestPlugin : CnmeshBase <CnmeshHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDefaultRequestPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshDefaultRequest *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshDefaultRequest *)prepareBlock:(void (^)(CnmeshDefaultRequestDefaultRequestBuilder *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshDefaultRequest *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCallValidator")))
@interface CnmeshHttpCallValidator : CnmeshBase
@property (class, readonly, getter=companion) CnmeshHttpCallValidatorCompanion *companion __attribute__((swift_name("companion")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCallValidator.Companion")))
@interface CnmeshHttpCallValidatorCompanion : CnmeshBase <CnmeshHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshHttpCallValidatorCompanion *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshHttpCallValidator *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshHttpCallValidator *)prepareBlock:(void (^)(CnmeshHttpCallValidatorConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshHttpCallValidator *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCallValidator.Config")))
@interface CnmeshHttpCallValidatorConfig : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)handleResponseExceptionBlock:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("handleResponseException(block:)"))) __attribute__((deprecated("Consider using `handleResponseExceptionWithRequest` instead")));
- (void)handleResponseExceptionWithRequestBlock:(id<CnmeshKotlinSuspendFunction2>)block __attribute__((swift_name("handleResponseExceptionWithRequest(block:)")));
- (void)validateResponseBlock:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("validateResponse(block:)")));
@property BOOL expectSuccess __attribute__((swift_name("expectSuccess"))) __attribute__((deprecated("This property is ignored. Please use `expectSuccess` property in HttpClientConfig. This is going to become internal.")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpPlainText")))
@interface CnmeshHttpPlainText : CnmeshBase
@property (class, readonly, getter=companion) CnmeshHttpPlainTextPlugin *companion __attribute__((swift_name("companion")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpPlainText.Config")))
@interface CnmeshHttpPlainTextConfig : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)registerCharset:(CnmeshKtor_ioCharset *)charset quality:(CnmeshFloat * _Nullable)quality __attribute__((swift_name("register(charset:quality:)")));
@property CnmeshKtor_ioCharset *responseCharsetFallback __attribute__((swift_name("responseCharsetFallback")));
@property CnmeshKtor_ioCharset * _Nullable sendCharset __attribute__((swift_name("sendCharset")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpPlainText.Plugin")))
@interface CnmeshHttpPlainTextPlugin : CnmeshBase <CnmeshHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshHttpPlainTextPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshHttpPlainText *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshHttpPlainText *)prepareBlock:(void (^)(CnmeshHttpPlainTextConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshHttpPlainText *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRedirect")))
@interface CnmeshHttpRedirect : CnmeshBase
@property (class, readonly, getter=companion) CnmeshHttpRedirectPlugin *companion __attribute__((swift_name("companion")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRedirect.Config")))
@interface CnmeshHttpRedirectConfig : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property BOOL allowHttpsDowngrade __attribute__((swift_name("allowHttpsDowngrade")));
@property BOOL checkHttpMethod __attribute__((swift_name("checkHttpMethod")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRedirect.Plugin")))
@interface CnmeshHttpRedirectPlugin : CnmeshBase <CnmeshHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshHttpRedirectPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshHttpRedirect *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshHttpRedirect *)prepareBlock:(void (^)(CnmeshHttpRedirectConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_eventsEventDefinition<CnmeshHttpResponse *> *HttpResponseRedirect __attribute__((swift_name("HttpResponseRedirect")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshHttpRedirect *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestRetry")))
@interface CnmeshHttpRequestRetry : CnmeshBase
@property (class, readonly, getter=companion) CnmeshHttpRequestRetryPlugin *companion __attribute__((swift_name("companion")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestRetry.Configuration")))
@interface CnmeshHttpRequestRetryConfiguration : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)constantDelayMillis:(int64_t)millis randomizationMs:(int64_t)randomizationMs respectRetryAfterHeader:(BOOL)respectRetryAfterHeader __attribute__((swift_name("constantDelay(millis:randomizationMs:respectRetryAfterHeader:)")));
- (void)delayBlock:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("delay(block:)")));
- (void)delayMillisRespectRetryAfterHeader:(BOOL)respectRetryAfterHeader block:(CnmeshLong *(^)(CnmeshHttpRequestRetryDelayContext *, CnmeshInt *))block __attribute__((swift_name("delayMillis(respectRetryAfterHeader:block:)")));
- (void)exponentialDelayBase:(double)base maxDelayMs:(int64_t)maxDelayMs randomizationMs:(int64_t)randomizationMs respectRetryAfterHeader:(BOOL)respectRetryAfterHeader __attribute__((swift_name("exponentialDelay(base:maxDelayMs:randomizationMs:respectRetryAfterHeader:)")));
- (void)modifyRequestBlock:(void (^)(CnmeshHttpRequestRetryModifyRequestContext *, CnmeshHttpRequestBuilder *))block __attribute__((swift_name("modifyRequest(block:)")));
- (void)noRetry __attribute__((swift_name("noRetry()")));
- (void)retryIfMaxRetries:(int32_t)maxRetries block:(CnmeshBoolean *(^)(CnmeshHttpRequestRetryShouldRetryContext *, id<CnmeshHttpRequest>, CnmeshHttpResponse *))block __attribute__((swift_name("retryIf(maxRetries:block:)")));
- (void)retryOnExceptionMaxRetries:(int32_t)maxRetries __attribute__((swift_name("retryOnException(maxRetries:)")));
- (void)retryOnExceptionIfMaxRetries:(int32_t)maxRetries block:(CnmeshBoolean *(^)(CnmeshHttpRequestRetryShouldRetryContext *, CnmeshHttpRequestBuilder *, CnmeshKotlinThrowable *))block __attribute__((swift_name("retryOnExceptionIf(maxRetries:block:)")));
- (void)retryOnExceptionOrServerErrorsMaxRetries:(int32_t)maxRetries __attribute__((swift_name("retryOnExceptionOrServerErrors(maxRetries:)")));
- (void)retryOnServerErrorsMaxRetries:(int32_t)maxRetries __attribute__((swift_name("retryOnServerErrors(maxRetries:)")));
@property int32_t maxRetries __attribute__((swift_name("maxRetries")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestRetry.DelayContext")))
@interface CnmeshHttpRequestRetryDelayContext : CnmeshBase
@property (readonly) CnmeshKotlinThrowable * _Nullable cause __attribute__((swift_name("cause")));
@property (readonly) CnmeshHttpRequestBuilder *request __attribute__((swift_name("request")));
@property (readonly) CnmeshHttpResponse * _Nullable response __attribute__((swift_name("response")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestRetry.ModifyRequestContext")))
@interface CnmeshHttpRequestRetryModifyRequestContext : CnmeshBase
@property (readonly) CnmeshKotlinThrowable * _Nullable cause __attribute__((swift_name("cause")));
@property (readonly) CnmeshHttpRequestBuilder *request __attribute__((swift_name("request")));
@property (readonly) CnmeshHttpResponse * _Nullable response __attribute__((swift_name("response")));
@property (readonly) int32_t retryCount __attribute__((swift_name("retryCount")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestRetry.Plugin")))
@interface CnmeshHttpRequestRetryPlugin : CnmeshBase <CnmeshHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshHttpRequestRetryPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshHttpRequestRetry *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshHttpRequestRetry *)prepareBlock:(void (^)(CnmeshHttpRequestRetryConfiguration *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_eventsEventDefinition<CnmeshHttpRequestRetryRetryEventData *> *HttpRequestRetryEvent __attribute__((swift_name("HttpRequestRetryEvent")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshHttpRequestRetry *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestRetry.RetryEventData")))
@interface CnmeshHttpRequestRetryRetryEventData : CnmeshBase
@property (readonly) CnmeshKotlinThrowable * _Nullable cause __attribute__((swift_name("cause")));
@property (readonly) CnmeshHttpRequestBuilder *request __attribute__((swift_name("request")));
@property (readonly) CnmeshHttpResponse * _Nullable response __attribute__((swift_name("response")));
@property (readonly) int32_t retryCount __attribute__((swift_name("retryCount")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestRetry.ShouldRetryContext")))
@interface CnmeshHttpRequestRetryShouldRetryContext : CnmeshBase
- (instancetype)initWithRetryCount:(int32_t)retryCount __attribute__((swift_name("init(retryCount:)"))) __attribute__((objc_designated_initializer));
@property (readonly) int32_t retryCount __attribute__((swift_name("retryCount")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestTimeoutException")))
@interface CnmeshHttpRequestTimeoutException : CnmeshKtor_ioIOException
- (instancetype)initWithRequest:(CnmeshHttpRequestBuilder *)request __attribute__((swift_name("init(request:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithRequest_:(CnmeshHttpRequestData *)request __attribute__((swift_name("init(request_:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithUrl:(NSString *)url timeoutMillis:(CnmeshLong * _Nullable)timeoutMillis __attribute__((swift_name("init(url:timeoutMillis:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString *)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpSend")))
@interface CnmeshHttpSend : CnmeshBase
@property (class, readonly, getter=companion) CnmeshHttpSendPlugin *companion __attribute__((swift_name("companion")));
- (void)interceptBlock:(id<CnmeshKotlinSuspendFunction2>)block __attribute__((swift_name("intercept(block:)")));
- (void)interceptBlock_:(id<CnmeshKotlinSuspendFunction3>)block __attribute__((swift_name("intercept(block_:)"))) __attribute__((unavailable("This interceptors do not allow to intercept first network call. Please use another overload and replace HttpClientCall parameter using `val call = execute(request)`")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpSend.Config")))
@interface CnmeshHttpSendConfig : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property int32_t maxSendCount __attribute__((swift_name("maxSendCount")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpSend.Plugin")))
@interface CnmeshHttpSendPlugin : CnmeshBase <CnmeshHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshHttpSendPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshHttpSend *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshHttpSend *)prepareBlock:(void (^)(CnmeshHttpSendConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshHttpSend *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpTimeout")))
@interface CnmeshHttpTimeout : CnmeshBase
@property (class, readonly, getter=companion) CnmeshHttpTimeoutPlugin *companion __attribute__((swift_name("companion")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpTimeout.HttpTimeoutCapabilityConfiguration")))
@interface CnmeshHttpTimeoutHttpTimeoutCapabilityConfiguration : CnmeshBase
- (instancetype)initWithRequestTimeoutMillis:(CnmeshLong * _Nullable)requestTimeoutMillis connectTimeoutMillis:(CnmeshLong * _Nullable)connectTimeoutMillis socketTimeoutMillis:(CnmeshLong * _Nullable)socketTimeoutMillis __attribute__((swift_name("init(requestTimeoutMillis:connectTimeoutMillis:socketTimeoutMillis:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshHttpTimeoutHttpTimeoutCapabilityConfigurationCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
@property CnmeshLong * _Nullable connectTimeoutMillis __attribute__((swift_name("connectTimeoutMillis")));
@property CnmeshLong * _Nullable requestTimeoutMillis __attribute__((swift_name("requestTimeoutMillis")));
@property CnmeshLong * _Nullable socketTimeoutMillis __attribute__((swift_name("socketTimeoutMillis")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpTimeout.HttpTimeoutCapabilityConfigurationCompanion")))
@interface CnmeshHttpTimeoutHttpTimeoutCapabilityConfigurationCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshHttpTimeoutHttpTimeoutCapabilityConfigurationCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshHttpTimeoutHttpTimeoutCapabilityConfiguration *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpTimeout.Plugin")))
@interface CnmeshHttpTimeoutPlugin : CnmeshBase <CnmeshHttpClientPlugin, CnmeshHttpClientEngineCapability>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshHttpTimeoutPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshHttpTimeout *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshHttpTimeout *)prepareBlock:(void (^)(CnmeshHttpTimeoutHttpTimeoutCapabilityConfiguration *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) int64_t INFINITE_TIMEOUT_MS __attribute__((swift_name("INFINITE_TIMEOUT_MS")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshHttpTimeout *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RedirectResponseException")))
@interface CnmeshRedirectResponseException : CnmeshResponseException
- (instancetype)initWithResponse:(CnmeshHttpResponse *)response __attribute__((swift_name("init(response:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable("Please, provide response text in constructor")));
- (instancetype)initWithResponse:(CnmeshHttpResponse *)response cachedResponseText:(NSString *)cachedResponseText __attribute__((swift_name("init(response:cachedResponseText:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString *message __attribute__((swift_name("message")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SendCountExceedException")))
@interface CnmeshSendCountExceedException : CnmeshKotlinIllegalStateException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("Sender")))
@protocol CnmeshSender
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeRequestBuilder:(CnmeshHttpRequestBuilder *)requestBuilder completionHandler:(void (^)(CnmeshHttpClientCall * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(requestBuilder:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ServerResponseException")))
@interface CnmeshServerResponseException : CnmeshResponseException
- (instancetype)initWithResponse:(CnmeshHttpResponse *)response __attribute__((swift_name("init(response:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable("Please, provide response text in constructor")));
- (instancetype)initWithResponse:(CnmeshHttpResponse *)response cachedResponseText:(NSString *)cachedResponseText __attribute__((swift_name("init(response:cachedResponseText:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString *message __attribute__((swift_name("message")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UserAgent")))
@interface CnmeshUserAgent : CnmeshBase
@property (class, readonly, getter=companion) CnmeshUserAgentPlugin *companion __attribute__((swift_name("companion")));
@property (readonly) NSString *agent __attribute__((swift_name("agent")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UserAgent.Config")))
@interface CnmeshUserAgentConfig : CnmeshBase
- (instancetype)initWithAgent:(NSString *)agent __attribute__((swift_name("init(agent:)"))) __attribute__((objc_designated_initializer));
@property NSString *agent __attribute__((swift_name("agent")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UserAgent.Plugin")))
@interface CnmeshUserAgentPlugin : CnmeshBase <CnmeshHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshUserAgentPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshUserAgent *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshUserAgent *)prepareBlock:(void (^)(CnmeshUserAgentConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshUserAgent *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCache")))
@interface CnmeshHttpCache : CnmeshBase
@property (class, readonly, getter=companion) CnmeshHttpCacheCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) CnmeshHttpCacheStorage *privateStorage __attribute__((swift_name("privateStorage")));
@property (readonly) CnmeshHttpCacheStorage *publicStorage __attribute__((swift_name("publicStorage")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCache.Companion")))
@interface CnmeshHttpCacheCompanion : CnmeshBase <CnmeshHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshHttpCacheCompanion *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshHttpCache *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshHttpCache *)prepareBlock:(void (^)(CnmeshHttpCacheConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_eventsEventDefinition<CnmeshHttpResponse *> *HttpResponseFromCache __attribute__((swift_name("HttpResponseFromCache")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshHttpCache *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCache.Config")))
@interface CnmeshHttpCacheConfig : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property CnmeshHttpCacheStorage *privateStorage __attribute__((swift_name("privateStorage")));
@property CnmeshHttpCacheStorage *publicStorage __attribute__((swift_name("publicStorage")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCacheEntry")))
@interface CnmeshHttpCacheEntry : CnmeshBase
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
@property (readonly) CnmeshKotlinByteArray *body __attribute__((swift_name("body")));
@property (readonly) CnmeshKtor_utilsGMTDate *expires __attribute__((swift_name("expires")));
@property (readonly) CnmeshHttpResponse *response __attribute__((swift_name("response")));
@property (readonly) NSDictionary<NSString *, NSString *> *varyKeys __attribute__((swift_name("varyKeys")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InvalidCacheStateException")))
@interface CnmeshInvalidCacheStateException : CnmeshKotlinIllegalStateException
- (instancetype)initWithRequestUrl:(CnmeshKtor_httpUrl *)requestUrl __attribute__((swift_name("init(requestUrl:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("HttpCacheStorage")))
@interface CnmeshHttpCacheStorage : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (class, readonly, getter=companion) CnmeshHttpCacheStorageCompanion *companion __attribute__((swift_name("companion")));
- (CnmeshHttpCacheEntry * _Nullable)findUrl:(CnmeshKtor_httpUrl *)url varyKeys:(NSDictionary<NSString *, NSString *> *)varyKeys __attribute__((swift_name("find(url:varyKeys:)")));
- (NSSet<CnmeshHttpCacheEntry *> *)findByUrlUrl:(CnmeshKtor_httpUrl *)url __attribute__((swift_name("findByUrl(url:)")));
- (void)storeUrl:(CnmeshKtor_httpUrl *)url value:(CnmeshHttpCacheEntry *)value __attribute__((swift_name("store(url:value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCacheStorage.Companion")))
@interface CnmeshHttpCacheStorageCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshHttpCacheStorageCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) CnmeshHttpCacheStorage *Disabled __attribute__((swift_name("Disabled")));
@property (readonly) CnmeshHttpCacheStorage *(^Unlimited)(void) __attribute__((swift_name("Unlimited")));
@end;

__attribute__((swift_name("Ktor_websocketsWebSocketSession")))
@protocol CnmeshKtor_websocketsWebSocketSession <CnmeshCoroutineScope>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)flushWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("flush(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendFrame:(CnmeshKtor_websocketsFrame *)frame completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("send(frame:completionHandler:)")));
- (void)terminate __attribute__((swift_name("terminate()"))) __attribute__((deprecated("Use cancel() instead.")));
@property (readonly) NSArray<id<CnmeshKtor_websocketsWebSocketExtension>> *extensions __attribute__((swift_name("extensions")));
@property (readonly) id<CnmeshReceiveChannel> incoming __attribute__((swift_name("incoming")));
@property BOOL masking __attribute__((swift_name("masking")));
@property int64_t maxFrameSize __attribute__((swift_name("maxFrameSize")));
@property (readonly) id<CnmeshSendChannel> outgoing __attribute__((swift_name("outgoing")));
@end;

__attribute__((swift_name("ClientWebSocketSession")))
@protocol CnmeshClientWebSocketSession <CnmeshKtor_websocketsWebSocketSession>
@required
@property (readonly) CnmeshHttpClientCall *call __attribute__((swift_name("call")));
@end;

__attribute__((swift_name("Ktor_websocketsDefaultWebSocketSession")))
@protocol CnmeshKtor_websocketsDefaultWebSocketSession <CnmeshKtor_websocketsWebSocketSession>
@required
- (void)startNegotiatedExtensions:(NSArray<id<CnmeshKtor_websocketsWebSocketExtension>> *)negotiatedExtensions __attribute__((swift_name("start(negotiatedExtensions:)")));
@property (readonly) id<CnmeshDeferred> closeReason __attribute__((swift_name("closeReason")));
@property int64_t pingIntervalMillis __attribute__((swift_name("pingIntervalMillis")));
@property int64_t timeoutMillis __attribute__((swift_name("timeoutMillis")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultClientWebSocketSession")))
@interface CnmeshDefaultClientWebSocketSession : CnmeshBase <CnmeshClientWebSocketSession, CnmeshKtor_websocketsDefaultWebSocketSession>
- (instancetype)initWithCall:(CnmeshHttpClientCall *)call delegate:(id<CnmeshKtor_websocketsDefaultWebSocketSession>)delegate __attribute__((swift_name("init(call:delegate:)"))) __attribute__((objc_designated_initializer));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)flushWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("flush(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendFrame:(CnmeshKtor_websocketsFrame *)frame completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("send(frame:completionHandler:)")));
- (void)startNegotiatedExtensions:(NSArray<id<CnmeshKtor_websocketsWebSocketExtension>> *)negotiatedExtensions __attribute__((swift_name("start(negotiatedExtensions:)")));
- (void)terminate __attribute__((swift_name("terminate()"))) __attribute__((deprecated("Use cancel() instead.")));
@property (readonly) CnmeshHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) id<CnmeshDeferred> closeReason __attribute__((swift_name("closeReason")));
@property (readonly) id<CnmeshKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) NSArray<id<CnmeshKtor_websocketsWebSocketExtension>> *extensions __attribute__((swift_name("extensions")));
@property (readonly) id<CnmeshReceiveChannel> incoming __attribute__((swift_name("incoming")));
@property BOOL masking __attribute__((swift_name("masking")));
@property int64_t maxFrameSize __attribute__((swift_name("maxFrameSize")));
@property (readonly) id<CnmeshSendChannel> outgoing __attribute__((swift_name("outgoing")));
@property int64_t pingIntervalMillis __attribute__((swift_name("pingIntervalMillis")));
@property int64_t timeoutMillis __attribute__((swift_name("timeoutMillis")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketCapability")))
@interface CnmeshWebSocketCapability : CnmeshBase <CnmeshHttpClientEngineCapability>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)webSocketCapability __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshWebSocketCapability *shared __attribute__((swift_name("shared")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketException")))
@interface CnmeshWebSocketException : CnmeshKotlinIllegalStateException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketExtensionsCapability")))
@interface CnmeshWebSocketExtensionsCapability : CnmeshBase <CnmeshHttpClientEngineCapability>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)webSocketExtensionsCapability __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshWebSocketExtensionsCapability *shared __attribute__((swift_name("shared")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSockets")))
@interface CnmeshWebSockets : CnmeshBase
- (instancetype)initWithPingInterval:(int64_t)pingInterval maxFrameSize:(int64_t)maxFrameSize __attribute__((swift_name("init(pingInterval:maxFrameSize:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (class, readonly, getter=companion) CnmeshWebSocketsPlugin *companion __attribute__((swift_name("companion")));
@property (readonly) id<CnmeshKtor_serializationWebsocketContentConverter> _Nullable contentConverter __attribute__((swift_name("contentConverter")));
@property (readonly) int64_t maxFrameSize __attribute__((swift_name("maxFrameSize")));
@property (readonly) int64_t pingInterval __attribute__((swift_name("pingInterval")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSockets.Config")))
@interface CnmeshWebSocketsConfig : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)extensionsBlock:(void (^)(CnmeshKtor_websocketsWebSocketExtensionsConfig *))block __attribute__((swift_name("extensions(block:)")));
@property id<CnmeshKtor_serializationWebsocketContentConverter> _Nullable contentConverter __attribute__((swift_name("contentConverter")));
@property int64_t maxFrameSize __attribute__((swift_name("maxFrameSize")));
@property int64_t pingInterval __attribute__((swift_name("pingInterval")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSockets.Plugin")))
@interface CnmeshWebSocketsPlugin : CnmeshBase <CnmeshHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshWebSocketsPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshWebSockets *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshWebSockets *)prepareBlock:(void (^)(CnmeshWebSocketsConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshWebSockets *> *key __attribute__((swift_name("key")));
@end;

__attribute__((swift_name("CookiesStorage")))
@protocol CnmeshCookiesStorage <CnmeshKtor_ioCloseable>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)addCookieRequestUrl:(CnmeshKtor_httpUrl *)requestUrl cookie:(CnmeshKtor_httpCookie *)cookie completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("addCookie(requestUrl:cookie:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getRequestUrl:(CnmeshKtor_httpUrl *)requestUrl completionHandler:(void (^)(NSArray<CnmeshKtor_httpCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(requestUrl:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AcceptAllCookiesStorage")))
@interface CnmeshAcceptAllCookiesStorage : CnmeshBase <CnmeshCookiesStorage>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)addCookieRequestUrl:(CnmeshKtor_httpUrl *)requestUrl cookie:(CnmeshKtor_httpCookie *)cookie completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("addCookie(requestUrl:cookie:completionHandler:)")));
- (void)close __attribute__((swift_name("close()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getRequestUrl:(CnmeshKtor_httpUrl *)requestUrl completionHandler:(void (^)(NSArray<CnmeshKtor_httpCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(requestUrl:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConstantCookiesStorage")))
@interface CnmeshConstantCookiesStorage : CnmeshBase <CnmeshCookiesStorage>
- (instancetype)initWithCookies:(CnmeshKotlinArray<CnmeshKtor_httpCookie *> *)cookies __attribute__((swift_name("init(cookies:)"))) __attribute__((objc_designated_initializer));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)addCookieRequestUrl:(CnmeshKtor_httpUrl *)requestUrl cookie:(CnmeshKtor_httpCookie *)cookie completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("addCookie(requestUrl:cookie:completionHandler:)")));
- (void)close __attribute__((swift_name("close()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getRequestUrl:(CnmeshKtor_httpUrl *)requestUrl completionHandler:(void (^)(NSArray<CnmeshKtor_httpCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(requestUrl:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCookies")))
@interface CnmeshHttpCookies : CnmeshBase <CnmeshKtor_ioCloseable>
@property (class, readonly, getter=companion) CnmeshHttpCookiesCompanion *companion __attribute__((swift_name("companion")));
- (void)close __attribute__((swift_name("close()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getRequestUrl:(CnmeshKtor_httpUrl *)requestUrl completionHandler:(void (^)(NSArray<CnmeshKtor_httpCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(requestUrl:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCookies.Companion")))
@interface CnmeshHttpCookiesCompanion : CnmeshBase <CnmeshHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshHttpCookiesCompanion *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshHttpCookies *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshHttpCookies *)prepareBlock:(void (^)(CnmeshHttpCookiesConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshHttpCookies *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCookies.Config")))
@interface CnmeshHttpCookiesConfig : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)defaultBlock:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("default(block:)")));
@property id<CnmeshCookiesStorage> storage __attribute__((swift_name("storage")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ResponseObserver")))
@interface CnmeshResponseObserver : CnmeshBase
- (instancetype)initWithResponseHandler:(id<CnmeshKotlinSuspendFunction1>)responseHandler filter:(CnmeshBoolean *(^ _Nullable)(CnmeshHttpClientCall *))filter __attribute__((swift_name("init(responseHandler:filter:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshResponseObserverPlugin *companion __attribute__((swift_name("companion")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ResponseObserver.Config")))
@interface CnmeshResponseObserverConfig : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)filterBlock:(CnmeshBoolean *(^)(CnmeshHttpClientCall *))block __attribute__((swift_name("filter(block:)")));
- (void)onResponseBlock:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("onResponse(block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ResponseObserver.Plugin")))
@interface CnmeshResponseObserverPlugin : CnmeshBase <CnmeshHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshResponseObserverPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(CnmeshResponseObserver *)plugin scope:(CnmeshHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (CnmeshResponseObserver *)prepareBlock:(void (^)(CnmeshResponseObserverConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) CnmeshKtor_utilsAttributeKey<CnmeshResponseObserver *> *key __attribute__((swift_name("key")));
@end;

__attribute__((swift_name("KotlinCoroutineContext")))
@protocol CnmeshKotlinCoroutineContext
@required
- (id _Nullable)foldInitial:(id _Nullable)initial operation:(id _Nullable (^)(id _Nullable, id<CnmeshKotlinCoroutineContextElement>))operation __attribute__((swift_name("fold(initial:operation:)")));
- (id<CnmeshKotlinCoroutineContextElement> _Nullable)getKey:(id<CnmeshKotlinCoroutineContextKey>)key __attribute__((swift_name("get(key:)")));
- (id<CnmeshKotlinCoroutineContext>)minusKeyKey:(id<CnmeshKotlinCoroutineContextKey>)key __attribute__((swift_name("minusKey(key:)")));
- (id<CnmeshKotlinCoroutineContext>)plusContext:(id<CnmeshKotlinCoroutineContext>)context __attribute__((swift_name("plus(context:)")));
@end;

__attribute__((swift_name("KotlinCoroutineContextElement")))
@protocol CnmeshKotlinCoroutineContextElement <CnmeshKotlinCoroutineContext>
@required
@property (readonly) id<CnmeshKotlinCoroutineContextKey> key __attribute__((swift_name("key")));
@end;

__attribute__((swift_name("Job")))
@protocol CnmeshJob <CnmeshKotlinCoroutineContextElement>
@required
- (id<CnmeshChildHandle>)attachChildChild:(id<CnmeshChildJob>)child __attribute__((swift_name("attachChild(child:)")));
- (void)cancelCause:(CnmeshKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause:)")));
- (CnmeshKotlinCancellationException *)getCancellationException __attribute__((swift_name("getCancellationException()")));
- (id<CnmeshDisposableHandle>)invokeOnCompletionOnCancelling:(BOOL)onCancelling invokeImmediately:(BOOL)invokeImmediately handler:(void (^)(CnmeshKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(onCancelling:invokeImmediately:handler:)")));
- (id<CnmeshDisposableHandle>)invokeOnCompletionHandler:(void (^)(CnmeshKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(handler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)joinWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("join(completionHandler:)")));
- (id<CnmeshJob>)plusOther:(id<CnmeshJob>)other __attribute__((swift_name("plus(other:)"))) __attribute__((unavailable("Operator '+' on two Job objects is meaningless. Job is a coroutine context element and `+` is a set-sum operator for coroutine contexts. The job to the right of `+` just replaces the job the left of `+`.")));
- (BOOL)start __attribute__((swift_name("start()")));
@property (readonly) id<CnmeshKotlinSequence> children __attribute__((swift_name("children")));
@property (readonly) BOOL isActive __attribute__((swift_name("isActive")));
@property (readonly) BOOL isCancelled __attribute__((swift_name("isCancelled")));
@property (readonly) BOOL isCompleted __attribute__((swift_name("isCompleted")));
@property (readonly) id<CnmeshSelectClause0> onJoin __attribute__((swift_name("onJoin")));
@end;

__attribute__((swift_name("ChildJob")))
@protocol CnmeshChildJob <CnmeshJob>
@required
- (void)parentCancelledParentJob:(id<CnmeshParentJob>)parentJob __attribute__((swift_name("parentCancelled(parentJob:)")));
@end;

__attribute__((swift_name("ParentJob")))
@protocol CnmeshParentJob <CnmeshJob>
@required
- (CnmeshKotlinCancellationException *)getChildJobCancellationCause __attribute__((swift_name("getChildJobCancellationCause()")));
@end;

__attribute__((swift_name("SelectClause0")))
@protocol CnmeshSelectClause0
@required
- (void)registerSelectClause0Select:(id<CnmeshSelectInstance>)select block:(id<CnmeshKotlinSuspendFunction0>)block __attribute__((swift_name("registerSelectClause0(select:block:)")));
@end;

__attribute__((swift_name("JobSupport")))
@interface CnmeshJobSupport : CnmeshBase <CnmeshJob, CnmeshChildJob, CnmeshParentJob, CnmeshSelectClause0>
- (instancetype)initWithActive:(BOOL)active __attribute__((swift_name("init(active:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable("This is internal API and may be removed in the future releases")));
- (void)afterCompletionState:(id _Nullable)state __attribute__((swift_name("afterCompletion(state:)")));
- (id<CnmeshChildHandle>)attachChildChild:(id<CnmeshChildJob>)child __attribute__((swift_name("attachChild(child:)")));
- (void)cancelCause:(CnmeshKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause:)")));
- (BOOL)cancelCoroutineCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancelCoroutine(cause:)")));
- (void)cancelInternalCause:(CnmeshKotlinThrowable *)cause __attribute__((swift_name("cancelInternal(cause:)")));
- (NSString *)cancellationExceptionMessage __attribute__((swift_name("cancellationExceptionMessage()")));
- (BOOL)childCancelledCause:(CnmeshKotlinThrowable *)cause __attribute__((swift_name("childCancelled(cause:)")));
- (CnmeshKotlinCancellationException *)getCancellationException __attribute__((swift_name("getCancellationException()")));
- (CnmeshKotlinCancellationException *)getChildJobCancellationCause __attribute__((swift_name("getChildJobCancellationCause()")));
- (CnmeshKotlinThrowable * _Nullable)getCompletionExceptionOrNull __attribute__((swift_name("getCompletionExceptionOrNull()")));
- (BOOL)handleJobExceptionException:(CnmeshKotlinThrowable *)exception __attribute__((swift_name("handleJobException(exception:)")));
- (void)doInitParentJobParent:(id<CnmeshJob> _Nullable)parent __attribute__((swift_name("doInitParentJob(parent:)")));
- (id<CnmeshDisposableHandle>)invokeOnCompletionOnCancelling:(BOOL)onCancelling invokeImmediately:(BOOL)invokeImmediately handler:(void (^)(CnmeshKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(onCancelling:invokeImmediately:handler:)")));
- (id<CnmeshDisposableHandle>)invokeOnCompletionHandler:(void (^)(CnmeshKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(handler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)joinWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("join(completionHandler:)")));
- (void)onCancellingCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("onCancelling(cause:)")));
- (void)onCompletionInternalState:(id _Nullable)state __attribute__((swift_name("onCompletionInternal(state:)")));
- (void)onStart __attribute__((swift_name("onStart()")));
- (void)parentCancelledParentJob:(id<CnmeshParentJob>)parentJob __attribute__((swift_name("parentCancelled(parentJob:)")));
- (void)registerSelectClause0Select:(id<CnmeshSelectInstance>)select block:(id<CnmeshKotlinSuspendFunction0>)block __attribute__((swift_name("registerSelectClause0(select:block:)")));
- (BOOL)start __attribute__((swift_name("start()")));
- (NSString *)toDebugString __attribute__((swift_name("toDebugString()")));
- (NSString *)description __attribute__((swift_name("description()")));
- (CnmeshKotlinCancellationException *)toCancellationException:(CnmeshKotlinThrowable *)receiver message:(NSString * _Nullable)message __attribute__((swift_name("toCancellationException(_:message:)")));
@property (readonly) id<CnmeshKotlinSequence> children __attribute__((swift_name("children")));
@property (readonly) CnmeshKotlinThrowable * _Nullable completionCause __attribute__((swift_name("completionCause")));
@property (readonly) BOOL completionCauseHandled __attribute__((swift_name("completionCauseHandled")));
@property (readonly) BOOL isActive __attribute__((swift_name("isActive")));
@property (readonly) BOOL isCancelled __attribute__((swift_name("isCancelled")));
@property (readonly) BOOL isCompleted __attribute__((swift_name("isCompleted")));
@property (readonly) BOOL isCompletedExceptionally __attribute__((swift_name("isCompletedExceptionally")));
@property (readonly) BOOL isScopedCoroutine __attribute__((swift_name("isScopedCoroutine")));
@property (readonly) id<CnmeshKotlinCoroutineContextKey> key __attribute__((swift_name("key")));
@property (readonly) id<CnmeshSelectClause0> onJoin __attribute__((swift_name("onJoin")));
@end;

__attribute__((swift_name("KotlinContinuation")))
@protocol CnmeshKotlinContinuation
@required
- (void)resumeWithResult:(id _Nullable)result __attribute__((swift_name("resumeWith(result:)")));
@property (readonly) id<CnmeshKotlinCoroutineContext> context __attribute__((swift_name("context")));
@end;

__attribute__((swift_name("AbstractCoroutine")))
@interface CnmeshAbstractCoroutine<__contravariant T> : CnmeshJobSupport <CnmeshJob, CnmeshKotlinContinuation, CnmeshCoroutineScope>
- (instancetype)initWithParentContext:(id<CnmeshKotlinCoroutineContext>)parentContext initParentJob:(BOOL)initParentJob active:(BOOL)active __attribute__((swift_name("init(parentContext:initParentJob:active:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithActive:(BOOL)active __attribute__((swift_name("init(active:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (void)afterResumeState:(id _Nullable)state __attribute__((swift_name("afterResume(state:)")));
- (NSString *)cancellationExceptionMessage __attribute__((swift_name("cancellationExceptionMessage()")));
- (void)onCancelledCause:(CnmeshKotlinThrowable *)cause handled:(BOOL)handled __attribute__((swift_name("onCancelled(cause:handled:)")));
- (void)onCompletedValue:(T _Nullable)value __attribute__((swift_name("onCompleted(value:)")));
- (void)onCompletionInternalState:(id _Nullable)state __attribute__((swift_name("onCompletionInternal(state:)")));
- (void)resumeWithResult:(id _Nullable)result __attribute__((swift_name("resumeWith(result:)")));
- (void)startStart:(CnmeshCoroutineStart *)start receiver:(id _Nullable)receiver block:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("start(start:receiver:block:)")));
@property (readonly) id<CnmeshKotlinCoroutineContext> context __attribute__((swift_name("context")));
@property (readonly) id<CnmeshKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) BOOL isActive __attribute__((swift_name("isActive")));
@end;

__attribute__((swift_name("CancellableContinuation")))
@protocol CnmeshCancellableContinuation <CnmeshKotlinContinuation>
@required
- (BOOL)cancelCause_:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancel(cause_:)")));
- (void)completeResumeToken:(id)token __attribute__((swift_name("completeResume(token:)")));
- (void)doInitCancellability __attribute__((swift_name("doInitCancellability()")));
- (void)invokeOnCancellationHandler:(void (^)(CnmeshKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCancellation(handler:)")));
- (void)resumeValue:(id _Nullable)value onCancellation:(void (^ _Nullable)(CnmeshKotlinThrowable *))onCancellation __attribute__((swift_name("resume(value:onCancellation:)")));
- (id _Nullable)tryResumeValue:(id _Nullable)value idempotent:(id _Nullable)idempotent __attribute__((swift_name("tryResume(value:idempotent:)")));
- (id _Nullable)tryResumeValue:(id _Nullable)value idempotent:(id _Nullable)idempotent onCancellation:(void (^ _Nullable)(CnmeshKotlinThrowable *))onCancellation __attribute__((swift_name("tryResume(value:idempotent:onCancellation:)")));
- (id _Nullable)tryResumeWithExceptionException:(CnmeshKotlinThrowable *)exception __attribute__((swift_name("tryResumeWithException(exception:)")));
- (void)resumeUndispatched:(CnmeshCoroutineDispatcher *)receiver value:(id _Nullable)value __attribute__((swift_name("resumeUndispatched(_:value:)")));
- (void)resumeUndispatchedWithException:(CnmeshCoroutineDispatcher *)receiver exception:(CnmeshKotlinThrowable *)exception __attribute__((swift_name("resumeUndispatchedWithException(_:exception:)")));
@property (readonly) BOOL isActive __attribute__((swift_name("isActive")));
@property (readonly) BOOL isCancelled __attribute__((swift_name("isCancelled")));
@property (readonly) BOOL isCompleted __attribute__((swift_name("isCompleted")));
@end;

__attribute__((swift_name("DisposableHandle")))
@protocol CnmeshDisposableHandle
@required
- (void)dispose __attribute__((swift_name("dispose()")));
@end;

__attribute__((swift_name("ChildHandle")))
@protocol CnmeshChildHandle <CnmeshDisposableHandle>
@required
- (BOOL)childCancelledCause:(CnmeshKotlinThrowable *)cause __attribute__((swift_name("childCancelled(cause:)")));
@property (readonly) id<CnmeshJob> _Nullable parent __attribute__((swift_name("parent")));
@end;

__attribute__((swift_name("KotlinAbstractCoroutineContextElement")))
@interface CnmeshKotlinAbstractCoroutineContextElement : CnmeshBase <CnmeshKotlinCoroutineContextElement>
- (instancetype)initWithKey:(id<CnmeshKotlinCoroutineContextKey>)key __attribute__((swift_name("init(key:)"))) __attribute__((objc_designated_initializer));
@property (readonly) id<CnmeshKotlinCoroutineContextKey> key __attribute__((swift_name("key")));
@end;

__attribute__((swift_name("KotlinContinuationInterceptor")))
@protocol CnmeshKotlinContinuationInterceptor <CnmeshKotlinCoroutineContextElement>
@required
- (id<CnmeshKotlinContinuation>)interceptContinuationContinuation:(id<CnmeshKotlinContinuation>)continuation __attribute__((swift_name("interceptContinuation(continuation:)")));
- (void)releaseInterceptedContinuationContinuation:(id<CnmeshKotlinContinuation>)continuation __attribute__((swift_name("releaseInterceptedContinuation(continuation:)")));
@end;

__attribute__((swift_name("CoroutineDispatcher")))
@interface CnmeshCoroutineDispatcher : CnmeshKotlinAbstractCoroutineContextElement <CnmeshKotlinContinuationInterceptor>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithKey:(id<CnmeshKotlinCoroutineContextKey>)key __attribute__((swift_name("init(key:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) CnmeshCoroutineDispatcherKey *companion __attribute__((swift_name("companion")));
- (void)dispatchContext:(id<CnmeshKotlinCoroutineContext>)context block:(id<CnmeshRunnable>)block __attribute__((swift_name("dispatch(context:block:)")));
- (void)dispatchYieldContext:(id<CnmeshKotlinCoroutineContext>)context block:(id<CnmeshRunnable>)block __attribute__((swift_name("dispatchYield(context:block:)")));
- (id<CnmeshKotlinContinuation>)interceptContinuationContinuation:(id<CnmeshKotlinContinuation>)continuation __attribute__((swift_name("interceptContinuation(continuation:)")));
- (BOOL)isDispatchNeededContext:(id<CnmeshKotlinCoroutineContext>)context __attribute__((swift_name("isDispatchNeeded(context:)")));
- (CnmeshCoroutineDispatcher *)limitedParallelismParallelism:(int32_t)parallelism __attribute__((swift_name("limitedParallelism(parallelism:)")));
- (CnmeshCoroutineDispatcher *)plusOther_:(CnmeshCoroutineDispatcher *)other __attribute__((swift_name("plus(other_:)"))) __attribute__((unavailable("Operator '+' on two CoroutineDispatcher objects is meaningless. CoroutineDispatcher is a coroutine context element and `+` is a set-sum operator for coroutine contexts. The dispatcher to the right of `+` just replaces the dispatcher to the left.")));
- (void)releaseInterceptedContinuationContinuation:(id<CnmeshKotlinContinuation>)continuation __attribute__((swift_name("releaseInterceptedContinuation(continuation:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((swift_name("CloseableCoroutineDispatcher")))
@interface CnmeshCloseableCoroutineDispatcher : CnmeshCoroutineDispatcher
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)close __attribute__((swift_name("close()")));
@end;

__attribute__((swift_name("Deferred")))
@protocol CnmeshDeferred <CnmeshJob>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("await(completionHandler:)")));
- (id _Nullable)getCompleted __attribute__((swift_name("getCompleted()")));
- (CnmeshKotlinThrowable * _Nullable)getCompletionExceptionOrNull __attribute__((swift_name("getCompletionExceptionOrNull()")));
@property (readonly) id<CnmeshSelectClause1> onAwait __attribute__((swift_name("onAwait")));
@end;

__attribute__((swift_name("CompletableDeferred")))
@protocol CnmeshCompletableDeferred <CnmeshDeferred>
@required
- (BOOL)completeValue:(id _Nullable)value __attribute__((swift_name("complete(value:)")));
- (BOOL)completeExceptionallyException:(CnmeshKotlinThrowable *)exception __attribute__((swift_name("completeExceptionally(exception:)")));
@end;

__attribute__((swift_name("CompletableJob")))
@protocol CnmeshCompletableJob <CnmeshJob>
@required
- (BOOL)complete __attribute__((swift_name("complete()")));
- (BOOL)completeExceptionallyException:(CnmeshKotlinThrowable *)exception __attribute__((swift_name("completeExceptionally(exception:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CompletionHandlerException")))
@interface CnmeshCompletionHandlerException : CnmeshKotlinRuntimeException
- (instancetype)initWithMessage:(NSString *)message cause:(CnmeshKotlinThrowable *)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("CopyableThrowable")))
@protocol CnmeshCopyableThrowable
@required
- (CnmeshKotlinThrowable * _Nullable)createCopy __attribute__((swift_name("createCopy()")));
@end;

__attribute__((swift_name("KotlinCoroutineContextKey")))
@protocol CnmeshKotlinCoroutineContextKey
@required
@end;

__attribute__((swift_name("KotlinAbstractCoroutineContextKey")))
@interface CnmeshKotlinAbstractCoroutineContextKey<B, E> : CnmeshBase <CnmeshKotlinCoroutineContextKey>
- (instancetype)initWithBaseKey:(id<CnmeshKotlinCoroutineContextKey>)baseKey safeCast:(E _Nullable (^)(id<CnmeshKotlinCoroutineContextElement>))safeCast __attribute__((swift_name("init(baseKey:safeCast:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineDispatcher.Key")))
@interface CnmeshCoroutineDispatcherKey : CnmeshKotlinAbstractCoroutineContextKey<id<CnmeshKotlinContinuationInterceptor>, CnmeshCoroutineDispatcher *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithBaseKey:(id<CnmeshKotlinCoroutineContextKey>)baseKey safeCast:(id<CnmeshKotlinCoroutineContextElement> _Nullable (^)(id<CnmeshKotlinCoroutineContextElement>))safeCast __attribute__((swift_name("init(baseKey:safeCast:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)key __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshCoroutineDispatcherKey *shared __attribute__((swift_name("shared")));
@end;

__attribute__((swift_name("CoroutineExceptionHandler")))
@protocol CnmeshCoroutineExceptionHandler <CnmeshKotlinCoroutineContextElement>
@required
- (void)handleExceptionContext:(id<CnmeshKotlinCoroutineContext>)context exception:(CnmeshKotlinThrowable *)exception __attribute__((swift_name("handleException(context:exception:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineExceptionHandlerKey")))
@interface CnmeshCoroutineExceptionHandlerKey : CnmeshBase <CnmeshKotlinCoroutineContextKey>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)key __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshCoroutineExceptionHandlerKey *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineName")))
@interface CnmeshCoroutineName : CnmeshKotlinAbstractCoroutineContextElement
- (instancetype)initWithName:(NSString *)name __attribute__((swift_name("init(name:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithKey:(id<CnmeshKotlinCoroutineContextKey>)key __attribute__((swift_name("init(key:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) CnmeshCoroutineNameKey *companion __attribute__((swift_name("companion")));
- (NSString *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCoroutineName *)doCopyName:(NSString *)name __attribute__((swift_name("doCopy(name:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineName.Key")))
@interface CnmeshCoroutineNameKey : CnmeshBase <CnmeshKotlinCoroutineContextKey>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)key __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshCoroutineNameKey *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineStart")))
@interface CnmeshCoroutineStart : CnmeshKotlinEnum<CnmeshCoroutineStart *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) CnmeshCoroutineStart *default_ __attribute__((swift_name("default_")));
@property (class, readonly) CnmeshCoroutineStart *lazy __attribute__((swift_name("lazy")));
@property (class, readonly) CnmeshCoroutineStart *atomic __attribute__((swift_name("atomic")));
@property (class, readonly) CnmeshCoroutineStart *undispatched __attribute__((swift_name("undispatched")));
+ (CnmeshKotlinArray<CnmeshCoroutineStart *> *)values __attribute__((swift_name("values()")));
- (void)invokeBlock:(id<CnmeshKotlinSuspendFunction0>)block completion:(id<CnmeshKotlinContinuation>)completion __attribute__((swift_name("invoke(block:completion:)")));
- (void)invokeBlock:(id<CnmeshKotlinSuspendFunction1>)block receiver:(id _Nullable)receiver completion:(id<CnmeshKotlinContinuation>)completion __attribute__((swift_name("invoke(block:receiver:completion:)")));
@property (readonly) BOOL isLazy __attribute__((swift_name("isLazy")));
@end;

__attribute__((swift_name("Delay")))
@protocol CnmeshDelay
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)delayTime:(int64_t)time completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("delay(time:completionHandler:)"))) __attribute__((unavailable("Deprecated without replacement as an internal method never intended for public use")));
- (id<CnmeshDisposableHandle>)invokeOnTimeoutTimeMillis:(int64_t)timeMillis block:(id<CnmeshRunnable>)block context:(id<CnmeshKotlinCoroutineContext>)context __attribute__((swift_name("invokeOnTimeout(timeMillis:block:context:)")));
- (void)scheduleResumeAfterDelayTimeMillis:(int64_t)timeMillis continuation:(id<CnmeshCancellableContinuation>)continuation __attribute__((swift_name("scheduleResumeAfterDelay(timeMillis:continuation:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Dispatchers")))
@interface CnmeshDispatchers : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dispatchers __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDispatchers *shared __attribute__((swift_name("shared")));
@property (readonly) CnmeshCoroutineDispatcher *Default __attribute__((swift_name("Default")));
@property (readonly) CnmeshMainCoroutineDispatcher *Main __attribute__((swift_name("Main")));
@property (readonly) CnmeshCoroutineDispatcher *Unconfined __attribute__((swift_name("Unconfined")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GlobalScope")))
@interface CnmeshGlobalScope : CnmeshBase <CnmeshCoroutineScope>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)globalScope __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshGlobalScope *shared __attribute__((swift_name("shared")));
@property (readonly) id<CnmeshKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JobKey")))
@interface CnmeshJobKey : CnmeshBase <CnmeshKotlinCoroutineContextKey>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)key __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshJobKey *shared __attribute__((swift_name("shared")));
@end;

__attribute__((swift_name("MainCoroutineDispatcher")))
@interface CnmeshMainCoroutineDispatcher : CnmeshCoroutineDispatcher
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (CnmeshCoroutineDispatcher *)limitedParallelismParallelism:(int32_t)parallelism __attribute__((swift_name("limitedParallelism(parallelism:)")));
- (NSString *)description __attribute__((swift_name("description()")));
- (NSString * _Nullable)toStringInternalImpl __attribute__((swift_name("toStringInternalImpl()")));
@property (readonly) CnmeshMainCoroutineDispatcher *immediate __attribute__((swift_name("immediate")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NonCancellable")))
@interface CnmeshNonCancellable : CnmeshKotlinAbstractCoroutineContextElement <CnmeshJob>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithKey:(id<CnmeshKotlinCoroutineContextKey>)key __attribute__((swift_name("init(key:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)nonCancellable __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshNonCancellable *shared __attribute__((swift_name("shared")));
- (id<CnmeshChildHandle>)attachChildChild:(id<CnmeshChildJob>)child __attribute__((swift_name("attachChild(child:)"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
- (void)cancelCause:(CnmeshKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause:)"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
- (CnmeshKotlinCancellationException *)getCancellationException __attribute__((swift_name("getCancellationException()"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
- (id<CnmeshDisposableHandle>)invokeOnCompletionOnCancelling:(BOOL)onCancelling invokeImmediately:(BOOL)invokeImmediately handler:(void (^)(CnmeshKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(onCancelling:invokeImmediately:handler:)"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
- (id<CnmeshDisposableHandle>)invokeOnCompletionHandler:(void (^)(CnmeshKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(handler:)"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)joinWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("join(completionHandler:)"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
- (BOOL)start __attribute__((swift_name("start()"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<CnmeshKotlinSequence> children __attribute__((swift_name("children"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
@property (readonly) BOOL isActive __attribute__((swift_name("isActive"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
@property (readonly) BOOL isCancelled __attribute__((swift_name("isCancelled"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
@property (readonly) BOOL isCompleted __attribute__((swift_name("isCompleted"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
@property (readonly) id<CnmeshSelectClause0> onJoin __attribute__((swift_name("onJoin"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NonDisposableHandle")))
@interface CnmeshNonDisposableHandle : CnmeshBase <CnmeshDisposableHandle, CnmeshChildHandle>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)nonDisposableHandle __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshNonDisposableHandle *shared __attribute__((swift_name("shared")));
- (BOOL)childCancelledCause:(CnmeshKotlinThrowable *)cause __attribute__((swift_name("childCancelled(cause:)")));
- (void)dispose __attribute__((swift_name("dispose()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<CnmeshJob> _Nullable parent __attribute__((swift_name("parent")));
@end;

__attribute__((swift_name("Runnable")))
@protocol CnmeshRunnable
@required
- (void)run __attribute__((swift_name("run()")));
@end;

__attribute__((swift_name("KotlinCancellationException")))
@interface CnmeshKotlinCancellationException : CnmeshKotlinIllegalStateException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeoutCancellationException")))
@interface CnmeshTimeoutCancellationException : CnmeshKotlinCancellationException <CnmeshCopyableThrowable>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (CnmeshTimeoutCancellationException * _Nullable)createCopy __attribute__((swift_name("createCopy()")));
@end;

__attribute__((swift_name("SendChannel")))
@protocol CnmeshSendChannel
@required
- (BOOL)closeCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("close(cause:)")));
- (void)invokeOnCloseHandler:(void (^)(CnmeshKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnClose(handler:)")));
- (BOOL)offerElement:(id _Nullable)element __attribute__((swift_name("offer(element:)"))) __attribute__((unavailable("Deprecated in the favour of 'trySend' method")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendElement:(id _Nullable)element completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("send(element:completionHandler:)")));
- (id _Nullable)trySendElement:(id _Nullable)element __attribute__((swift_name("trySend(element:)")));
@property (readonly) BOOL isClosedForSend __attribute__((swift_name("isClosedForSend")));
@property (readonly) id<CnmeshSelectClause2> onSend __attribute__((swift_name("onSend")));
@end;

__attribute__((swift_name("BroadcastChannel")))
@protocol CnmeshBroadcastChannel <CnmeshSendChannel>
@required
- (void)cancelCause:(CnmeshKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause:)")));
- (id<CnmeshReceiveChannel>)openSubscription __attribute__((swift_name("openSubscription()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BufferOverflow")))
@interface CnmeshBufferOverflow : CnmeshKotlinEnum<CnmeshBufferOverflow *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) CnmeshBufferOverflow *suspend __attribute__((swift_name("suspend")));
@property (class, readonly) CnmeshBufferOverflow *dropOldest __attribute__((swift_name("dropOldest")));
@property (class, readonly) CnmeshBufferOverflow *dropLatest __attribute__((swift_name("dropLatest")));
+ (CnmeshKotlinArray<CnmeshBufferOverflow *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("ReceiveChannel")))
@protocol CnmeshReceiveChannel
@required
- (void)cancelCause:(CnmeshKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause:)")));
- (id<CnmeshChannelIterator>)iterator __attribute__((swift_name("iterator()")));
- (id _Nullable)poll __attribute__((swift_name("poll()"))) __attribute__((unavailable("Deprecated in the favour of 'tryReceive'. Please note that the provided replacement does not rethrow channel's close cause as 'poll' did, for the precise replacement please refer to the 'poll' documentation")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveCatchingWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receiveCatching(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveOrNullWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receiveOrNull(completionHandler:)"))) __attribute__((unavailable("Deprecated in favor of 'receiveCatching'. Please note that the provided replacement does not rethrow channel's close cause as 'receiveOrNull' did, for the detailed replacement please refer to the 'receiveOrNull' documentation")));
- (id _Nullable)tryReceive __attribute__((swift_name("tryReceive()")));
@property (readonly) BOOL isClosedForReceive __attribute__((swift_name("isClosedForReceive")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) id<CnmeshSelectClause1> onReceive __attribute__((swift_name("onReceive")));
@property (readonly) id<CnmeshSelectClause1> onReceiveCatching __attribute__((swift_name("onReceiveCatching")));
@property (readonly) id<CnmeshSelectClause1> onReceiveOrNull __attribute__((swift_name("onReceiveOrNull"))) __attribute__((unavailable("Deprecated in favor of onReceiveCatching extension")));
@end;

__attribute__((swift_name("Channel")))
@protocol CnmeshChannel <CnmeshSendChannel, CnmeshReceiveChannel>
@required
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelFactory")))
@interface CnmeshChannelFactory : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)factory __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshChannelFactory *shared __attribute__((swift_name("shared")));
@property (readonly) int32_t BUFFERED __attribute__((swift_name("BUFFERED")));
@property (readonly) int32_t CONFLATED __attribute__((swift_name("CONFLATED")));
@property (readonly) NSString *DEFAULT_BUFFER_PROPERTY_NAME __attribute__((swift_name("DEFAULT_BUFFER_PROPERTY_NAME")));
@property (readonly) int32_t RENDEZVOUS __attribute__((swift_name("RENDEZVOUS")));
@property (readonly) int32_t UNLIMITED __attribute__((swift_name("UNLIMITED")));
@end;

__attribute__((swift_name("ChannelIterator")))
@protocol CnmeshChannelIterator
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)hasNextWithCompletionHandler:(void (^)(CnmeshBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("hasNext(completionHandler:)")));
- (id _Nullable)next __attribute__((swift_name("next()")));
@end;

__attribute__((swift_name("KotlinNoSuchElementException")))
@interface CnmeshKotlinNoSuchElementException : CnmeshKotlinRuntimeException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClosedReceiveChannelException")))
@interface CnmeshClosedReceiveChannelException : CnmeshKotlinNoSuchElementException
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClosedSendChannelException")))
@interface CnmeshClosedSendChannelException : CnmeshKotlinIllegalStateException
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConflatedBroadcastChannel")))
@interface CnmeshConflatedBroadcastChannel<E> : CnmeshBase <CnmeshBroadcastChannel>
- (instancetype)initWithValue:(E _Nullable)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)cancelCause:(CnmeshKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause:)")));
- (BOOL)closeCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("close(cause:)")));
- (void)invokeOnCloseHandler:(void (^)(CnmeshKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnClose(handler:)")));
- (id<CnmeshReceiveChannel>)openSubscription __attribute__((swift_name("openSubscription()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendElement:(E _Nullable)element completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("send(element:completionHandler:)")));
- (id _Nullable)trySendElement:(E _Nullable)element __attribute__((swift_name("trySend(element:)")));
@property (readonly) BOOL isClosedForSend __attribute__((swift_name("isClosedForSend")));
@property (readonly) id<CnmeshSelectClause2> onSend __attribute__((swift_name("onSend")));
@property (readonly) E _Nullable value __attribute__((swift_name("value")));
@property (readonly) E _Nullable valueOrNull __attribute__((swift_name("valueOrNull")));
@end;

__attribute__((swift_name("ProducerScope")))
@protocol CnmeshProducerScope <CnmeshCoroutineScope, CnmeshSendChannel>
@required
@property (readonly) id<CnmeshSendChannel> channel __attribute__((swift_name("channel")));
@end;

__attribute__((swift_name("Flow")))
@protocol CnmeshFlow
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<CnmeshFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));
@end;

__attribute__((swift_name("AbstractFlow")))
@interface CnmeshAbstractFlow<T> : CnmeshBase <CnmeshFlow>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<CnmeshFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectSafelyCollector:(id<CnmeshFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collectSafely(collector:completionHandler:)")));
@end;

__attribute__((swift_name("FlowCollector")))
@protocol CnmeshFlowCollector
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)emitValue:(id _Nullable)value completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("emit(value:completionHandler:)")));
@end;

__attribute__((swift_name("SharedFlow")))
@protocol CnmeshSharedFlow <CnmeshFlow>
@required
@property (readonly) NSArray<id> *replayCache __attribute__((swift_name("replayCache")));
@end;

__attribute__((swift_name("MutableSharedFlow")))
@protocol CnmeshMutableSharedFlow <CnmeshSharedFlow, CnmeshFlowCollector>
@required
- (void)resetReplayCache __attribute__((swift_name("resetReplayCache()")));
- (BOOL)tryEmitValue:(id _Nullable)value __attribute__((swift_name("tryEmit(value:)")));
@property (readonly) id<CnmeshStateFlow> subscriptionCount __attribute__((swift_name("subscriptionCount")));
@end;

__attribute__((swift_name("StateFlow")))
@protocol CnmeshStateFlow <CnmeshSharedFlow>
@required
@property (readonly) id _Nullable value __attribute__((swift_name("value")));
@end;

__attribute__((swift_name("MutableStateFlow")))
@protocol CnmeshMutableStateFlow <CnmeshStateFlow, CnmeshMutableSharedFlow>
@required
- (BOOL)compareAndSetExpect:(id _Nullable)expect update:(id _Nullable)update __attribute__((swift_name("compareAndSet(expect:update:)")));
- (void)setValue:(id _Nullable)value __attribute__((swift_name("setValue(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SharingCommand")))
@interface CnmeshSharingCommand : CnmeshKotlinEnum<CnmeshSharingCommand *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) CnmeshSharingCommand *start __attribute__((swift_name("start")));
@property (class, readonly) CnmeshSharingCommand *stop __attribute__((swift_name("stop")));
@property (class, readonly) CnmeshSharingCommand *stopAndResetReplayCache __attribute__((swift_name("stopAndResetReplayCache")));
+ (CnmeshKotlinArray<CnmeshSharingCommand *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("SharingStarted")))
@protocol CnmeshSharingStarted
@required
- (id<CnmeshFlow>)commandSubscriptionCount:(id<CnmeshStateFlow>)subscriptionCount __attribute__((swift_name("command(subscriptionCount:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SharingStartedCompanion")))
@interface CnmeshSharingStartedCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshSharingStartedCompanion *shared __attribute__((swift_name("shared")));
- (id<CnmeshSharingStarted>)WhileSubscribedStopTimeoutMillis:(int64_t)stopTimeoutMillis replayExpirationMillis:(int64_t)replayExpirationMillis __attribute__((swift_name("WhileSubscribed(stopTimeoutMillis:replayExpirationMillis:)")));
@property (readonly) id<CnmeshSharingStarted> Eagerly __attribute__((swift_name("Eagerly")));
@property (readonly) id<CnmeshSharingStarted> Lazily __attribute__((swift_name("Lazily")));
@end;

__attribute__((swift_name("FusibleFlow")))
@protocol CnmeshFusibleFlow <CnmeshFlow>
@required
- (id<CnmeshFlow>)fuseContext:(id<CnmeshKotlinCoroutineContext>)context capacity:(int32_t)capacity onBufferOverflow:(CnmeshBufferOverflow *)onBufferOverflow __attribute__((swift_name("fuse(context:capacity:onBufferOverflow:)")));
@end;

__attribute__((swift_name("ChannelFlow")))
@interface CnmeshChannelFlow<T> : CnmeshBase <CnmeshFusibleFlow>
- (instancetype)initWithContext:(id<CnmeshKotlinCoroutineContext>)context capacity:(int32_t)capacity onBufferOverflow:(CnmeshBufferOverflow *)onBufferOverflow __attribute__((swift_name("init(context:capacity:onBufferOverflow:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)additionalToStringProps __attribute__((swift_name("additionalToStringProps()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<CnmeshFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectToScope:(id<CnmeshProducerScope>)scope completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collectTo(scope:completionHandler:)")));
- (CnmeshChannelFlow<T> *)createContext:(id<CnmeshKotlinCoroutineContext>)context capacity:(int32_t)capacity onBufferOverflow:(CnmeshBufferOverflow *)onBufferOverflow __attribute__((swift_name("create(context:capacity:onBufferOverflow:)")));
- (id<CnmeshFlow> _Nullable)dropChannelOperators __attribute__((swift_name("dropChannelOperators()")));
- (id<CnmeshFlow>)fuseContext:(id<CnmeshKotlinCoroutineContext>)context capacity:(int32_t)capacity onBufferOverflow:(CnmeshBufferOverflow *)onBufferOverflow __attribute__((swift_name("fuse(context:capacity:onBufferOverflow:)")));
- (id<CnmeshReceiveChannel>)produceImplScope:(id<CnmeshCoroutineScope>)scope __attribute__((swift_name("produceImpl(scope:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));
@property (readonly) id<CnmeshKotlinCoroutineContext> context __attribute__((swift_name("context")));
@property (readonly) CnmeshBufferOverflow *onBufferOverflow __attribute__((swift_name("onBufferOverflow")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SendingCollector")))
@interface CnmeshSendingCollector<T> : CnmeshBase <CnmeshFlowCollector>
- (instancetype)initWithChannel:(id<CnmeshSendChannel>)channel __attribute__((swift_name("init(channel:)"))) __attribute__((objc_designated_initializer));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)emitValue:(T _Nullable)value completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("emit(value:completionHandler:)")));
@end;

__attribute__((swift_name("SelectBuilder")))
@protocol CnmeshSelectBuilder
@required
- (void)onTimeoutTimeMillis:(int64_t)timeMillis block:(id<CnmeshKotlinSuspendFunction0>)block __attribute__((swift_name("onTimeout(timeMillis:block:)")));
- (void)invoke:(id<CnmeshSelectClause0>)receiver block:(id<CnmeshKotlinSuspendFunction0>)block __attribute__((swift_name("invoke(_:block:)")));
- (void)invoke:(id<CnmeshSelectClause1>)receiver block_:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("invoke(_:block_:)")));
- (void)invoke:(id<CnmeshSelectClause2>)receiver param:(id _Nullable)param block:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("invoke(_:param:block:)")));
- (void)invoke:(id<CnmeshSelectClause2>)receiver block__:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("invoke(_:block__:)")));
@end;

__attribute__((swift_name("SelectClause1")))
@protocol CnmeshSelectClause1
@required
- (void)registerSelectClause1Select:(id<CnmeshSelectInstance>)select block:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("registerSelectClause1(select:block:)")));
@end;

__attribute__((swift_name("SelectClause2")))
@protocol CnmeshSelectClause2
@required
- (void)registerSelectClause2Select:(id<CnmeshSelectInstance>)select param:(id _Nullable)param block:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("registerSelectClause2(select:param:block:)")));
@end;

__attribute__((swift_name("SelectInstance")))
@protocol CnmeshSelectInstance
@required
- (void)disposeOnSelectHandle:(id<CnmeshDisposableHandle>)handle __attribute__((swift_name("disposeOnSelect(handle:)")));
- (id _Nullable)performAtomicTrySelectDesc:(CnmeshAtomicDesc *)desc __attribute__((swift_name("performAtomicTrySelect(desc:)")));
- (void)resumeSelectWithExceptionException:(CnmeshKotlinThrowable *)exception __attribute__((swift_name("resumeSelectWithException(exception:)")));
- (BOOL)trySelect __attribute__((swift_name("trySelect()")));
- (id _Nullable)trySelectOtherOtherOp:(CnmeshLockFreeLinkedListNodePrepareOp * _Nullable)otherOp __attribute__((swift_name("trySelectOther(otherOp:)")));
@property (readonly) id<CnmeshKotlinContinuation> completion __attribute__((swift_name("completion")));
@property (readonly) BOOL isSelected __attribute__((swift_name("isSelected")));
@end;

__attribute__((swift_name("AtomicDesc")))
@interface CnmeshAtomicDesc : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)completeOp:(CnmeshAtomicOp<id> *)op failure:(id _Nullable)failure __attribute__((swift_name("complete(op:failure:)")));
- (id _Nullable)prepareOp:(CnmeshAtomicOp<id> *)op __attribute__((swift_name("prepare(op:)")));
@property CnmeshAtomicOp<id> *atomicOp __attribute__((swift_name("atomicOp")));
@end;

__attribute__((swift_name("OpDescriptor")))
@interface CnmeshOpDescriptor : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (BOOL)isEarlierThanThat:(CnmeshOpDescriptor *)that __attribute__((swift_name("isEarlierThan(that:)")));
- (id _Nullable)performAffected:(id _Nullable)affected __attribute__((swift_name("perform(affected:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshAtomicOp<id> * _Nullable atomicOp __attribute__((swift_name("atomicOp")));
@end;

__attribute__((swift_name("AtomicOp")))
@interface CnmeshAtomicOp<__contravariant T> : CnmeshOpDescriptor
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)completeAffected:(T _Nullable)affected failure:(id _Nullable)failure __attribute__((swift_name("complete(affected:failure:)")));
- (id _Nullable)decideDecision:(id _Nullable)decision __attribute__((swift_name("decide(decision:)")));
- (id _Nullable)performAffected:(id _Nullable)affected __attribute__((swift_name("perform(affected:)")));
- (id _Nullable)prepareAffected:(T _Nullable)affected __attribute__((swift_name("prepare(affected:)")));
@property (readonly) CnmeshAtomicOp<id> *atomicOp __attribute__((swift_name("atomicOp")));
@property (readonly) id _Nullable consensus __attribute__((swift_name("consensus")));
@property (readonly) BOOL isDecided __attribute__((swift_name("isDecided")));
@property (readonly) int64_t opSequence __attribute__((swift_name("opSequence")));
@end;

__attribute__((swift_name("LockFreeLinkedListNode")))
@interface CnmeshLockFreeLinkedListNode : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)addLastNode:(CnmeshLockFreeLinkedListNode *)node __attribute__((swift_name("addLast(node:)")));
- (BOOL)addLastIfNode:(CnmeshLockFreeLinkedListNode *)node condition:(CnmeshBoolean *(^)(void))condition __attribute__((swift_name("addLastIf(node:condition:)")));
- (BOOL)addLastIfPrevNode:(CnmeshLockFreeLinkedListNode *)node predicate:(CnmeshBoolean *(^)(CnmeshLockFreeLinkedListNode *))predicate __attribute__((swift_name("addLastIfPrev(node:predicate:)")));
- (BOOL)addLastIfPrevAndIfNode:(CnmeshLockFreeLinkedListNode *)node predicate:(CnmeshBoolean *(^)(CnmeshLockFreeLinkedListNode *))predicate condition:(CnmeshBoolean *(^)(void))condition __attribute__((swift_name("addLastIfPrevAndIf(node:predicate:condition:)")));
- (BOOL)addOneIfEmptyNode:(CnmeshLockFreeLinkedListNode *)node __attribute__((swift_name("addOneIfEmpty(node:)")));
- (CnmeshLockFreeLinkedListNodeAddLastDesc<CnmeshLockFreeLinkedListNode *> *)describeAddLastNode:(CnmeshLockFreeLinkedListNode *)node __attribute__((swift_name("describeAddLast(node:)")));
- (CnmeshLockFreeLinkedListNodeRemoveFirstDesc<CnmeshLockFreeLinkedListNode *> *)describeRemoveFirst __attribute__((swift_name("describeRemoveFirst()")));
- (void)helpRemove __attribute__((swift_name("helpRemove()")));
- (CnmeshLockFreeLinkedListNode * _Nullable)nextIfRemoved __attribute__((swift_name("nextIfRemoved()")));
- (BOOL)remove __attribute__((swift_name("remove()")));
- (id _Nullable)removeFirstIfIsInstanceOfOrPeekIfPredicate:(CnmeshBoolean *(^)(id _Nullable))predicate __attribute__((swift_name("removeFirstIfIsInstanceOfOrPeekIf(predicate:)")));
- (CnmeshLockFreeLinkedListNode * _Nullable)removeFirstOrNull __attribute__((swift_name("removeFirstOrNull()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL isRemoved __attribute__((swift_name("isRemoved")));
@property (readonly, getter=next_) id next __attribute__((swift_name("next")));
@property (readonly) CnmeshLockFreeLinkedListNode *nextNode __attribute__((swift_name("nextNode")));
@property (readonly) CnmeshLockFreeLinkedListNode *prevNode __attribute__((swift_name("prevNode")));
@end;

__attribute__((swift_name("LockFreeLinkedListHead")))
@interface CnmeshLockFreeLinkedListHead : CnmeshLockFreeLinkedListNode
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)forEachBlock:(void (^)(CnmeshLockFreeLinkedListNode *))block __attribute__((swift_name("forEach(block:)")));
- (CnmeshLockFreeLinkedListNode * _Nullable)nextIfRemoved __attribute__((swift_name("nextIfRemoved()")));
- (BOOL)remove __attribute__((swift_name("remove()")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) BOOL isRemoved __attribute__((swift_name("isRemoved")));
@end;

__attribute__((swift_name("LockFreeLinkedListNode.AbstractAtomicDesc")))
@interface CnmeshLockFreeLinkedListNodeAbstractAtomicDesc : CnmeshAtomicDesc
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)completeOp:(CnmeshAtomicOp<id> *)op failure:(id _Nullable)failure __attribute__((swift_name("complete(op:failure:)")));
- (id _Nullable)failureAffected:(CnmeshLockFreeLinkedListNode *)affected __attribute__((swift_name("failure(affected:)")));
- (void)finishOnSuccessAffected:(CnmeshLockFreeLinkedListNode *)affected next:(CnmeshLockFreeLinkedListNode *)next __attribute__((swift_name("finishOnSuccess(affected:next:)")));
- (void)finishPreparePrepareOp:(CnmeshLockFreeLinkedListNodePrepareOp *)prepareOp __attribute__((swift_name("finishPrepare(prepareOp:)")));
- (id _Nullable)onPreparePrepareOp:(CnmeshLockFreeLinkedListNodePrepareOp *)prepareOp __attribute__((swift_name("onPrepare(prepareOp:)")));
- (void)onRemovedAffected:(CnmeshLockFreeLinkedListNode *)affected __attribute__((swift_name("onRemoved(affected:)")));
- (id _Nullable)prepareOp:(CnmeshAtomicOp<id> *)op __attribute__((swift_name("prepare(op:)")));
- (BOOL)retryAffected:(CnmeshLockFreeLinkedListNode *)affected next:(id)next __attribute__((swift_name("retry(affected:next:)")));
- (CnmeshLockFreeLinkedListNode * _Nullable)takeAffectedNodeOp:(CnmeshOpDescriptor *)op __attribute__((swift_name("takeAffectedNode(op:)")));
- (id)updatedNextAffected:(CnmeshLockFreeLinkedListNode *)affected next:(CnmeshLockFreeLinkedListNode *)next __attribute__((swift_name("updatedNext(affected:next:)")));
@property (readonly) CnmeshLockFreeLinkedListNode * _Nullable affectedNode __attribute__((swift_name("affectedNode")));
@property (readonly) CnmeshLockFreeLinkedListNode * _Nullable originalNext __attribute__((swift_name("originalNext")));
@end;

__attribute__((swift_name("LockFreeLinkedListNodeAddLastDesc")))
@interface CnmeshLockFreeLinkedListNodeAddLastDesc<T> : CnmeshLockFreeLinkedListNodeAbstractAtomicDesc
- (instancetype)initWithQueue:(CnmeshLockFreeLinkedListNode *)queue node:(T)node __attribute__((swift_name("init(queue:node:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (void)finishOnSuccessAffected:(CnmeshLockFreeLinkedListNode *)affected next:(CnmeshLockFreeLinkedListNode *)next __attribute__((swift_name("finishOnSuccess(affected:next:)")));
- (void)finishPreparePrepareOp:(CnmeshLockFreeLinkedListNodePrepareOp *)prepareOp __attribute__((swift_name("finishPrepare(prepareOp:)")));
- (BOOL)retryAffected:(CnmeshLockFreeLinkedListNode *)affected next:(id)next __attribute__((swift_name("retry(affected:next:)")));
- (CnmeshLockFreeLinkedListNode * _Nullable)takeAffectedNodeOp:(CnmeshOpDescriptor *)op __attribute__((swift_name("takeAffectedNode(op:)")));
- (id)updatedNextAffected:(CnmeshLockFreeLinkedListNode *)affected next:(CnmeshLockFreeLinkedListNode *)next __attribute__((swift_name("updatedNext(affected:next:)")));
@property (readonly) CnmeshLockFreeLinkedListNode * _Nullable affectedNode __attribute__((swift_name("affectedNode")));
@property (readonly) T node __attribute__((swift_name("node")));
@property (readonly) CnmeshLockFreeLinkedListNode *originalNext __attribute__((swift_name("originalNext")));
@property (readonly) CnmeshLockFreeLinkedListNode *queue __attribute__((swift_name("queue")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LockFreeLinkedListNode.PrepareOp")))
@interface CnmeshLockFreeLinkedListNodePrepareOp : CnmeshOpDescriptor
- (instancetype)initWithAffected:(CnmeshLockFreeLinkedListNode *)affected next:(CnmeshLockFreeLinkedListNode *)next desc:(CnmeshLockFreeLinkedListNodeAbstractAtomicDesc *)desc __attribute__((swift_name("init(affected:next:desc:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (void)finishPrepare __attribute__((swift_name("finishPrepare()")));
- (id _Nullable)performAffected:(id _Nullable)affected __attribute__((swift_name("perform(affected:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshLockFreeLinkedListNode *affected __attribute__((swift_name("affected")));
@property (readonly) CnmeshAtomicOp<id> *atomicOp __attribute__((swift_name("atomicOp")));
@property (readonly) CnmeshLockFreeLinkedListNodeAbstractAtomicDesc *desc __attribute__((swift_name("desc")));
@property (readonly) CnmeshLockFreeLinkedListNode *next __attribute__((swift_name("next")));
@end;

__attribute__((swift_name("LockFreeLinkedListNodeRemoveFirstDesc")))
@interface CnmeshLockFreeLinkedListNodeRemoveFirstDesc<T> : CnmeshLockFreeLinkedListNodeAbstractAtomicDesc
- (instancetype)initWithQueue:(CnmeshLockFreeLinkedListNode *)queue __attribute__((swift_name("init(queue:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (id _Nullable)failureAffected:(CnmeshLockFreeLinkedListNode *)affected __attribute__((swift_name("failure(affected:)")));
- (void)finishOnSuccessAffected:(CnmeshLockFreeLinkedListNode *)affected next:(CnmeshLockFreeLinkedListNode *)next __attribute__((swift_name("finishOnSuccess(affected:next:)")));
- (void)finishPreparePrepareOp:(CnmeshLockFreeLinkedListNodePrepareOp *)prepareOp __attribute__((swift_name("finishPrepare(prepareOp:)")));
- (BOOL)retryAffected:(CnmeshLockFreeLinkedListNode *)affected next:(id)next __attribute__((swift_name("retry(affected:next:)")));
- (CnmeshLockFreeLinkedListNode * _Nullable)takeAffectedNodeOp:(CnmeshOpDescriptor *)op __attribute__((swift_name("takeAffectedNode(op:)")));
- (id)updatedNextAffected:(CnmeshLockFreeLinkedListNode *)affected next:(CnmeshLockFreeLinkedListNode *)next __attribute__((swift_name("updatedNext(affected:next:)")));
@property (readonly) CnmeshLockFreeLinkedListNode * _Nullable affectedNode __attribute__((swift_name("affectedNode")));
@property (readonly) CnmeshLockFreeLinkedListNode * _Nullable originalNext __attribute__((swift_name("originalNext")));
@property (readonly) CnmeshLockFreeLinkedListNode *queue __attribute__((swift_name("queue")));
@property (readonly) T _Nullable result __attribute__((swift_name("result")));
@end;

__attribute__((swift_name("MainDispatcherFactory")))
@protocol CnmeshMainDispatcherFactory
@required
- (CnmeshMainCoroutineDispatcher *)createDispatcherAllFactories:(NSArray<id<CnmeshMainDispatcherFactory>> *)allFactories __attribute__((swift_name("createDispatcher(allFactories:)")));
- (NSString * _Nullable)hintOnError __attribute__((swift_name("hintOnError()")));
@property (readonly) int32_t loadPriority __attribute__((swift_name("loadPriority")));
@end;

__attribute__((swift_name("AtomicfuSynchronizedObject")))
@interface CnmeshAtomicfuSynchronizedObject : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)lock __attribute__((swift_name("lock()")));
- (BOOL)tryLock __attribute__((swift_name("tryLock()")));
- (void)unlock __attribute__((swift_name("unlock()")));
@property (readonly, getter=lock_) CnmeshKotlinAtomicReference<CnmeshAtomicfuSynchronizedObjectLockState *> *lock __attribute__((swift_name("lock")));
@end;

__attribute__((swift_name("ThreadSafeHeap")))
@interface CnmeshThreadSafeHeap<T> : CnmeshAtomicfuSynchronizedObject
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)addLastNode:(T)node __attribute__((swift_name("addLast(node:)")));
- (BOOL)addLastIfNode:(T)node cond:(CnmeshBoolean *(^)(T _Nullable))cond __attribute__((swift_name("addLastIf(node:cond:)")));
- (void)clear __attribute__((swift_name("clear()")));
- (T _Nullable)peek __attribute__((swift_name("peek()")));
- (BOOL)removeNode:(T)node __attribute__((swift_name("remove(node:)")));
- (T _Nullable)removeFirstIfPredicate:(CnmeshBoolean *(^)(T))predicate __attribute__((swift_name("removeFirstIf(predicate:)")));
- (T _Nullable)removeFirstOrNull __attribute__((swift_name("removeFirstOrNull()")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("ThreadSafeHeapNode")))
@protocol CnmeshThreadSafeHeapNode
@required
@property CnmeshThreadSafeHeap<id> * _Nullable heap __attribute__((swift_name("heap")));
@property int32_t index __attribute__((swift_name("index")));
@end;

__attribute__((swift_name("Mutex")))
@protocol CnmeshMutex
@required
- (BOOL)holdsLockOwner:(id)owner __attribute__((swift_name("holdsLock(owner:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)lockOwner:(id _Nullable)owner completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("lock(owner:completionHandler:)")));
- (BOOL)tryLockOwner:(id _Nullable)owner __attribute__((swift_name("tryLock(owner:)")));
- (void)unlockOwner:(id _Nullable)owner __attribute__((swift_name("unlock(owner:)")));
@property (readonly) BOOL isLocked __attribute__((swift_name("isLocked")));
@property (readonly) id<CnmeshSelectClause2> onLock __attribute__((swift_name("onLock"))) __attribute__((deprecated("Mutex.onLock deprecated without replacement. For additional details please refer to #2794")));
@end;

__attribute__((swift_name("Semaphore")))
@protocol CnmeshSemaphore
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)acquireWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("acquire(completionHandler:)")));
- (void)release_ __attribute__((swift_name("release()")));
- (BOOL)tryAcquire __attribute__((swift_name("tryAcquire()")));
@property (readonly) int32_t availablePermits __attribute__((swift_name("availablePermits")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Uuid")))
@interface CnmeshUuid : CnmeshBase <CnmeshKotlinComparable>
- (instancetype)initWithMsb:(int64_t)msb lsb:(int64_t)lsb __attribute__((swift_name("init(msb:lsb:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithUuidBytes:(CnmeshKotlinByteArray *)uuidBytes __attribute__((swift_name("init(uuidBytes:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("Use `uuidOf` instead.")));
- (int32_t)compareToOther:(CnmeshUuid *)other __attribute__((swift_name("compareTo(other:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t leastSignificantBits __attribute__((swift_name("leastSignificantBits")));
@property (readonly) int64_t mostSignificantBits __attribute__((swift_name("mostSignificantBits")));
@end;

__attribute__((swift_name("UuidHasher")))
@protocol CnmeshUuidHasher
@required
- (CnmeshKotlinByteArray *)digest __attribute__((swift_name("digest()")));
- (void)updateInput:(CnmeshKotlinByteArray *)input __attribute__((swift_name("update(input:)")));
@property (readonly) int32_t version_ __attribute__((swift_name("version_")));
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("IsoArrayDeque")))
@interface CnmeshIsoArrayDeque : NSObject
@end;

__attribute__((swift_name("Stately_isolateIsolateState")))
@interface CnmeshStately_isolateIsolateState<T> : CnmeshBase
- (instancetype)initWithStateRunner:(id<CnmeshStately_isolateStateRunner> _Nullable)stateRunner producer:(T (^)(void))producer __attribute__((swift_name("init(stateRunner:producer:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithStateHolder:(CnmeshStately_isolateStateHolder<T> *)stateHolder __attribute__((swift_name("init(stateHolder:)"))) __attribute__((objc_designated_initializer));
- (id _Nullable)accessBlock:(id _Nullable (^)(T))block __attribute__((swift_name("access(block:)")));
- (void)dispose __attribute__((swift_name("dispose()")));
- (CnmeshStately_isolateStateHolder<id> *)forkR:(id)r __attribute__((swift_name("fork(r:)")));
@property (readonly) BOOL isDisposed __attribute__((swift_name("isDisposed")));
@end;

__attribute__((swift_name("KotlinCollection")))
@protocol CnmeshKotlinCollection <CnmeshKotlinIterable>
@required
- (BOOL)containsElement:(id _Nullable)element __attribute__((swift_name("contains(element:)")));
- (BOOL)containsAllElements:(id)elements __attribute__((swift_name("containsAll(elements:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("KotlinMutableIterable")))
@protocol CnmeshKotlinMutableIterable <CnmeshKotlinIterable>
@required
@end;

__attribute__((swift_name("KotlinMutableCollection")))
@protocol CnmeshKotlinMutableCollection <CnmeshKotlinCollection, CnmeshKotlinMutableIterable>
@required
- (BOOL)addElement:(id _Nullable)element __attribute__((swift_name("add(element:)")));
- (BOOL)addAllElements:(id)elements __attribute__((swift_name("addAll(elements:)")));
- (void)clear __attribute__((swift_name("clear()")));
- (BOOL)removeElement:(id _Nullable)element __attribute__((swift_name("remove(element:)")));
- (BOOL)removeAllElements:(id)elements __attribute__((swift_name("removeAll(elements:)")));
- (BOOL)retainAllElements:(id)elements __attribute__((swift_name("retainAll(elements:)")));
@end;

__attribute__((swift_name("IsoMutableCollection")))
@interface CnmeshIsoMutableCollection<T> : CnmeshStately_isolateIsolateState<id> <CnmeshKotlinMutableCollection>
- (instancetype)initWithStateRunner:(id<CnmeshStately_isolateStateRunner> _Nullable)stateRunner producer:(id (^)(void))producer __attribute__((swift_name("init(stateRunner:producer:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithStateHolder:(CnmeshStately_isolateStateHolder<id> *)stateHolder __attribute__((swift_name("init(stateHolder:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (BOOL)addElement:(T _Nullable)element __attribute__((swift_name("add(element:)")));
- (BOOL)addAllElements:(id)elements __attribute__((swift_name("addAll(elements:)")));
- (void)clear __attribute__((swift_name("clear()")));
- (BOOL)containsElement:(T _Nullable)element __attribute__((swift_name("contains(element:)")));
- (BOOL)containsAllElements:(id)elements __attribute__((swift_name("containsAll(elements:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (id<CnmeshKotlinMutableIterator>)iterator __attribute__((swift_name("iterator()")));
- (BOOL)removeElement:(T _Nullable)element __attribute__((swift_name("remove(element:)")));
- (BOOL)removeAllElements:(id)elements __attribute__((swift_name("removeAll(elements:)")));
- (BOOL)retainAllElements:(id)elements __attribute__((swift_name("retainAll(elements:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("KotlinIterator")))
@protocol CnmeshKotlinIterator
@required
- (BOOL)hasNext __attribute__((swift_name("hasNext()")));
- (id _Nullable)next __attribute__((swift_name("next()")));
@end;

__attribute__((swift_name("KotlinMutableIterator")))
@protocol CnmeshKotlinMutableIterator <CnmeshKotlinIterator>
@required
- (void)remove_ __attribute__((swift_name("remove_()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IsoMutableIterator")))
@interface CnmeshIsoMutableIterator<T> : CnmeshStately_isolateIsolateState<id<CnmeshKotlinMutableIterator>> <CnmeshKotlinMutableIterator>
- (instancetype)initWithStateRunner:(id<CnmeshStately_isolateStateRunner> _Nullable)stateRunner producer:(id (^)(void))producer __attribute__((swift_name("init(stateRunner:producer:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithStateHolder:(CnmeshStately_isolateStateHolder<id> *)stateHolder __attribute__((swift_name("init(stateHolder:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (BOOL)hasNext __attribute__((swift_name("hasNext()")));
- (T _Nullable)next __attribute__((swift_name("next()")));
- (void)remove_ __attribute__((swift_name("remove_()")));
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("IsoMutableList")))
@interface CnmeshIsoMutableList : NSObject
@end;

__attribute__((swift_name("KotlinListIterator")))
@protocol CnmeshKotlinListIterator <CnmeshKotlinIterator>
@required
- (BOOL)hasPrevious __attribute__((swift_name("hasPrevious()")));
- (int32_t)nextIndex __attribute__((swift_name("nextIndex()")));
- (id _Nullable)previous __attribute__((swift_name("previous()")));
- (int32_t)previousIndex __attribute__((swift_name("previousIndex()")));
@end;

__attribute__((swift_name("KotlinMutableListIterator")))
@protocol CnmeshKotlinMutableListIterator <CnmeshKotlinListIterator, CnmeshKotlinMutableIterator>
@required
- (void)addElement_:(id _Nullable)element __attribute__((swift_name("add(element_:)")));
- (void)setElement:(id _Nullable)element __attribute__((swift_name("set(element:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IsoMutableListIterator")))
@interface CnmeshIsoMutableListIterator<T> : CnmeshStately_isolateIsolateState<id<CnmeshKotlinMutableListIterator>> <CnmeshKotlinMutableListIterator>
- (instancetype)initWithStateRunner:(id<CnmeshStately_isolateStateRunner> _Nullable)stateRunner producer:(id (^)(void))producer __attribute__((swift_name("init(stateRunner:producer:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithStateHolder:(CnmeshStately_isolateStateHolder<id> *)stateHolder __attribute__((swift_name("init(stateHolder:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (void)addElement_:(T _Nullable)element __attribute__((swift_name("add(element_:)")));
- (BOOL)hasNext __attribute__((swift_name("hasNext()")));
- (BOOL)hasPrevious __attribute__((swift_name("hasPrevious()")));
- (T _Nullable)next __attribute__((swift_name("next()")));
- (int32_t)nextIndex __attribute__((swift_name("nextIndex()")));
- (T _Nullable)previous __attribute__((swift_name("previous()")));
- (int32_t)previousIndex __attribute__((swift_name("previousIndex()")));
- (void)remove_ __attribute__((swift_name("remove_()")));
- (void)setElement:(T _Nullable)element __attribute__((swift_name("set(element:)")));
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("IsoMutableMap")))
@interface CnmeshIsoMutableMap : NSObject
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("IsoMutableSet")))
@interface CnmeshIsoMutableSet : NSObject
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Koin")))
@interface CnmeshKoin : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)close __attribute__((swift_name("close()")));
- (void)createEagerInstances __attribute__((swift_name("createEagerInstances()")));
- (CnmeshScope *)createScopeT:(id<CnmeshKoinScopeComponent>)t __attribute__((swift_name("createScope(t:)")));
- (CnmeshScope *)createScopeScopeId:(NSString *)scopeId __attribute__((swift_name("createScope(scopeId:)")));
- (CnmeshScope *)createScopeScopeId:(NSString *)scopeId source:(id _Nullable)source __attribute__((swift_name("createScope(scopeId:source:)")));
- (CnmeshScope *)createScopeScopeId:(NSString *)scopeId qualifier:(id<CnmeshQualifier>)qualifier source:(id _Nullable)source __attribute__((swift_name("createScope(scopeId:qualifier:source:)")));
- (void)declareInstance:(id _Nullable)instance qualifier:(id<CnmeshQualifier> _Nullable)qualifier secondaryTypes:(NSArray<id<CnmeshKotlinKClass>> *)secondaryTypes allowOverride:(BOOL)allowOverride __attribute__((swift_name("declare(instance:qualifier:secondaryTypes:allowOverride:)")));
- (void)deletePropertyKey:(NSString *)key __attribute__((swift_name("deleteProperty(key:)")));
- (void)deleteScopeScopeId:(NSString *)scopeId __attribute__((swift_name("deleteScope(scopeId:)")));
- (id _Nullable)getClazz:(id<CnmeshKotlinKClass>)clazz qualifier:(id<CnmeshQualifier> _Nullable)qualifier parameters:(CnmeshParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("get(clazz:qualifier:parameters:)")));
- (id)getQualifier:(id<CnmeshQualifier> _Nullable)qualifier parameters:(CnmeshParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("get(qualifier:parameters:)")));
- (NSArray<id> *)getAll __attribute__((swift_name("getAll()")));
- (CnmeshScope *)getOrCreateScopeScopeId:(NSString *)scopeId __attribute__((swift_name("getOrCreateScope(scopeId:)")));
- (CnmeshScope *)getOrCreateScopeScopeId:(NSString *)scopeId qualifier:(id<CnmeshQualifier>)qualifier source:(id _Nullable)source __attribute__((swift_name("getOrCreateScope(scopeId:qualifier:source:)")));
- (id _Nullable)getOrNullClazz:(id<CnmeshKotlinKClass>)clazz qualifier:(id<CnmeshQualifier> _Nullable)qualifier parameters:(CnmeshParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("getOrNull(clazz:qualifier:parameters:)")));
- (id _Nullable)getOrNullQualifier:(id<CnmeshQualifier> _Nullable)qualifier parameters:(CnmeshParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("getOrNull(qualifier:parameters:)")));
- (id _Nullable)getPropertyKey:(NSString *)key __attribute__((swift_name("getProperty(key:)")));
- (id)getPropertyKey:(NSString *)key defaultValue:(id)defaultValue __attribute__((swift_name("getProperty(key:defaultValue:)")));
- (CnmeshScope *)getScopeScopeId:(NSString *)scopeId __attribute__((swift_name("getScope(scopeId:)")));
- (CnmeshScope * _Nullable)getScopeOrNullScopeId:(NSString *)scopeId __attribute__((swift_name("getScopeOrNull(scopeId:)")));
- (id<CnmeshKotlinLazy>)injectQualifier:(id<CnmeshQualifier> _Nullable)qualifier mode:(CnmeshKotlinLazyThreadSafetyMode *)mode parameters:(CnmeshParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("inject(qualifier:mode:parameters:)")));
- (id<CnmeshKotlinLazy>)injectOrNullQualifier:(id<CnmeshQualifier> _Nullable)qualifier mode:(CnmeshKotlinLazyThreadSafetyMode *)mode parameters:(CnmeshParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("injectOrNull(qualifier:mode:parameters:)")));
- (void)loadModulesModules:(NSArray<CnmeshModule *> *)modules allowOverride:(BOOL)allowOverride __attribute__((swift_name("loadModules(modules:allowOverride:)")));
- (void)setPropertyKey:(NSString *)key value:(id)value __attribute__((swift_name("setProperty(key:value:)")));
- (void)setupLoggerLogger:(CnmeshLogger *)logger __attribute__((swift_name("setupLogger(logger:)")));
- (void)unloadModulesModules:(NSArray<CnmeshModule *> *)modules __attribute__((swift_name("unloadModules(modules:)")));
@property (readonly) CnmeshInstanceRegistry *instanceRegistry __attribute__((swift_name("instanceRegistry")));
@property (readonly) CnmeshLogger *logger __attribute__((swift_name("logger")));
@property (readonly) CnmeshPropertyRegistry *propertyRegistry __attribute__((swift_name("propertyRegistry")));
@property (readonly) CnmeshScopeRegistry *scopeRegistry __attribute__((swift_name("scopeRegistry")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinApplication")))
@interface CnmeshKoinApplication : CnmeshBase
@property (class, readonly, getter=companion) CnmeshKoinApplicationCompanion *companion __attribute__((swift_name("companion")));
- (void)allowOverrideOverride:(BOOL)override __attribute__((swift_name("allowOverride(override:)")));
- (void)close __attribute__((swift_name("close()")));
- (void)createEagerInstances __attribute__((swift_name("createEagerInstances()")));
- (CnmeshKoinApplication *)loggerLogger:(CnmeshLogger *)logger __attribute__((swift_name("logger(logger:)")));
- (CnmeshKoinApplication *)modulesModules:(CnmeshKotlinArray<CnmeshModule *> *)modules __attribute__((swift_name("modules(modules:)")));
- (CnmeshKoinApplication *)modulesModules_:(NSArray<CnmeshModule *> *)modules __attribute__((swift_name("modules(modules_:)")));
- (CnmeshKoinApplication *)modulesModules__:(CnmeshModule *)modules __attribute__((swift_name("modules(modules__:)")));
- (CnmeshKoinApplication *)printLoggerLevel:(CnmeshLevel *)level __attribute__((swift_name("printLogger(level:)")));
- (CnmeshKoinApplication *)propertiesValues:(NSDictionary<NSString *, id> *)values __attribute__((swift_name("properties(values:)")));
- (void)unloadModulesModules:(NSArray<CnmeshModule *> *)modules __attribute__((swift_name("unloadModules(modules:)")));
- (void)unloadModulesModule:(CnmeshModule *)module __attribute__((swift_name("unloadModules(module:)")));
@property (readonly) CnmeshKoin *koin __attribute__((swift_name("koin")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinApplication.Companion")))
@interface CnmeshKoinApplicationCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKoinApplicationCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshKoinApplication *)doInit __attribute__((swift_name("doInit()")));
@end;

__attribute__((swift_name("KoinContext")))
@protocol CnmeshKoinContext
@required
- (CnmeshKoin *)get __attribute__((swift_name("get()")));
- (CnmeshKoin * _Nullable)getOrNull __attribute__((swift_name("getOrNull()")));
- (void)loadKoinModulesModules:(NSArray<CnmeshModule *> *)modules __attribute__((swift_name("loadKoinModules(modules:)")));
- (void)loadKoinModulesModule:(CnmeshModule *)module __attribute__((swift_name("loadKoinModules(module:)")));
- (CnmeshKoinApplication *)startKoinKoinApplication:(CnmeshKoinApplication *)koinApplication __attribute__((swift_name("startKoin(koinApplication:)")));
- (CnmeshKoinApplication *)startKoinAppDeclaration:(void (^)(CnmeshKoinApplication *))appDeclaration __attribute__((swift_name("startKoin(appDeclaration:)")));
- (void)stopKoin __attribute__((swift_name("stopKoin()")));
- (void)unloadKoinModulesModules:(NSArray<CnmeshModule *> *)modules __attribute__((swift_name("unloadKoinModules(modules:)")));
- (void)unloadKoinModulesModule:(CnmeshModule *)module __attribute__((swift_name("unloadKoinModules(module:)")));
@end;

__attribute__((swift_name("Lockable")))
@interface CnmeshLockable : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Scope")))
@interface CnmeshScope : CnmeshLockable
- (instancetype)initWithScopeQualifier:(id<CnmeshQualifier>)scopeQualifier id:(NSString *)id isRoot:(BOOL)isRoot _koin:(CnmeshKoin *)_koin __attribute__((swift_name("init(scopeQualifier:id:isRoot:_koin:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (void)close __attribute__((swift_name("close()")));
- (id<CnmeshQualifier>)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString *)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (BOOL)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshScope *)doCopyScopeQualifier:(id<CnmeshQualifier>)scopeQualifier id:(NSString *)id isRoot:(BOOL)isRoot _koin:(CnmeshKoin *)_koin __attribute__((swift_name("doCopy(scopeQualifier:id:isRoot:_koin:)")));
- (void)declareInstance:(id _Nullable)instance qualifier:(id<CnmeshQualifier> _Nullable)qualifier secondaryTypes:(NSArray<id<CnmeshKotlinKClass>> *)secondaryTypes allowOverride:(BOOL)allowOverride __attribute__((swift_name("declare(instance:qualifier:secondaryTypes:allowOverride:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (id _Nullable)getClazz:(id<CnmeshKotlinKClass>)clazz qualifier:(id<CnmeshQualifier> _Nullable)qualifier parameters:(CnmeshParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("get(clazz:qualifier:parameters:)")));
- (id)getQualifier:(id<CnmeshQualifier> _Nullable)qualifier parameters:(CnmeshParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("get(qualifier:parameters:)")));
- (NSArray<id> *)getAll __attribute__((swift_name("getAll()")));
- (NSArray<id> *)getAllClazz:(id<CnmeshKotlinKClass>)clazz __attribute__((swift_name("getAll(clazz:)")));
- (CnmeshKoin *)getKoin __attribute__((swift_name("getKoin()")));
- (id _Nullable)getOrNullClazz:(id<CnmeshKotlinKClass>)clazz qualifier:(id<CnmeshQualifier> _Nullable)qualifier parameters:(CnmeshParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("getOrNull(clazz:qualifier:parameters:)")));
- (id _Nullable)getOrNullQualifier:(id<CnmeshQualifier> _Nullable)qualifier parameters:(CnmeshParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("getOrNull(qualifier:parameters:)")));
- (id)getPropertyKey:(NSString *)key __attribute__((swift_name("getProperty(key:)")));
- (id)getPropertyKey:(NSString *)key defaultValue:(id)defaultValue __attribute__((swift_name("getProperty(key:defaultValue:)")));
- (id _Nullable)getPropertyOrNullKey:(NSString *)key __attribute__((swift_name("getPropertyOrNull(key:)")));
- (CnmeshScope *)getScopeScopeID:(NSString *)scopeID __attribute__((swift_name("getScope(scopeID:)")));
- (id _Nullable)getSource __attribute__((swift_name("getSource()"))) __attribute__((deprecated("No need to use getSource(). You can an use get() directly.")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (id<CnmeshKotlinLazy>)injectQualifier:(id<CnmeshQualifier> _Nullable)qualifier mode:(CnmeshKotlinLazyThreadSafetyMode *)mode parameters:(CnmeshParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("inject(qualifier:mode:parameters:)")));
- (id<CnmeshKotlinLazy>)injectOrNullQualifier:(id<CnmeshQualifier> _Nullable)qualifier mode:(CnmeshKotlinLazyThreadSafetyMode *)mode parameters:(CnmeshParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("injectOrNull(qualifier:mode:parameters:)")));
- (BOOL)isNotClosed __attribute__((swift_name("isNotClosed()")));
- (void)linkToScopes:(CnmeshKotlinArray<CnmeshScope *> *)scopes __attribute__((swift_name("linkTo(scopes:)")));
- (void)refreshScopeInstanceClazz:(id<CnmeshKotlinKClass>)clazz qualifier:(id<CnmeshQualifier> _Nullable)qualifier instance:(id)instance __attribute__((swift_name("refreshScopeInstance(clazz:qualifier:instance:)")));
- (void)registerCallbackCallback:(id<CnmeshScopeCallback>)callback __attribute__((swift_name("registerCallback(callback:)")));
- (NSString *)description __attribute__((swift_name("description()")));
- (void)unlinkScopes:(CnmeshKotlinArray<CnmeshScope *> *)scopes __attribute__((swift_name("unlink(scopes:)")));
@property (readonly) NSMutableArray<CnmeshParametersHolder *> *_parameterStack __attribute__((swift_name("_parameterStack")));
@property id _Nullable _source __attribute__((swift_name("_source")));
@property (readonly) BOOL closed __attribute__((swift_name("closed")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) BOOL isRoot __attribute__((swift_name("isRoot")));
@property (readonly) CnmeshLogger *logger __attribute__((swift_name("logger")));
@property (readonly) id<CnmeshQualifier> scopeQualifier __attribute__((swift_name("scopeQualifier")));
@end;

__attribute__((swift_name("ScopeCallback")))
@protocol CnmeshScopeCallback
@required
- (void)onScopeCloseScope:(CnmeshScope *)scope __attribute__((swift_name("onScopeClose(scope:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InstanceRegistry")))
@interface CnmeshInstanceRegistry : CnmeshBase
- (instancetype)initWith_koin:(CnmeshKoin *)_koin __attribute__((swift_name("init(_koin:)"))) __attribute__((objc_designated_initializer));
- (void)saveMappingAllowOverride:(BOOL)allowOverride mapping:(NSString *)mapping factory:(CnmeshInstanceFactory<id> *)factory logWarning:(BOOL)logWarning __attribute__((swift_name("saveMapping(allowOverride:mapping:factory:logWarning:)")));
- (int32_t)size __attribute__((swift_name("size()")));
@property (readonly) CnmeshKoin *_koin __attribute__((swift_name("_koin")));
@property (readonly) NSDictionary<NSString *, CnmeshInstanceFactory<id> *> *instances __attribute__((swift_name("instances")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PropertyRegistry")))
@interface CnmeshPropertyRegistry : CnmeshBase
- (instancetype)initWith_koin:(CnmeshKoin *)_koin __attribute__((swift_name("init(_koin:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));
- (void)deletePropertyKey:(NSString *)key __attribute__((swift_name("deleteProperty(key:)")));
- (id _Nullable)getPropertyKey:(NSString *)key __attribute__((swift_name("getProperty(key:)")));
- (void)savePropertiesProperties:(NSDictionary<NSString *, id> *)properties __attribute__((swift_name("saveProperties(properties:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ScopeRegistry")))
@interface CnmeshScopeRegistry : CnmeshBase
- (instancetype)initWith_koin:(CnmeshKoin *)_koin __attribute__((swift_name("init(_koin:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshScopeRegistryCompanion *companion __attribute__((swift_name("companion")));
- (void)loadScopesModules:(NSSet<CnmeshModule *> *)modules __attribute__((swift_name("loadScopes(modules:)")));
@property (readonly) CnmeshScope *rootScope __attribute__((swift_name("rootScope")));
@property (readonly) NSSet<id<CnmeshQualifier>> *scopeDefinitions __attribute__((swift_name("scopeDefinitions")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ScopeRegistry.Companion")))
@interface CnmeshScopeRegistryCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshScopeRegistryCompanion *shared __attribute__((swift_name("shared")));
@end;

__attribute__((swift_name("KoinComponent")))
@protocol CnmeshKoinComponent
@required
- (CnmeshKoin *)getKoin __attribute__((swift_name("getKoin()")));
@end;

__attribute__((swift_name("KoinScopeComponent")))
@protocol CnmeshKoinScopeComponent <CnmeshKoinComponent>
@required
- (void)closeScope __attribute__((swift_name("closeScope()")));
@property (readonly) CnmeshScope *scope __attribute__((swift_name("scope")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Module")))
@interface CnmeshModule : CnmeshBase
- (instancetype)initWith_createdAtStart:(BOOL)_createdAtStart __attribute__((swift_name("init(_createdAtStart:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryQualifier:(id<CnmeshQualifier> _Nullable)qualifier definition:(id _Nullable (^)(CnmeshScope *, CnmeshParametersHolder *))definition __attribute__((swift_name("factory(qualifier:definition:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (void)includesModule:(CnmeshKotlinArray<CnmeshModule *> *)module __attribute__((swift_name("includes(module:)")));
- (void)includesModule_:(NSArray<CnmeshModule *> *)module __attribute__((swift_name("includes(module_:)")));
- (NSArray<CnmeshModule *> *)plusModules:(NSArray<CnmeshModule *> *)modules __attribute__((swift_name("plus(modules:)")));
- (NSArray<CnmeshModule *> *)plusModule:(CnmeshModule *)module __attribute__((swift_name("plus(module:)")));
- (void)scopeQualifier:(id<CnmeshQualifier>)qualifier scopeSet:(void (^)(CnmeshScopeDSL *))scopeSet __attribute__((swift_name("scope(qualifier:scopeSet:)")));
- (void)scopeScopeSet:(void (^)(CnmeshScopeDSL *))scopeSet __attribute__((swift_name("scope(scopeSet:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleQualifier:(id<CnmeshQualifier> _Nullable)qualifier createdAtStart:(BOOL)createdAtStart definition:(id _Nullable (^)(CnmeshScope *, CnmeshParametersHolder *))definition __attribute__((swift_name("single(qualifier:createdAtStart:definition:)")));
@property (readonly) CnmeshMutableSet<CnmeshSingleInstanceFactory<id> *> *eagerInstances __attribute__((swift_name("eagerInstances")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) BOOL isLoaded __attribute__((swift_name("isLoaded")));
@end;

__attribute__((swift_name("Qualifier")))
@protocol CnmeshQualifier
@required
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StringQualifier")))
@interface CnmeshStringQualifier : CnmeshBase <CnmeshQualifier>
- (instancetype)initWithValue:(NSString *)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshStringQualifier *)doCopyValue:(NSString *)value __attribute__((swift_name("doCopy(value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TypeQualifier")))
@interface CnmeshTypeQualifier : CnmeshBase <CnmeshQualifier>
- (instancetype)initWithType:(id<CnmeshKotlinKClass>)type __attribute__((swift_name("init(type:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<CnmeshKotlinKClass> type __attribute__((swift_name("type")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BrokenDefinitionException")))
@interface CnmeshBrokenDefinitionException : CnmeshKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClosedScopeException")))
@interface CnmeshClosedScopeException : CnmeshKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefinitionOverrideException")))
@interface CnmeshDefinitionOverrideException : CnmeshKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefinitionParameterException")))
@interface CnmeshDefinitionParameterException : CnmeshKotlinException
- (instancetype)initWithStr:(NSString *)str __attribute__((swift_name("init(str:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InstanceCreationException")))
@interface CnmeshInstanceCreationException : CnmeshKotlinException
- (instancetype)initWithMsg:(NSString *)msg parent:(CnmeshKotlinException *)parent __attribute__((swift_name("init(msg:parent:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinAppAlreadyStartedException")))
@interface CnmeshKoinAppAlreadyStartedException : CnmeshKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MissingPropertyException")))
@interface CnmeshMissingPropertyException : CnmeshKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NoBeanDefFoundException")))
@interface CnmeshNoBeanDefFoundException : CnmeshKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NoParameterFoundException")))
@interface CnmeshNoParameterFoundException : CnmeshKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NoPropertyFileFoundException")))
@interface CnmeshNoPropertyFileFoundException : CnmeshKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NoScopeDefFoundException")))
@interface CnmeshNoScopeDefFoundException : CnmeshKotlinException
- (instancetype)initWithS:(NSString *)s __attribute__((swift_name("init(s:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ScopeAlreadyCreatedException")))
@interface CnmeshScopeAlreadyCreatedException : CnmeshKotlinException
- (instancetype)initWithS:(NSString *)s __attribute__((swift_name("init(s:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ScopeNotCreatedException")))
@interface CnmeshScopeNotCreatedException : CnmeshKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BeanDefinition")))
@interface CnmeshBeanDefinition<T> : CnmeshBase
- (instancetype)initWithScopeQualifier:(id<CnmeshQualifier>)scopeQualifier primaryType:(id<CnmeshKotlinKClass>)primaryType qualifier:(id<CnmeshQualifier> _Nullable)qualifier definition:(T _Nullable (^)(CnmeshScope *, CnmeshParametersHolder *))definition kind:(CnmeshKind *)kind secondaryTypes:(NSArray<id<CnmeshKotlinKClass>> *)secondaryTypes __attribute__((swift_name("init(scopeQualifier:primaryType:qualifier:definition:kind:secondaryTypes:)"))) __attribute__((objc_designated_initializer));
- (id<CnmeshQualifier>)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (id<CnmeshKotlinKClass>)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (id<CnmeshQualifier> _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (T _Nullable (^)(CnmeshScope *, CnmeshParametersHolder *))component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKind *)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSArray<id<CnmeshKotlinKClass>> *)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshBeanDefinition<T> *)doCopyScopeQualifier:(id<CnmeshQualifier>)scopeQualifier primaryType:(id<CnmeshKotlinKClass>)primaryType qualifier:(id<CnmeshQualifier> _Nullable)qualifier definition:(T _Nullable (^)(CnmeshScope *, CnmeshParametersHolder *))definition kind:(CnmeshKind *)kind secondaryTypes:(NSArray<id<CnmeshKotlinKClass>> *)secondaryTypes __attribute__((swift_name("doCopy(scopeQualifier:primaryType:qualifier:definition:kind:secondaryTypes:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (BOOL)hasTypeClazz:(id<CnmeshKotlinKClass>)clazz __attribute__((swift_name("hasType(clazz:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isClazz:(id<CnmeshKotlinKClass>)clazz qualifier:(id<CnmeshQualifier> _Nullable)qualifier scopeDefinition:(id<CnmeshQualifier>)scopeDefinition __attribute__((swift_name("is(clazz:qualifier:scopeDefinition:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property CnmeshCallbacks<T> *callbacks __attribute__((swift_name("callbacks")));
@property (readonly) T _Nullable (^definition)(CnmeshScope *, CnmeshParametersHolder *) __attribute__((swift_name("definition")));
@property (readonly) CnmeshKind *kind __attribute__((swift_name("kind")));
@property (readonly) id<CnmeshKotlinKClass> primaryType __attribute__((swift_name("primaryType")));
@property id<CnmeshQualifier> _Nullable qualifier __attribute__((swift_name("qualifier")));
@property (readonly) id<CnmeshQualifier> scopeQualifier __attribute__((swift_name("scopeQualifier")));
@property NSArray<id<CnmeshKotlinKClass>> *secondaryTypes __attribute__((swift_name("secondaryTypes")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Callbacks")))
@interface CnmeshCallbacks<T> : CnmeshBase
- (instancetype)initWithOnClose:(void (^ _Nullable)(T _Nullable))onClose __attribute__((swift_name("init(onClose:)"))) __attribute__((objc_designated_initializer));
- (void (^ _Nullable)(T _Nullable))component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCallbacks<T> *)doCopyOnClose:(void (^ _Nullable)(T _Nullable))onClose __attribute__((swift_name("doCopy(onClose:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) void (^ _Nullable onClose)(T _Nullable) __attribute__((swift_name("onClose")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kind")))
@interface CnmeshKind : CnmeshKotlinEnum<CnmeshKind *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) CnmeshKind *singleton __attribute__((swift_name("singleton")));
@property (class, readonly) CnmeshKind *factory __attribute__((swift_name("factory")));
@property (class, readonly) CnmeshKind *scoped __attribute__((swift_name("scoped")));
+ (CnmeshKotlinArray<CnmeshKind *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("InstanceFactory")))
@interface CnmeshInstanceFactory<T> : CnmeshLockable
- (instancetype)initWithBeanDefinition:(CnmeshBeanDefinition<T> *)beanDefinition __attribute__((swift_name("init(beanDefinition:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (class, readonly, getter=companion) CnmeshInstanceFactoryCompanion *companion __attribute__((swift_name("companion")));
- (T _Nullable)createContext:(CnmeshInstanceContext *)context __attribute__((swift_name("create(context:)")));
- (void)dropScope:(CnmeshScope * _Nullable)scope __attribute__((swift_name("drop(scope:)")));
- (void)dropAll __attribute__((swift_name("dropAll()")));
- (T _Nullable)getContext:(CnmeshInstanceContext *)context __attribute__((swift_name("get(context:)")));
- (BOOL)isCreatedContext:(CnmeshInstanceContext * _Nullable)context __attribute__((swift_name("isCreated(context:)")));
@property (readonly) CnmeshBeanDefinition<T> *beanDefinition __attribute__((swift_name("beanDefinition")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FactoryInstanceFactory")))
@interface CnmeshFactoryInstanceFactory<T> : CnmeshInstanceFactory<T>
- (instancetype)initWithBeanDefinition:(CnmeshBeanDefinition<T> *)beanDefinition __attribute__((swift_name("init(beanDefinition:)"))) __attribute__((objc_designated_initializer));
- (void)dropScope:(CnmeshScope * _Nullable)scope __attribute__((swift_name("drop(scope:)")));
- (void)dropAll __attribute__((swift_name("dropAll()")));
- (T _Nullable)getContext:(CnmeshInstanceContext *)context __attribute__((swift_name("get(context:)")));
- (BOOL)isCreatedContext:(CnmeshInstanceContext * _Nullable)context __attribute__((swift_name("isCreated(context:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InstanceContext")))
@interface CnmeshInstanceContext : CnmeshBase
- (instancetype)initWithKoin:(CnmeshKoin *)koin scope:(CnmeshScope *)scope parameters:(CnmeshParametersHolder * _Nullable)parameters __attribute__((swift_name("init(koin:scope:parameters:)"))) __attribute__((objc_designated_initializer));
@property (readonly) CnmeshKoin *koin __attribute__((swift_name("koin")));
@property (readonly) CnmeshParametersHolder * _Nullable parameters __attribute__((swift_name("parameters")));
@property (readonly) CnmeshScope *scope __attribute__((swift_name("scope")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InstanceFactoryCompanion")))
@interface CnmeshInstanceFactoryCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshInstanceFactoryCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *ERROR_SEPARATOR __attribute__((swift_name("ERROR_SEPARATOR")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ScopedInstanceFactory")))
@interface CnmeshScopedInstanceFactory<T> : CnmeshInstanceFactory<T>
- (instancetype)initWithBeanDefinition:(CnmeshBeanDefinition<T> *)beanDefinition __attribute__((swift_name("init(beanDefinition:)"))) __attribute__((objc_designated_initializer));
- (T _Nullable)createContext:(CnmeshInstanceContext *)context __attribute__((swift_name("create(context:)")));
- (void)dropScope:(CnmeshScope * _Nullable)scope __attribute__((swift_name("drop(scope:)")));
- (void)dropAll __attribute__((swift_name("dropAll()")));
- (T _Nullable)getContext:(CnmeshInstanceContext *)context __attribute__((swift_name("get(context:)")));
- (BOOL)isCreatedContext:(CnmeshInstanceContext * _Nullable)context __attribute__((swift_name("isCreated(context:)")));
- (void)refreshInstanceScopeID:(NSString *)scopeID instance:(id)instance __attribute__((swift_name("refreshInstance(scopeID:instance:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SingleInstanceFactory")))
@interface CnmeshSingleInstanceFactory<T> : CnmeshInstanceFactory<T>
- (instancetype)initWithBeanDefinition:(CnmeshBeanDefinition<T> *)beanDefinition __attribute__((swift_name("init(beanDefinition:)"))) __attribute__((objc_designated_initializer));
- (T _Nullable)createContext:(CnmeshInstanceContext *)context __attribute__((swift_name("create(context:)")));
- (void)dropScope:(CnmeshScope * _Nullable)scope __attribute__((swift_name("drop(scope:)")));
- (void)dropAll __attribute__((swift_name("dropAll()")));
- (T _Nullable)getContext:(CnmeshInstanceContext *)context __attribute__((swift_name("get(context:)")));
- (BOOL)isCreatedContext:(CnmeshInstanceContext * _Nullable)context __attribute__((swift_name("isCreated(context:)")));
@end;

__attribute__((swift_name("Logger_")))
@interface CnmeshLogger : CnmeshBase
- (instancetype)initWithLevel:(CnmeshLevel *)level __attribute__((swift_name("init(level:)"))) __attribute__((objc_designated_initializer));
- (void)debugMsg:(NSString *)msg __attribute__((swift_name("debug(msg:)")));
- (void)errorMsg:(NSString *)msg __attribute__((swift_name("error(msg:)")));
- (void)infoMsg:(NSString *)msg __attribute__((swift_name("info(msg:)")));
- (BOOL)isAtLvl:(CnmeshLevel *)lvl __attribute__((swift_name("isAt(lvl:)")));
- (void)logLvl:(CnmeshLevel *)lvl msg:(NSString *(^)(void))msg __attribute__((swift_name("log(lvl:msg:)")));
- (void)logLevel:(CnmeshLevel *)level msg:(NSString *)msg __attribute__((swift_name("log(level:msg:)")));
@property CnmeshLevel *level __attribute__((swift_name("level")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EmptyLogger")))
@interface CnmeshEmptyLogger : CnmeshLogger
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithLevel:(CnmeshLevel *)level __attribute__((swift_name("init(level:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (void)logLevel:(CnmeshLevel *)level msg:(NSString *)msg __attribute__((swift_name("log(level:msg:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Level")))
@interface CnmeshLevel : CnmeshKotlinEnum<CnmeshLevel *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) CnmeshLevel *debug __attribute__((swift_name("debug")));
@property (class, readonly) CnmeshLevel *info __attribute__((swift_name("info")));
@property (class, readonly) CnmeshLevel *error __attribute__((swift_name("error")));
@property (class, readonly) CnmeshLevel *none __attribute__((swift_name("none")));
+ (CnmeshKotlinArray<CnmeshLevel *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrintLogger")))
@interface CnmeshPrintLogger : CnmeshLogger
- (instancetype)initWithLevel:(CnmeshLevel *)level __attribute__((swift_name("init(level:)"))) __attribute__((objc_designated_initializer));
- (void)logLevel:(CnmeshLevel *)level msg:(NSString *)msg __attribute__((swift_name("log(level:msg:)")));
@end;

__attribute__((swift_name("ParametersHolder")))
@interface CnmeshParametersHolder : CnmeshBase
- (instancetype)initWith_values:(NSMutableArray<id> *)_values __attribute__((swift_name("init(_values:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshParametersHolderCompanion *companion __attribute__((swift_name("companion")));
- (CnmeshParametersHolder *)addValue:(id)value __attribute__((swift_name("add(value:)")));
- (id _Nullable)component1 __attribute__((swift_name("component1()")));
- (id _Nullable)component2 __attribute__((swift_name("component2()")));
- (id _Nullable)component3 __attribute__((swift_name("component3()")));
- (id _Nullable)component4 __attribute__((swift_name("component4()")));
- (id _Nullable)component5 __attribute__((swift_name("component5()")));
- (id _Nullable)elementAtI:(int32_t)i clazz:(id<CnmeshKotlinKClass>)clazz __attribute__((swift_name("elementAt(i:clazz:)")));
- (id)get __attribute__((swift_name("get()")));
- (id _Nullable)getI:(int32_t)i __attribute__((swift_name("get(i:)")));
- (id _Nullable)getOrNull __attribute__((swift_name("getOrNull()")));
- (id _Nullable)getOrNullClazz:(id<CnmeshKotlinKClass>)clazz __attribute__((swift_name("getOrNull(clazz:)")));
- (CnmeshParametersHolder *)insertIndex:(int32_t)index value:(id)value __attribute__((swift_name("insert(index:value:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (BOOL)isNotEmpty __attribute__((swift_name("isNotEmpty()")));
- (void)setI:(int32_t)i t:(id _Nullable)t __attribute__((swift_name("set(i:t:)")));
- (int32_t)size_ __attribute__((swift_name("size()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<id> *values __attribute__((swift_name("values")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParametersHolder.Companion")))
@interface CnmeshParametersHolderCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshParametersHolderCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) int32_t MAX_PARAMS __attribute__((swift_name("MAX_PARAMS")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinPlatformTimeTools")))
@interface CnmeshKoinPlatformTimeTools : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)koinPlatformTimeTools __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKoinPlatformTimeTools *shared __attribute__((swift_name("shared")));
- (int64_t)getTimeInNanoSeconds __attribute__((swift_name("getTimeInNanoSeconds()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinPlatformTools")))
@interface CnmeshKoinPlatformTools : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)koinPlatformTools __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKoinPlatformTools *shared __attribute__((swift_name("shared")));
- (id<CnmeshKoinContext>)defaultContext __attribute__((swift_name("defaultContext()")));
- (CnmeshKotlinLazyThreadSafetyMode *)defaultLazyMode __attribute__((swift_name("defaultLazyMode()")));
- (CnmeshLogger *)defaultLoggerLevel:(CnmeshLevel *)level __attribute__((swift_name("defaultLogger(level:)")));
- (NSString *)generateId __attribute__((swift_name("generateId()")));
- (NSString *)getClassNameKClass:(id<CnmeshKotlinKClass>)kClass __attribute__((swift_name("getClassName(kClass:)")));
- (NSString *)getStackTraceE:(CnmeshKotlinException *)e __attribute__((swift_name("getStackTrace(e:)")));
- (CnmeshMutableDictionary<id, id> *)safeHashMap __attribute__((swift_name("safeHashMap()")));
- (id _Nullable)synchronizedLock:(CnmeshLockable *)lock block:(id _Nullable (^)(void))block __attribute__((swift_name("synchronized(lock:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainThreadValue")))
@interface CnmeshMainThreadValue<T> : CnmeshBase
- (instancetype)initWithStartVal:(T)startVal __attribute__((swift_name("init(startVal:)"))) __attribute__((objc_designated_initializer));
- (T)get __attribute__((swift_name("get()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ScopeDSL")))
@interface CnmeshScopeDSL : CnmeshBase
- (instancetype)initWithScopeQualifier:(id<CnmeshQualifier>)scopeQualifier module:(CnmeshModule *)module __attribute__((swift_name("init(scopeQualifier:module:)"))) __attribute__((objc_designated_initializer));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryQualifier:(id<CnmeshQualifier> _Nullable)qualifier definition:(id _Nullable (^)(CnmeshScope *, CnmeshParametersHolder *))definition __attribute__((swift_name("factory(qualifier:definition:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedQualifier:(id<CnmeshQualifier> _Nullable)qualifier definition:(id _Nullable (^)(CnmeshScope *, CnmeshParametersHolder *))definition __attribute__((swift_name("scoped(qualifier:definition:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleQualifier:(id<CnmeshQualifier> _Nullable)qualifier definition:(id _Nullable (^)(CnmeshScope *, CnmeshParametersHolder *))definition __attribute__((swift_name("single(qualifier:definition:)"))) __attribute__((unavailable("Can't use Single in a scope. Use Scoped instead")));
@property (readonly) CnmeshModule *module __attribute__((swift_name("module")));
@property (readonly) id<CnmeshQualifier> scopeQualifier __attribute__((swift_name("scopeQualifier")));
@end;

__attribute__((swift_name("Clock")))
@protocol CnmeshClock
@required
- (CnmeshInstant *)now __attribute__((swift_name("now()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClockCompanion")))
@interface CnmeshClockCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshClockCompanion *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClockSystem")))
@interface CnmeshClockSystem : CnmeshBase <CnmeshClock>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)system __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshClockSystem *shared __attribute__((swift_name("shared")));
- (CnmeshInstant *)now __attribute__((swift_name("now()")));
@end;

__attribute__((swift_name("DateTimePeriod")))
@interface CnmeshDateTimePeriod : CnmeshBase
@property (class, readonly, getter=companion) CnmeshDateTimePeriodCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t days __attribute__((swift_name("days")));
@property (readonly) int32_t hours __attribute__((swift_name("hours")));
@property (readonly) int32_t minutes __attribute__((swift_name("minutes")));
@property (readonly) int32_t months __attribute__((swift_name("months")));
@property (readonly) int32_t nanoseconds __attribute__((swift_name("nanoseconds")));
@property (readonly) int32_t seconds __attribute__((swift_name("seconds")));
@property (readonly) int32_t years __attribute__((swift_name("years")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatePeriod")))
@interface CnmeshDatePeriod : CnmeshDateTimePeriod
- (instancetype)initWithYears:(int32_t)years months:(int32_t)months days:(int32_t)days __attribute__((swift_name("init(years:months:days:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshDatePeriodCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) int32_t days __attribute__((swift_name("days")));
@property (readonly) int32_t hours __attribute__((swift_name("hours")));
@property (readonly) int32_t minutes __attribute__((swift_name("minutes")));
@property (readonly) int32_t nanoseconds __attribute__((swift_name("nanoseconds")));
@property (readonly) int32_t seconds __attribute__((swift_name("seconds")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatePeriod.Companion")))
@interface CnmeshDatePeriodCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDatePeriodCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshDatePeriod *)parseText:(NSString *)text __attribute__((swift_name("parse(text:)")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeArithmeticException")))
@interface CnmeshDateTimeArithmeticException : CnmeshKotlinRuntimeException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(CnmeshKotlinThrowable *)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message cause:(CnmeshKotlinThrowable *)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimePeriod.Companion")))
@interface CnmeshDateTimePeriodCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDateTimePeriodCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshDateTimePeriod *)parseText:(NSString *)text __attribute__((swift_name("parse(text:)")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((swift_name("DateTimeUnit")))
@interface CnmeshDateTimeUnit : CnmeshBase
@property (class, readonly, getter=companion) CnmeshDateTimeUnitCompanion *companion __attribute__((swift_name("companion")));
- (NSString *)formatToStringValue:(int32_t)value unit:(NSString *)unit __attribute__((swift_name("formatToString(value:unit:)")));
- (NSString *)formatToStringValue:(int64_t)value unit_:(NSString *)unit __attribute__((swift_name("formatToString(value:unit_:)")));
- (CnmeshDateTimeUnit *)timesScalar:(int32_t)scalar __attribute__((swift_name("times(scalar:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnit.Companion")))
@interface CnmeshDateTimeUnitCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDateTimeUnitCompanion *shared __attribute__((swift_name("shared")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@property (readonly) CnmeshDateTimeUnitMonthBased *CENTURY __attribute__((swift_name("CENTURY")));
@property (readonly) CnmeshDateTimeUnitDayBased *DAY __attribute__((swift_name("DAY")));
@property (readonly) CnmeshDateTimeUnitTimeBased *HOUR __attribute__((swift_name("HOUR")));
@property (readonly) CnmeshDateTimeUnitTimeBased *MICROSECOND __attribute__((swift_name("MICROSECOND")));
@property (readonly) CnmeshDateTimeUnitTimeBased *MILLISECOND __attribute__((swift_name("MILLISECOND")));
@property (readonly) CnmeshDateTimeUnitTimeBased *MINUTE __attribute__((swift_name("MINUTE")));
@property (readonly) CnmeshDateTimeUnitMonthBased *MONTH __attribute__((swift_name("MONTH")));
@property (readonly) CnmeshDateTimeUnitTimeBased *NANOSECOND __attribute__((swift_name("NANOSECOND")));
@property (readonly) CnmeshDateTimeUnitMonthBased *QUARTER __attribute__((swift_name("QUARTER")));
@property (readonly) CnmeshDateTimeUnitTimeBased *SECOND __attribute__((swift_name("SECOND")));
@property (readonly) CnmeshDateTimeUnitDayBased *WEEK __attribute__((swift_name("WEEK")));
@property (readonly) CnmeshDateTimeUnitMonthBased *YEAR __attribute__((swift_name("YEAR")));
@end;

__attribute__((swift_name("DateTimeUnit.DateBased")))
@interface CnmeshDateTimeUnitDateBased : CnmeshDateTimeUnit
@property (class, readonly, getter=companion) CnmeshDateTimeUnitDateBasedCompanion *companion __attribute__((swift_name("companion")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnit.DateBasedCompanion")))
@interface CnmeshDateTimeUnitDateBasedCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDateTimeUnitDateBasedCompanion *shared __attribute__((swift_name("shared")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnit.DayBased")))
@interface CnmeshDateTimeUnitDayBased : CnmeshDateTimeUnitDateBased
- (instancetype)initWithDays:(int32_t)days __attribute__((swift_name("init(days:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshDateTimeUnitDayBasedCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (CnmeshDateTimeUnitDayBased *)timesScalar:(int32_t)scalar __attribute__((swift_name("times(scalar:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t days __attribute__((swift_name("days")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnit.DayBasedCompanion")))
@interface CnmeshDateTimeUnitDayBasedCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDateTimeUnitDayBasedCompanion *shared __attribute__((swift_name("shared")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnit.MonthBased")))
@interface CnmeshDateTimeUnitMonthBased : CnmeshDateTimeUnitDateBased
- (instancetype)initWithMonths:(int32_t)months __attribute__((swift_name("init(months:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshDateTimeUnitMonthBasedCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (CnmeshDateTimeUnitMonthBased *)timesScalar:(int32_t)scalar __attribute__((swift_name("times(scalar:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t months __attribute__((swift_name("months")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnit.MonthBasedCompanion")))
@interface CnmeshDateTimeUnitMonthBasedCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDateTimeUnitMonthBasedCompanion *shared __attribute__((swift_name("shared")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnit.TimeBased")))
@interface CnmeshDateTimeUnitTimeBased : CnmeshDateTimeUnit
- (instancetype)initWithNanoseconds:(int64_t)nanoseconds __attribute__((swift_name("init(nanoseconds:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshDateTimeUnitTimeBasedCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (CnmeshDateTimeUnitTimeBased *)timesScalar:(int32_t)scalar __attribute__((swift_name("times(scalar:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t duration __attribute__((swift_name("duration")));
@property (readonly) int64_t nanoseconds __attribute__((swift_name("nanoseconds")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnit.TimeBasedCompanion")))
@interface CnmeshDateTimeUnitTimeBasedCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDateTimeUnitTimeBasedCompanion *shared __attribute__((swift_name("shared")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DayOfWeek")))
@interface CnmeshDayOfWeek : CnmeshKotlinEnum<CnmeshDayOfWeek *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) CnmeshDayOfWeek *monday __attribute__((swift_name("monday")));
@property (class, readonly) CnmeshDayOfWeek *tuesday __attribute__((swift_name("tuesday")));
@property (class, readonly) CnmeshDayOfWeek *wednesday __attribute__((swift_name("wednesday")));
@property (class, readonly) CnmeshDayOfWeek *thursday __attribute__((swift_name("thursday")));
@property (class, readonly) CnmeshDayOfWeek *friday __attribute__((swift_name("friday")));
@property (class, readonly) CnmeshDayOfWeek *saturday __attribute__((swift_name("saturday")));
@property (class, readonly) CnmeshDayOfWeek *sunday __attribute__((swift_name("sunday")));
+ (CnmeshKotlinArray<CnmeshDayOfWeek *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("TimeZone")))
@interface CnmeshTimeZone : CnmeshBase
@property (class, readonly, getter=companion) CnmeshTimeZoneCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
- (CnmeshInstant *)toInstant:(CnmeshLocalDateTime *)receiver __attribute__((swift_name("toInstant(_:)")));
- (CnmeshLocalDateTime *)toLocalDateTime:(CnmeshInstant *)receiver __attribute__((swift_name("toLocalDateTime(_:)")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FixedOffsetTimeZone")))
@interface CnmeshFixedOffsetTimeZone : CnmeshTimeZone
- (instancetype)initWithOffset:(CnmeshUtcOffset *)offset __attribute__((swift_name("init(offset:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshFixedOffsetTimeZoneCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) CnmeshUtcOffset *offset __attribute__((swift_name("offset")));
@property (readonly) int32_t totalSeconds __attribute__((swift_name("totalSeconds"))) __attribute__((deprecated("Use offset.totalSeconds")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FixedOffsetTimeZone.Companion")))
@interface CnmeshFixedOffsetTimeZoneCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshFixedOffsetTimeZoneCompanion *shared __attribute__((swift_name("shared")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IllegalTimeZoneException")))
@interface CnmeshIllegalTimeZoneException : CnmeshKotlinIllegalArgumentException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(CnmeshKotlinThrowable *)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message cause:(CnmeshKotlinThrowable *)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Instant")))
@interface CnmeshInstant : CnmeshBase <CnmeshKotlinComparable>
@property (class, readonly, getter=companion) CnmeshInstantCompanion *companion __attribute__((swift_name("companion")));
- (int32_t)compareToOther:(CnmeshInstant *)other __attribute__((swift_name("compareTo(other:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (CnmeshInstant *)minusDuration:(int64_t)duration __attribute__((swift_name("minus(duration:)")));
- (int64_t)minusOther:(CnmeshInstant *)other __attribute__((swift_name("minus(other:)")));
- (CnmeshInstant *)plusDuration:(int64_t)duration __attribute__((swift_name("plus(duration:)")));
- (int64_t)toEpochMilliseconds __attribute__((swift_name("toEpochMilliseconds()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t epochSeconds __attribute__((swift_name("epochSeconds")));
@property (readonly) int32_t nanosecondsOfSecond __attribute__((swift_name("nanosecondsOfSecond")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Instant.Companion")))
@interface CnmeshInstantCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshInstantCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshInstant *)fromEpochMillisecondsEpochMilliseconds:(int64_t)epochMilliseconds __attribute__((swift_name("fromEpochMilliseconds(epochMilliseconds:)")));
- (CnmeshInstant *)fromEpochSecondsEpochSeconds:(int64_t)epochSeconds nanosecondAdjustment:(int32_t)nanosecondAdjustment __attribute__((swift_name("fromEpochSeconds(epochSeconds:nanosecondAdjustment:)")));
- (CnmeshInstant *)fromEpochSecondsEpochSeconds:(int64_t)epochSeconds nanosecondAdjustment_:(int64_t)nanosecondAdjustment __attribute__((swift_name("fromEpochSeconds(epochSeconds:nanosecondAdjustment_:)")));
- (CnmeshInstant *)now __attribute__((swift_name("now()"))) __attribute__((unavailable("Use Clock.System.now() instead")));
- (CnmeshInstant *)parseIsoString:(NSString *)isoString __attribute__((swift_name("parse(isoString:)")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@property (readonly) CnmeshInstant *DISTANT_FUTURE __attribute__((swift_name("DISTANT_FUTURE")));
@property (readonly) CnmeshInstant *DISTANT_PAST __attribute__((swift_name("DISTANT_PAST")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDate")))
@interface CnmeshLocalDate : CnmeshBase <CnmeshKotlinComparable>
- (instancetype)initWithYear:(int32_t)year month:(CnmeshMonth *)month dayOfMonth:(int32_t)dayOfMonth __attribute__((swift_name("init(year:month:dayOfMonth:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithYear:(int32_t)year monthNumber:(int32_t)monthNumber dayOfMonth:(int32_t)dayOfMonth __attribute__((swift_name("init(year:monthNumber:dayOfMonth:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshLocalDateCompanion *companion __attribute__((swift_name("companion")));
- (int32_t)compareToOther:(CnmeshLocalDate *)other __attribute__((swift_name("compareTo(other:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t dayOfMonth __attribute__((swift_name("dayOfMonth")));
@property (readonly) CnmeshDayOfWeek *dayOfWeek __attribute__((swift_name("dayOfWeek")));
@property (readonly) int32_t dayOfYear __attribute__((swift_name("dayOfYear")));
@property (readonly) CnmeshMonth *month __attribute__((swift_name("month")));
@property (readonly) int32_t monthNumber __attribute__((swift_name("monthNumber")));
@property (readonly) int32_t year __attribute__((swift_name("year")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDate.Companion")))
@interface CnmeshLocalDateCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshLocalDateCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshLocalDate *)parseIsoString:(NSString *)isoString __attribute__((swift_name("parse(isoString:)")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDateTime")))
@interface CnmeshLocalDateTime : CnmeshBase <CnmeshKotlinComparable>
- (instancetype)initWithYear:(int32_t)year monthNumber:(int32_t)monthNumber dayOfMonth:(int32_t)dayOfMonth hour:(int32_t)hour minute:(int32_t)minute second:(int32_t)second nanosecond:(int32_t)nanosecond __attribute__((swift_name("init(year:monthNumber:dayOfMonth:hour:minute:second:nanosecond:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithYear:(int32_t)year month:(CnmeshMonth *)month dayOfMonth:(int32_t)dayOfMonth hour:(int32_t)hour minute:(int32_t)minute second:(int32_t)second nanosecond:(int32_t)nanosecond __attribute__((swift_name("init(year:month:dayOfMonth:hour:minute:second:nanosecond:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshLocalDateTimeCompanion *companion __attribute__((swift_name("companion")));
- (int32_t)compareToOther:(CnmeshLocalDateTime *)other __attribute__((swift_name("compareTo(other:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshLocalDate *date __attribute__((swift_name("date")));
@property (readonly) int32_t dayOfMonth __attribute__((swift_name("dayOfMonth")));
@property (readonly) CnmeshDayOfWeek *dayOfWeek __attribute__((swift_name("dayOfWeek")));
@property (readonly) int32_t dayOfYear __attribute__((swift_name("dayOfYear")));
@property (readonly) int32_t hour __attribute__((swift_name("hour")));
@property (readonly) int32_t minute __attribute__((swift_name("minute")));
@property (readonly) CnmeshMonth *month __attribute__((swift_name("month")));
@property (readonly) int32_t monthNumber __attribute__((swift_name("monthNumber")));
@property (readonly) int32_t nanosecond __attribute__((swift_name("nanosecond")));
@property (readonly) int32_t second __attribute__((swift_name("second")));
@property (readonly) int32_t year __attribute__((swift_name("year")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDateTime.Companion")))
@interface CnmeshLocalDateTimeCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshLocalDateTimeCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshLocalDateTime *)parseIsoString:(NSString *)isoString __attribute__((swift_name("parse(isoString:)")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Month")))
@interface CnmeshMonth : CnmeshKotlinEnum<CnmeshMonth *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) CnmeshMonth *january __attribute__((swift_name("january")));
@property (class, readonly) CnmeshMonth *february __attribute__((swift_name("february")));
@property (class, readonly) CnmeshMonth *march __attribute__((swift_name("march")));
@property (class, readonly) CnmeshMonth *april __attribute__((swift_name("april")));
@property (class, readonly) CnmeshMonth *may __attribute__((swift_name("may")));
@property (class, readonly) CnmeshMonth *june __attribute__((swift_name("june")));
@property (class, readonly) CnmeshMonth *july __attribute__((swift_name("july")));
@property (class, readonly) CnmeshMonth *august __attribute__((swift_name("august")));
@property (class, readonly) CnmeshMonth *september __attribute__((swift_name("september")));
@property (class, readonly) CnmeshMonth *october __attribute__((swift_name("october")));
@property (class, readonly) CnmeshMonth *november __attribute__((swift_name("november")));
@property (class, readonly) CnmeshMonth *december __attribute__((swift_name("december")));
+ (CnmeshKotlinArray<CnmeshMonth *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeZone.Companion")))
@interface CnmeshTimeZoneCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshTimeZoneCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshTimeZone *)currentSystemDefault __attribute__((swift_name("currentSystemDefault()")));
- (CnmeshTimeZone *)ofZoneId:(NSString *)zoneId __attribute__((swift_name("of(zoneId:)")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@property (readonly) CnmeshFixedOffsetTimeZone *UTC __attribute__((swift_name("UTC")));
@property (readonly) NSSet<NSString *> *availableZoneIds __attribute__((swift_name("availableZoneIds")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UtcOffset")))
@interface CnmeshUtcOffset : CnmeshBase
@property (class, readonly, getter=companion) CnmeshUtcOffsetCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t totalSeconds __attribute__((swift_name("totalSeconds")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UtcOffset.Companion")))
@interface CnmeshUtcOffsetCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshUtcOffsetCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshUtcOffset *)parseOffsetString:(NSString *)offsetString __attribute__((swift_name("parse(offsetString:)")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@property (readonly) CnmeshUtcOffset *ZERO __attribute__((swift_name("ZERO")));
@end;

__attribute__((swift_name("Kotlinx_serialization_coreSerializationStrategy")))
@protocol CnmeshKotlinx_serialization_coreSerializationStrategy
@required
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(id _Nullable)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((swift_name("Kotlinx_serialization_coreDeserializationStrategy")))
@protocol CnmeshKotlinx_serialization_coreDeserializationStrategy
@required
- (id _Nullable)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((swift_name("Kotlinx_serialization_coreKSerializer")))
@protocol CnmeshKotlinx_serialization_coreKSerializer <CnmeshKotlinx_serialization_coreSerializationStrategy, CnmeshKotlinx_serialization_coreDeserializationStrategy>
@required
@end;

__attribute__((swift_name("Kotlinx_serialization_coreAbstractPolymorphicSerializer")))
@interface CnmeshKotlinx_serialization_coreAbstractPolymorphicSerializer<T> : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
- (T)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (id<CnmeshKotlinx_serialization_coreDeserializationStrategy> _Nullable)findPolymorphicSerializerOrNullDecoder:(id<CnmeshKotlinx_serialization_coreCompositeDecoder>)decoder klassName:(NSString * _Nullable)klassName __attribute__((swift_name("findPolymorphicSerializerOrNull(decoder:klassName:)")));
- (id<CnmeshKotlinx_serialization_coreSerializationStrategy> _Nullable)findPolymorphicSerializerOrNullEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(T)value __attribute__((swift_name("findPolymorphicSerializerOrNull(encoder:value:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(T)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinKClass> baseClass __attribute__((swift_name("baseClass")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateBasedDateTimeUnitSerializer")))
@interface CnmeshDateBasedDateTimeUnitSerializer : CnmeshKotlinx_serialization_coreAbstractPolymorphicSerializer<CnmeshDateTimeUnitDateBased *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dateBasedDateTimeUnitSerializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDateBasedDateTimeUnitSerializer *shared __attribute__((swift_name("shared")));
- (id<CnmeshKotlinx_serialization_coreDeserializationStrategy> _Nullable)findPolymorphicSerializerOrNullDecoder:(id<CnmeshKotlinx_serialization_coreCompositeDecoder>)decoder klassName:(NSString * _Nullable)klassName __attribute__((swift_name("findPolymorphicSerializerOrNull(decoder:klassName:)")));
- (id<CnmeshKotlinx_serialization_coreSerializationStrategy> _Nullable)findPolymorphicSerializerOrNullEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshDateTimeUnitDateBased *)value __attribute__((swift_name("findPolymorphicSerializerOrNull(encoder:value:)")));
@property (readonly) id<CnmeshKotlinKClass> baseClass __attribute__((swift_name("baseClass")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatePeriodComponentSerializer")))
@interface CnmeshDatePeriodComponentSerializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)datePeriodComponentSerializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDatePeriodComponentSerializer *shared __attribute__((swift_name("shared")));
- (CnmeshDatePeriod *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshDatePeriod *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatePeriodIso8601Serializer")))
@interface CnmeshDatePeriodIso8601Serializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)datePeriodIso8601Serializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDatePeriodIso8601Serializer *shared __attribute__((swift_name("shared")));
- (CnmeshDatePeriod *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshDatePeriod *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimePeriodComponentSerializer")))
@interface CnmeshDateTimePeriodComponentSerializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dateTimePeriodComponentSerializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDateTimePeriodComponentSerializer *shared __attribute__((swift_name("shared")));
- (CnmeshDateTimePeriod *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshDateTimePeriod *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimePeriodIso8601Serializer")))
@interface CnmeshDateTimePeriodIso8601Serializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dateTimePeriodIso8601Serializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDateTimePeriodIso8601Serializer *shared __attribute__((swift_name("shared")));
- (CnmeshDateTimePeriod *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshDateTimePeriod *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnitSerializer")))
@interface CnmeshDateTimeUnitSerializer : CnmeshKotlinx_serialization_coreAbstractPolymorphicSerializer<CnmeshDateTimeUnit *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dateTimeUnitSerializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDateTimeUnitSerializer *shared __attribute__((swift_name("shared")));
- (id<CnmeshKotlinx_serialization_coreDeserializationStrategy> _Nullable)findPolymorphicSerializerOrNullDecoder:(id<CnmeshKotlinx_serialization_coreCompositeDecoder>)decoder klassName:(NSString * _Nullable)klassName __attribute__((swift_name("findPolymorphicSerializerOrNull(decoder:klassName:)")));
- (id<CnmeshKotlinx_serialization_coreSerializationStrategy> _Nullable)findPolymorphicSerializerOrNullEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshDateTimeUnit *)value __attribute__((swift_name("findPolymorphicSerializerOrNull(encoder:value:)")));
@property (readonly) id<CnmeshKotlinKClass> baseClass __attribute__((swift_name("baseClass")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DayBasedDateTimeUnitSerializer")))
@interface CnmeshDayBasedDateTimeUnitSerializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dayBasedDateTimeUnitSerializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDayBasedDateTimeUnitSerializer *shared __attribute__((swift_name("shared")));
- (CnmeshDateTimeUnitDayBased *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshDateTimeUnitDayBased *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DayOfWeekSerializer")))
@interface CnmeshDayOfWeekSerializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dayOfWeekSerializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDayOfWeekSerializer *shared __attribute__((swift_name("shared")));
- (CnmeshDayOfWeek *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshDayOfWeek *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FixedOffsetTimeZoneSerializer")))
@interface CnmeshFixedOffsetTimeZoneSerializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)fixedOffsetTimeZoneSerializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshFixedOffsetTimeZoneSerializer *shared __attribute__((swift_name("shared")));
- (CnmeshFixedOffsetTimeZone *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshFixedOffsetTimeZone *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InstantComponentSerializer")))
@interface CnmeshInstantComponentSerializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)instantComponentSerializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshInstantComponentSerializer *shared __attribute__((swift_name("shared")));
- (CnmeshInstant *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshInstant *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InstantIso8601Serializer")))
@interface CnmeshInstantIso8601Serializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)instantIso8601Serializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshInstantIso8601Serializer *shared __attribute__((swift_name("shared")));
- (CnmeshInstant *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshInstant *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDateComponentSerializer")))
@interface CnmeshLocalDateComponentSerializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)localDateComponentSerializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshLocalDateComponentSerializer *shared __attribute__((swift_name("shared")));
- (CnmeshLocalDate *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshLocalDate *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDateIso8601Serializer")))
@interface CnmeshLocalDateIso8601Serializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)localDateIso8601Serializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshLocalDateIso8601Serializer *shared __attribute__((swift_name("shared")));
- (CnmeshLocalDate *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshLocalDate *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDateTimeComponentSerializer")))
@interface CnmeshLocalDateTimeComponentSerializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)localDateTimeComponentSerializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshLocalDateTimeComponentSerializer *shared __attribute__((swift_name("shared")));
- (CnmeshLocalDateTime *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshLocalDateTime *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDateTimeIso8601Serializer")))
@interface CnmeshLocalDateTimeIso8601Serializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)localDateTimeIso8601Serializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshLocalDateTimeIso8601Serializer *shared __attribute__((swift_name("shared")));
- (CnmeshLocalDateTime *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshLocalDateTime *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MonthBasedDateTimeUnitSerializer")))
@interface CnmeshMonthBasedDateTimeUnitSerializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)monthBasedDateTimeUnitSerializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshMonthBasedDateTimeUnitSerializer *shared __attribute__((swift_name("shared")));
- (CnmeshDateTimeUnitMonthBased *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshDateTimeUnitMonthBased *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MonthSerializer")))
@interface CnmeshMonthSerializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)monthSerializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshMonthSerializer *shared __attribute__((swift_name("shared")));
- (CnmeshMonth *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshMonth *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeBasedDateTimeUnitSerializer")))
@interface CnmeshTimeBasedDateTimeUnitSerializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)timeBasedDateTimeUnitSerializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshTimeBasedDateTimeUnitSerializer *shared __attribute__((swift_name("shared")));
- (CnmeshDateTimeUnitTimeBased *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshDateTimeUnitTimeBased *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeZoneSerializer")))
@interface CnmeshTimeZoneSerializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)timeZoneSerializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshTimeZoneSerializer *shared __attribute__((swift_name("shared")));
- (CnmeshTimeZone *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshTimeZone *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UtcOffsetSerializer")))
@interface CnmeshUtcOffsetSerializer : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)utcOffsetSerializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshUtcOffsetSerializer *shared __attribute__((swift_name("shared")));
- (CnmeshUtcOffset *)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(CnmeshUtcOffset *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((swift_name("Kotlinx_serialization_coreSerialFormat")))
@protocol CnmeshKotlinx_serialization_coreSerialFormat
@required
@property (readonly) CnmeshKotlinx_serialization_coreSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end;

__attribute__((swift_name("Kotlinx_serialization_coreStringFormat")))
@protocol CnmeshKotlinx_serialization_coreStringFormat <CnmeshKotlinx_serialization_coreSerialFormat>
@required
- (id _Nullable)decodeFromStringDeserializer:(id<CnmeshKotlinx_serialization_coreDeserializationStrategy>)deserializer string:(NSString *)string __attribute__((swift_name("decodeFromString(deserializer:string:)")));
- (NSString *)encodeToStringSerializer:(id<CnmeshKotlinx_serialization_coreSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeToString(serializer:value:)")));
@end;

__attribute__((swift_name("Json")))
@interface CnmeshJson : CnmeshBase <CnmeshKotlinx_serialization_coreStringFormat>
@property (class, readonly, getter=companion) CnmeshJsonDefault *companion __attribute__((swift_name("companion")));
- (id _Nullable)decodeFromJsonElementDeserializer:(id<CnmeshKotlinx_serialization_coreDeserializationStrategy>)deserializer element:(CnmeshJsonElement *)element __attribute__((swift_name("decodeFromJsonElement(deserializer:element:)")));
- (id _Nullable)decodeFromStringDeserializer:(id<CnmeshKotlinx_serialization_coreDeserializationStrategy>)deserializer string:(NSString *)string __attribute__((swift_name("decodeFromString(deserializer:string:)")));
- (CnmeshJsonElement *)encodeToJsonElementSerializer:(id<CnmeshKotlinx_serialization_coreSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeToJsonElement(serializer:value:)")));
- (NSString *)encodeToStringSerializer:(id<CnmeshKotlinx_serialization_coreSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeToString(serializer:value:)")));
- (CnmeshJsonElement *)parseToJsonElementString:(NSString *)string __attribute__((swift_name("parseToJsonElement(string:)")));
@property (readonly) CnmeshJsonConfiguration *configuration __attribute__((swift_name("configuration")));
@property (readonly) CnmeshKotlinx_serialization_coreSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Json.Default")))
@interface CnmeshJsonDefault : CnmeshJson
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)default_ __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshJsonDefault *shared __attribute__((swift_name("shared")));
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("JsonArray")))
@interface CnmeshJsonArray : NSObject
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonArrayBuilder")))
@interface CnmeshJsonArrayBuilder : CnmeshBase
- (BOOL)addElement:(CnmeshJsonElement *)element __attribute__((swift_name("add(element:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonBuilder")))
@interface CnmeshJsonBuilder : CnmeshBase
@property BOOL allowSpecialFloatingPointValues __attribute__((swift_name("allowSpecialFloatingPointValues")));
@property BOOL allowStructuredMapKeys __attribute__((swift_name("allowStructuredMapKeys")));
@property NSString *classDiscriminator __attribute__((swift_name("classDiscriminator")));
@property BOOL coerceInputValues __attribute__((swift_name("coerceInputValues")));
@property BOOL encodeDefaults __attribute__((swift_name("encodeDefaults")));
@property BOOL explicitNulls __attribute__((swift_name("explicitNulls")));
@property BOOL ignoreUnknownKeys __attribute__((swift_name("ignoreUnknownKeys")));
@property BOOL isLenient __attribute__((swift_name("isLenient")));
@property BOOL prettyPrint __attribute__((swift_name("prettyPrint")));
@property NSString *prettyPrintIndent __attribute__((swift_name("prettyPrintIndent")));
@property CnmeshKotlinx_serialization_coreSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@property BOOL useAlternativeNames __attribute__((swift_name("useAlternativeNames")));
@property BOOL useArrayPolymorphism __attribute__((swift_name("useArrayPolymorphism")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonConfiguration")))
@interface CnmeshJsonConfiguration : CnmeshBase
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL allowSpecialFloatingPointValues __attribute__((swift_name("allowSpecialFloatingPointValues")));
@property (readonly) BOOL allowStructuredMapKeys __attribute__((swift_name("allowStructuredMapKeys")));
@property (readonly) NSString *classDiscriminator __attribute__((swift_name("classDiscriminator")));
@property (readonly) BOOL coerceInputValues __attribute__((swift_name("coerceInputValues")));
@property (readonly) BOOL encodeDefaults __attribute__((swift_name("encodeDefaults")));
@property (readonly) BOOL explicitNulls __attribute__((swift_name("explicitNulls")));
@property (readonly) BOOL ignoreUnknownKeys __attribute__((swift_name("ignoreUnknownKeys")));
@property (readonly) BOOL isLenient __attribute__((swift_name("isLenient")));
@property (readonly) BOOL prettyPrint __attribute__((swift_name("prettyPrint")));
@property (readonly) NSString *prettyPrintIndent __attribute__((swift_name("prettyPrintIndent")));
@property (readonly) BOOL useAlternativeNames __attribute__((swift_name("useAlternativeNames")));
@property (readonly) BOOL useArrayPolymorphism __attribute__((swift_name("useArrayPolymorphism")));
@end;

__attribute__((swift_name("JsonContentPolymorphicSerializer")))
@interface CnmeshJsonContentPolymorphicSerializer<T> : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
- (instancetype)initWithBaseClass:(id<CnmeshKotlinKClass>)baseClass __attribute__((swift_name("init(baseClass:)"))) __attribute__((objc_designated_initializer));
- (T)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (id<CnmeshKotlinx_serialization_coreDeserializationStrategy>)selectDeserializerElement:(CnmeshJsonElement *)element __attribute__((swift_name("selectDeserializer(element:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(T)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((swift_name("Kotlinx_serialization_coreDecoder")))
@protocol CnmeshKotlinx_serialization_coreDecoder
@required
- (id<CnmeshKotlinx_serialization_coreCompositeDecoder>)beginStructureDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor __attribute__((swift_name("beginStructure(descriptor:)")));
- (BOOL)decodeBoolean __attribute__((swift_name("decodeBoolean()")));
- (int8_t)decodeByte __attribute__((swift_name("decodeByte()")));
- (unichar)decodeChar __attribute__((swift_name("decodeChar()")));
- (double)decodeDouble __attribute__((swift_name("decodeDouble()")));
- (int32_t)decodeEnumEnumDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)enumDescriptor __attribute__((swift_name("decodeEnum(enumDescriptor:)")));
- (float)decodeFloat __attribute__((swift_name("decodeFloat()")));
- (id<CnmeshKotlinx_serialization_coreDecoder>)decodeInlineInlineDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)inlineDescriptor __attribute__((swift_name("decodeInline(inlineDescriptor:)")));
- (int32_t)decodeInt __attribute__((swift_name("decodeInt()")));
- (int64_t)decodeLong __attribute__((swift_name("decodeLong()")));
- (BOOL)decodeNotNullMark __attribute__((swift_name("decodeNotNullMark()")));
- (CnmeshKotlinNothing * _Nullable)decodeNull __attribute__((swift_name("decodeNull()")));
- (id _Nullable)decodeNullableSerializableValueDeserializer:(id<CnmeshKotlinx_serialization_coreDeserializationStrategy>)deserializer __attribute__((swift_name("decodeNullableSerializableValue(deserializer:)")));
- (id _Nullable)decodeSerializableValueDeserializer:(id<CnmeshKotlinx_serialization_coreDeserializationStrategy>)deserializer __attribute__((swift_name("decodeSerializableValue(deserializer:)")));
- (int16_t)decodeShort __attribute__((swift_name("decodeShort()")));
- (NSString *)decodeString __attribute__((swift_name("decodeString()")));
@property (readonly) CnmeshKotlinx_serialization_coreSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end;

__attribute__((swift_name("Kotlinx_serialization_coreCompositeDecoder")))
@protocol CnmeshKotlinx_serialization_coreCompositeDecoder
@required
- (BOOL)decodeBooleanElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeBooleanElement(descriptor:index:)")));
- (int8_t)decodeByteElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeByteElement(descriptor:index:)")));
- (unichar)decodeCharElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeCharElement(descriptor:index:)")));
- (int32_t)decodeCollectionSizeDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor __attribute__((swift_name("decodeCollectionSize(descriptor:)")));
- (double)decodeDoubleElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeDoubleElement(descriptor:index:)")));
- (int32_t)decodeElementIndexDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor __attribute__((swift_name("decodeElementIndex(descriptor:)")));
- (float)decodeFloatElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeFloatElement(descriptor:index:)")));
- (id<CnmeshKotlinx_serialization_coreDecoder>)decodeInlineElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeInlineElement(descriptor:index:)")));
- (int32_t)decodeIntElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeIntElement(descriptor:index:)")));
- (int64_t)decodeLongElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeLongElement(descriptor:index:)")));
- (id _Nullable)decodeNullableSerializableElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index deserializer:(id<CnmeshKotlinx_serialization_coreDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeNullableSerializableElement(descriptor:index:deserializer:previousValue:)")));
- (BOOL)decodeSequentially __attribute__((swift_name("decodeSequentially()")));
- (id _Nullable)decodeSerializableElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index deserializer:(id<CnmeshKotlinx_serialization_coreDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeSerializableElement(descriptor:index:deserializer:previousValue:)")));
- (int16_t)decodeShortElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeShortElement(descriptor:index:)")));
- (NSString *)decodeStringElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeStringElement(descriptor:index:)")));
- (void)endStructureDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor __attribute__((swift_name("endStructure(descriptor:)")));
@property (readonly) CnmeshKotlinx_serialization_coreSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end;

__attribute__((swift_name("JsonDecoder")))
@protocol CnmeshJsonDecoder <CnmeshKotlinx_serialization_coreDecoder, CnmeshKotlinx_serialization_coreCompositeDecoder>
@required
- (CnmeshJsonElement *)decodeJsonElement __attribute__((swift_name("decodeJsonElement()")));
@property (readonly) CnmeshJson *json __attribute__((swift_name("json")));
@end;

__attribute__((swift_name("JsonElement")))
@interface CnmeshJsonElement : CnmeshBase
@property (class, readonly, getter=companion) CnmeshJsonElementCompanion *companion __attribute__((swift_name("companion")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonElement.Companion")))
@interface CnmeshJsonElementCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshJsonElementCompanion *shared __attribute__((swift_name("shared")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((swift_name("Kotlinx_serialization_coreEncoder")))
@protocol CnmeshKotlinx_serialization_coreEncoder
@required
- (id<CnmeshKotlinx_serialization_coreCompositeEncoder>)beginCollectionDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor collectionSize:(int32_t)collectionSize __attribute__((swift_name("beginCollection(descriptor:collectionSize:)")));
- (id<CnmeshKotlinx_serialization_coreCompositeEncoder>)beginStructureDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor __attribute__((swift_name("beginStructure(descriptor:)")));
- (void)encodeBooleanValue:(BOOL)value __attribute__((swift_name("encodeBoolean(value:)")));
- (void)encodeByteValue:(int8_t)value __attribute__((swift_name("encodeByte(value:)")));
- (void)encodeCharValue:(unichar)value __attribute__((swift_name("encodeChar(value:)")));
- (void)encodeDoubleValue:(double)value __attribute__((swift_name("encodeDouble(value:)")));
- (void)encodeEnumEnumDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)enumDescriptor index:(int32_t)index __attribute__((swift_name("encodeEnum(enumDescriptor:index:)")));
- (void)encodeFloatValue:(float)value __attribute__((swift_name("encodeFloat(value:)")));
- (id<CnmeshKotlinx_serialization_coreEncoder>)encodeInlineInlineDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)inlineDescriptor __attribute__((swift_name("encodeInline(inlineDescriptor:)")));
- (void)encodeIntValue:(int32_t)value __attribute__((swift_name("encodeInt(value:)")));
- (void)encodeLongValue:(int64_t)value __attribute__((swift_name("encodeLong(value:)")));
- (void)encodeNotNullMark __attribute__((swift_name("encodeNotNullMark()")));
- (void)encodeNull __attribute__((swift_name("encodeNull()")));
- (void)encodeNullableSerializableValueSerializer:(id<CnmeshKotlinx_serialization_coreSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeNullableSerializableValue(serializer:value:)")));
- (void)encodeSerializableValueSerializer:(id<CnmeshKotlinx_serialization_coreSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeSerializableValue(serializer:value:)")));
- (void)encodeShortValue:(int16_t)value __attribute__((swift_name("encodeShort(value:)")));
- (void)encodeStringValue:(NSString *)value __attribute__((swift_name("encodeString(value:)")));
@property (readonly) CnmeshKotlinx_serialization_coreSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end;

__attribute__((swift_name("Kotlinx_serialization_coreCompositeEncoder")))
@protocol CnmeshKotlinx_serialization_coreCompositeEncoder
@required
- (void)encodeBooleanElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(BOOL)value __attribute__((swift_name("encodeBooleanElement(descriptor:index:value:)")));
- (void)encodeByteElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(int8_t)value __attribute__((swift_name("encodeByteElement(descriptor:index:value:)")));
- (void)encodeCharElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(unichar)value __attribute__((swift_name("encodeCharElement(descriptor:index:value:)")));
- (void)encodeDoubleElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(double)value __attribute__((swift_name("encodeDoubleElement(descriptor:index:value:)")));
- (void)encodeFloatElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(float)value __attribute__((swift_name("encodeFloatElement(descriptor:index:value:)")));
- (id<CnmeshKotlinx_serialization_coreEncoder>)encodeInlineElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("encodeInlineElement(descriptor:index:)")));
- (void)encodeIntElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(int32_t)value __attribute__((swift_name("encodeIntElement(descriptor:index:value:)")));
- (void)encodeLongElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(int64_t)value __attribute__((swift_name("encodeLongElement(descriptor:index:value:)")));
- (void)encodeNullableSerializableElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index serializer:(id<CnmeshKotlinx_serialization_coreSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeNullableSerializableElement(descriptor:index:serializer:value:)")));
- (void)encodeSerializableElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index serializer:(id<CnmeshKotlinx_serialization_coreSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeSerializableElement(descriptor:index:serializer:value:)")));
- (void)encodeShortElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(int16_t)value __attribute__((swift_name("encodeShortElement(descriptor:index:value:)")));
- (void)encodeStringElementDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index value:(NSString *)value __attribute__((swift_name("encodeStringElement(descriptor:index:value:)")));
- (void)endStructureDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor __attribute__((swift_name("endStructure(descriptor:)")));
- (BOOL)shouldEncodeElementDefaultDescriptor:(id<CnmeshKotlinx_serialization_coreSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("shouldEncodeElementDefault(descriptor:index:)")));
@property (readonly) CnmeshKotlinx_serialization_coreSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end;

__attribute__((swift_name("JsonEncoder")))
@protocol CnmeshJsonEncoder <CnmeshKotlinx_serialization_coreEncoder, CnmeshKotlinx_serialization_coreCompositeEncoder>
@required
- (void)encodeJsonElementElement:(CnmeshJsonElement *)element __attribute__((swift_name("encodeJsonElement(element:)")));
@property (readonly) CnmeshJson *json __attribute__((swift_name("json")));
@end;

__attribute__((swift_name("JsonPrimitive")))
@interface CnmeshJsonPrimitive : CnmeshJsonElement
@property (class, readonly, getter=companion) CnmeshJsonPrimitiveCompanion *companion __attribute__((swift_name("companion")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *content __attribute__((swift_name("content")));
@property (readonly) BOOL isString __attribute__((swift_name("isString")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonNull")))
@interface CnmeshJsonNull : CnmeshJsonPrimitive
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)jsonNull __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshJsonNull *shared __attribute__((swift_name("shared")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializerTypeParamsSerializers:(CnmeshKotlinArray<id<CnmeshKotlinx_serialization_coreKSerializer>> *)typeParamsSerializers __attribute__((swift_name("serializer(typeParamsSerializers:)")));
@property (readonly) NSString *content __attribute__((swift_name("content")));
@property (readonly) BOOL isString __attribute__((swift_name("isString")));
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("JsonObject")))
@interface CnmeshJsonObject : NSObject
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonObjectBuilder")))
@interface CnmeshJsonObjectBuilder : CnmeshBase
- (CnmeshJsonElement * _Nullable)putKey:(NSString *)key element:(CnmeshJsonElement *)element __attribute__((swift_name("put(key:element:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonPrimitive.Companion")))
@interface CnmeshJsonPrimitiveCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshJsonPrimitiveCompanion *shared __attribute__((swift_name("shared")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((swift_name("JsonTransformingSerializer")))
@interface CnmeshJsonTransformingSerializer<T> : CnmeshBase <CnmeshKotlinx_serialization_coreKSerializer>
- (instancetype)initWithTSerializer:(id<CnmeshKotlinx_serialization_coreKSerializer>)tSerializer __attribute__((swift_name("init(tSerializer:)"))) __attribute__((objc_designated_initializer));
- (T)deserializeDecoder:(id<CnmeshKotlinx_serialization_coreDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<CnmeshKotlinx_serialization_coreEncoder>)encoder value:(T)value __attribute__((swift_name("serialize(encoder:value:)")));
- (CnmeshJsonElement *)transformDeserializeElement:(CnmeshJsonElement *)element __attribute__((swift_name("transformDeserialize(element:)")));
- (CnmeshJsonElement *)transformSerializeElement:(CnmeshJsonElement *)element __attribute__((swift_name("transformSerialize(element:)")));
@property (readonly) id<CnmeshKotlinx_serialization_coreSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshSdkManager")))
@interface CnmeshMeshSdkManager : CnmeshBase <CnmeshKoinComponent>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (BOOL)addAlarmAlarmId:(int32_t)alarmId on:(BOOL)on daysMask:(int32_t)daysMask hour:(int32_t)hour minute:(int32_t)minute second:(int32_t)second meshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("addAlarm(alarmId:on:daysMask:hour:minute:second:meshAddress:)")));
- (BOOL)addColorSceneSceneId:(int32_t)sceneId brightness:(int32_t)brightness red:(int32_t)red green:(int32_t)green blue:(int32_t)blue meshAddress:(int32_t)meshAddress __attribute__((swift_name("addColorScene(sceneId:brightness:red:green:blue:meshAddress:)")));
- (BOOL)addSceneSceneId:(int32_t)sceneId brightness:(int32_t)brightness red:(int32_t)red green:(int32_t)green blue:(int32_t)blue temperature:(int32_t)temperature meshAddress:(int32_t)meshAddress __attribute__((swift_name("addScene(sceneId:brightness:red:green:blue:temperature:meshAddress:)")));
- (BOOL)addSceneAlarmAlarmId:(int32_t)alarmId sceneId:(int32_t)sceneId daysMask:(int32_t)daysMask hour:(int32_t)hour minute:(int32_t)minute second:(int32_t)second meshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("addSceneAlarm(alarmId:sceneId:daysMask:hour:minute:second:meshAddress:)")));
- (BOOL)addTemperatureSceneSceneId:(int32_t)sceneId brightness:(int32_t)brightness temperature:(int32_t)temperature meshAddress:(int32_t)meshAddress __attribute__((swift_name("addTemperatureScene(sceneId:brightness:temperature:meshAddress:)")));
- (void)addToGroupMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice groupAddress:(int32_t)groupAddress __attribute__((swift_name("addToGroup(meshDevice:groupAddress:)")));
- (void)addToGroupMeshAddress:(CnmeshInt * _Nullable)meshAddress groupAddress:(int32_t)groupAddress __attribute__((swift_name("addToGroup(meshAddress:groupAddress:)")));
- (void)blinkMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice __attribute__((swift_name("blink(meshDevice:)")));
- (void)blinkMeshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("blink(meshAddress:)")));
- (void)blinkAll __attribute__((swift_name("blinkAll()")));
- (void)brightnessMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice brightness:(int32_t)brightness __attribute__((swift_name("brightness(meshDevice:brightness:)")));
- (void)brightnessMeshAddress:(CnmeshInt * _Nullable)meshAddress brightness:(int32_t)brightness __attribute__((swift_name("brightness(meshAddress:brightness:)")));
- (void)brightnessAllBrightness:(int32_t)brightness __attribute__((swift_name("brightnessAll(brightness:)")));
- (void)connect __attribute__((swift_name("connect()")));
- (void)connectAndAddToGroupMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice groupAddress:(int32_t)groupAddress status:(void (^)(CnmeshBoolean *))status __attribute__((swift_name("connectAndAddToGroup(meshDevice:groupAddress:status:)")));
- (void)connectAndBlinkMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice status:(void (^)(CnmeshBoolean *))status __attribute__((swift_name("connectAndBlink(meshDevice:status:)")));
- (void)connectAndFactoryResetMacAddress:(NSString * _Nullable)macAddress status:(void (^)(CnmeshBoolean *))status __attribute__((swift_name("connectAndFactoryReset(macAddress:status:)")));
- (void)daliCommandDown __attribute__((swift_name("daliCommandDown()")));
- (void)daliCommandOnAndStepUp __attribute__((swift_name("daliCommandOnAndStepUp()")));
- (void)daliCommandRecallMaxLevel __attribute__((swift_name("daliCommandRecallMaxLevel()")));
- (void)daliCommandRecallMinLevel __attribute__((swift_name("daliCommandRecallMinLevel()")));
- (void)daliCommandStepDown __attribute__((swift_name("daliCommandStepDown()")));
- (void)daliCommandStepDownAndOff __attribute__((swift_name("daliCommandStepDownAndOff()")));
- (void)daliCommandStepUp __attribute__((swift_name("daliCommandStepUp()")));
- (void)daliCommandUp __attribute__((swift_name("daliCommandUp()")));
- (void)deleteAlarmAlarmId:(int32_t)alarmId meshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("deleteAlarm(alarmId:meshAddress:)")));
- (void)deleteSceneSceneId:(int32_t)sceneId __attribute__((swift_name("deleteScene(sceneId:)")));
- (void)disableAlarmAlarmId:(int32_t)alarmId meshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("disableAlarm(alarmId:meshAddress:)")));
- (void)disconnect __attribute__((swift_name("disconnect()")));
- (void)enableAlarmAlarmId:(int32_t)alarmId meshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("enableAlarm(alarmId:meshAddress:)")));
- (void)enableNotifications __attribute__((swift_name("enableNotifications()")));
- (void)factoryResetMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice __attribute__((swift_name("factoryReset(meshDevice:)")));
- (void)factoryResetMeshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("factoryReset(meshAddress:)")));
- (void)factoryResetAllResetDelay:(int32_t)resetDelay __attribute__((swift_name("factoryResetAll(resetDelay:)")));
- (BOOL)getInitializeStatus __attribute__((swift_name("getInitializeStatus()")));
- (void)initializeMeshSDKMeshData:(CnmeshMeshData *)meshData __attribute__((swift_name("initializeMeshSDK(meshData:)")));
- (void)loadSceneSceneId:(int32_t)sceneId __attribute__((swift_name("loadScene(sceneId:)")));
- (void)manualProvisionMeshDeviceMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice meshAddress:(CnmeshInt * _Nullable)meshAddress status:(void (^)(CnmeshBoolean *))status __attribute__((swift_name("manualProvisionMeshDevice(meshDevice:meshAddress:status:)")));
- (void)manualProvisionMeshDeviceMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice meshAddress:(CnmeshInt * _Nullable)meshAddress groupAddress:(CnmeshInt * _Nullable)groupAddress status:(void (^)(CnmeshBoolean *))status __attribute__((swift_name("manualProvisionMeshDevice(meshDevice:meshAddress:groupAddress:status:)")));
- (void)manualProvisionMeshDeviceMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice meshAddress:(CnmeshInt * _Nullable)meshAddress provisionCommands:(NSArray<CnmeshProvisionCommands *> *)provisionCommands status:(void (^)(CnmeshBoolean *))status __attribute__((swift_name("manualProvisionMeshDevice(meshDevice:meshAddress:provisionCommands:status:)")));
- (void)manualProvisionMeshDeviceWithStatusMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice meshAddress:(CnmeshInt * _Nullable)meshAddress provisionCommands:(NSArray<CnmeshProvisionCommands *> *)provisionCommands status:(void (^)(CnmeshDataState<CnmeshBoolean *> *))status __attribute__((swift_name("manualProvisionMeshDeviceWithStatus(meshDevice:meshAddress:provisionCommands:status:)")));
- (BOOL)modifyAlarmAlarmId:(int32_t)alarmId on:(BOOL)on daysMask:(int32_t)daysMask hour:(int32_t)hour minute:(int32_t)minute second:(int32_t)second meshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("modifyAlarm(alarmId:on:daysMask:hour:minute:second:meshAddress:)")));
- (BOOL)modifySceneAlarmAlarmId:(int32_t)alarmId sceneId:(int32_t)sceneId daysMask:(int32_t)daysMask hour:(int32_t)hour minute:(int32_t)minute second:(int32_t)second meshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("modifySceneAlarm(alarmId:sceneId:daysMask:hour:minute:second:meshAddress:)")));
- (void)offMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice __attribute__((swift_name("off(meshDevice:)")));
- (void)offMeshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("off(meshAddress:)")));
- (void)offAll __attribute__((swift_name("offAll()")));
- (void)onMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice __attribute__((swift_name("on(meshDevice:)")));
- (void)onMeshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("on(meshAddress:)")));
- (void)onAll __attribute__((swift_name("onAll()")));
- (void)onClear __attribute__((swift_name("onClear()")));
- (id<CnmeshKtor_ioCloseable>)registerMeshEventMeshEvent:(void (^)(CnmeshMeshManagerEvent *))meshEvent meshError:(void (^)(NSString *))meshError __attribute__((swift_name("registerMeshEvent(meshEvent:meshError:)")));
- (void)removeFromGroupMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice groupAddress:(int32_t)groupAddress __attribute__((swift_name("removeFromGroup(meshDevice:groupAddress:)")));
- (void)removeFromGroupMeshAddress:(CnmeshInt * _Nullable)meshAddress groupAddress:(int32_t)groupAddress __attribute__((swift_name("removeFromGroup(meshAddress:groupAddress:)")));
- (void)setDaliFadeRateFadeRate:(int32_t)fadeRate __attribute__((swift_name("setDaliFadeRate(fadeRate:)")));
- (void)setDaliFadeTimeFadeTime:(int32_t)fadeTime __attribute__((swift_name("setDaliFadeTime(fadeTime:)")));
- (void)setDaliMaxLevelMaxLevel:(int32_t)maxLevel __attribute__((swift_name("setDaliMaxLevel(maxLevel:)")));
- (void)setDaliMinLevelMinLevel:(int32_t)minLevel __attribute__((swift_name("setDaliMinLevel(minLevel:)")));
- (void)setDaliPowerOnLevelPowerOnLevel:(int32_t)powerOnLevel __attribute__((swift_name("setDaliPowerOnLevel(powerOnLevel:)")));
- (void)setTimeYear:(int32_t)year month:(int32_t)month day:(int32_t)day hour:(int32_t)hour minute:(int32_t)minute second:(int32_t)second __attribute__((swift_name("setTime(year:month:day:hour:minute:second:)")));
- (void)startAutoProvisioningMeshProvisionFilter:(CnmeshMeshProvisionFilter *)meshProvisionFilter __attribute__((swift_name("startAutoProvisioning(meshProvisionFilter:)")));
- (void)startManualProvisioningMeshDeviceList:(void (^)(NSArray<CnmeshMeshDevice *> *))meshDeviceList __attribute__((swift_name("startManualProvisioning(meshDeviceList:)")));
- (void)startManualProvisioningProductId:(CnmeshInt * _Nullable)productId meshDeviceList:(void (^)(NSArray<CnmeshMeshDevice *> *))meshDeviceList __attribute__((swift_name("startManualProvisioning(productId:meshDeviceList:)")));
- (void)startManualProvisioningProductId:(CnmeshInt * _Nullable)productId rssi:(CnmeshInt * _Nullable)rssi meshDeviceList:(void (^)(NSArray<CnmeshMeshDevice *> *))meshDeviceList __attribute__((swift_name("startManualProvisioning(productId:rssi:meshDeviceList:)")));
- (void)startManualProvisioningProductId:(CnmeshInt * _Nullable)productId macAddress:(NSString * _Nullable)macAddress rssi:(CnmeshInt * _Nullable)rssi meshDeviceList:(void (^)(NSArray<CnmeshMeshDevice *> *))meshDeviceList __attribute__((swift_name("startManualProvisioning(productId:macAddress:rssi:meshDeviceList:)")));
- (void)startManualProvisioningMacAddress:(NSString * _Nullable)macAddress meshDeviceList:(void (^)(NSArray<CnmeshMeshDevice *> *))meshDeviceList __attribute__((swift_name("startManualProvisioning(macAddress:meshDeviceList:)")));
- (void)startManualProvisioningMacAddress:(NSString * _Nullable)macAddress rssi:(CnmeshInt * _Nullable)rssi meshDeviceList:(void (^)(NSArray<CnmeshMeshDevice *> *))meshDeviceList __attribute__((swift_name("startManualProvisioning(macAddress:rssi:meshDeviceList:)")));
- (void)startMeshOtaFirmware:(NSData *)firmware productId:(int32_t)productId __attribute__((swift_name("startMeshOta(firmware:productId:)")));
- (void)startP2pOtaFirmware:(NSData *)firmware macAddress:(NSString *)macAddress __attribute__((swift_name("startP2pOta(firmware:macAddress:)")));
- (void)startProvisioning __attribute__((swift_name("startProvisioning()")));
- (void)startReset __attribute__((swift_name("startReset()")));
- (void)stopManualProvisioning __attribute__((swift_name("stopManualProvisioning()")));
- (void)stopOta __attribute__((swift_name("stopOta()")));
- (void)stopProvisioning __attribute__((swift_name("stopProvisioning()")));
- (void)stopReset __attribute__((swift_name("stopReset()")));
- (void)updateMeshUserNameAndPasswordUsername:(NSString * _Nullable)username password:(NSString * _Nullable)password __attribute__((swift_name("updateMeshUserNameAndPassword(username:password:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshSdkManager2")))
@interface CnmeshMeshSdkManager2 : CnmeshBase <CnmeshKoinComponent, CnmeshKtor_ioCloseable>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)close __attribute__((swift_name("close()")));
- (void)connectAndGetSensorCalibrationValuesMacAddress:(NSString *)macAddress commandCount:(int32_t)commandCount commandDelay:(int64_t)commandDelay status:(void (^)(CnmeshDataState<NSDictionary<CnmeshInt *, NSArray<CnmeshInt *> *> *> *))status __attribute__((swift_name("connectAndGetSensorCalibrationValues(macAddress:commandCount:commandDelay:status:)")));
- (void)connectAndSendCommandMeshDevice:(CnmeshMeshDevice *)meshDevice commands:(NSArray<CnmeshCommands *> *)commands status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("connectAndSendCommand(meshDevice:commands:status:)")));
- (void)connectAndSendCommandMacAddress:(NSString *)macAddress commands:(NSArray<CnmeshCommands *> *)commands status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("connectAndSendCommand(macAddress:commands:status:)")));
- (void)disableNotifications __attribute__((swift_name("disableNotifications()")));
- (void)editEnOceanSwitchMacAddress:(NSString *)macAddress groupAddress:(int32_t)groupAddress A0:(int32_t)A0 A1:(int32_t)A1 B0:(int32_t)B0 B1:(int32_t)B1 status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("editEnOceanSwitch(macAddress:groupAddress:A0:A1:B0:B1:status:)")));
- (void)enableNotifications __attribute__((swift_name("enableNotifications()")));
- (CnmeshMeshDevice * _Nullable)getConnectedMeshDevice __attribute__((swift_name("getConnectedMeshDevice()")));
- (void)getConnectedMeshDeviceConnectedMeshDevice:(void (^)(CnmeshMeshDevice * _Nullable))connectedMeshDevice __attribute__((swift_name("getConnectedMeshDevice(connectedMeshDevice:)")));
- (CnmeshMeshDevice * _Nullable)getConnectedMeshDeviceFactory __attribute__((swift_name("getConnectedMeshDeviceFactory()")));
- (void)getConnectedMeshDeviceFactoryConnectedMeshDeviceFactory:(void (^)(CnmeshMeshDevice * _Nullable))connectedMeshDeviceFactory __attribute__((swift_name("getConnectedMeshDeviceFactory(connectedMeshDeviceFactory:)")));
- (void)getEnOceanSensorStatus:(void (^)(CnmeshDataState<CnmeshMeshNFCDevice *> *))status __attribute__((swift_name("getEnOceanSensor(status:)")));
- (void)getEnOceanSwitchStatus:(void (^)(CnmeshDataState<CnmeshMeshNFCDevice *> *))status __attribute__((swift_name("getEnOceanSwitch(status:)")));
- (void)getFactoryMeshDevicesFactoryMeshDeviceList:(void (^)(NSArray<CnmeshMeshDevice *> *))factoryMeshDeviceList __attribute__((swift_name("getFactoryMeshDevices(factoryMeshDeviceList:)")));
- (void)getFactoryMeshDevicesDeviceFilter:(CnmeshDeviceFilter * _Nullable)deviceFilter factoryMeshDeviceList:(void (^)(NSArray<CnmeshMeshDevice *> *))factoryMeshDeviceList __attribute__((swift_name("getFactoryMeshDevices(deviceFilter:factoryMeshDeviceList:)")));
- (void)getFirmwareVersionMeshAddress:(int32_t)meshAddress status:(void (^)(CnmeshDataState<NSString *> *))status __attribute__((swift_name("getFirmwareVersion(meshAddress:status:)")));
- (void)getFirmwareVersionMacAddress:(NSString *)macAddress status:(void (^)(CnmeshDataState<NSString *> *))status __attribute__((swift_name("getFirmwareVersion(macAddress:status:)")));
- (void)getGatewaysGatewaysList:(void (^)(NSArray<CnmeshMeshDevice *> *))gatewaysList __attribute__((swift_name("getGateways(gatewaysList:)")));
- (void)getGatewaysDeviceFilter:(CnmeshDeviceFilter * _Nullable)deviceFilter gatewaysList:(void (^)(NSArray<CnmeshMeshDevice *> *))gatewaysList __attribute__((swift_name("getGateways(deviceFilter:gatewaysList:)")));
- (void)getMeshDevicesMeshDeviceList:(void (^)(NSArray<CnmeshMeshDevice *> *))meshDeviceList __attribute__((swift_name("getMeshDevices(meshDeviceList:)")));
- (void)getMeshDevicesDeviceFilter:(CnmeshDeviceFilter * _Nullable)deviceFilter meshDeviceList:(void (^)(NSArray<CnmeshMeshDevice *> *))meshDeviceList __attribute__((swift_name("getMeshDevices(deviceFilter:meshDeviceList:)")));
- (void)getMeshOtaStatusMacAddress:(NSString *)macAddress otaProgress:(void (^)(CnmeshInt *))otaProgress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("getMeshOtaStatus(macAddress:otaProgress:status:)")));
- (void)getProvisionedMeshDevicesProvisionedMeshDeviceList:(void (^)(NSArray<CnmeshMeshDevice *> *))provisionedMeshDeviceList __attribute__((swift_name("getProvisionedMeshDevices(provisionedMeshDeviceList:)")));
- (void)getProvisionedMeshDevicesDeviceFilter:(CnmeshDeviceFilter * _Nullable)deviceFilter provisionedMeshDeviceList:(void (^)(NSArray<CnmeshMeshDevice *> *))provisionedMeshDeviceList __attribute__((swift_name("getProvisionedMeshDevices(deviceFilter:provisionedMeshDeviceList:)")));
- (void)getSensorCalibrationValuesMeshAddress:(int32_t)meshAddress sensorMeshAddresses:(NSArray<CnmeshInt *> *)sensorMeshAddresses sensorIntegrated:(BOOL)sensorIntegrated commandCount:(int32_t)commandCount commandDelay:(int64_t)commandDelay status:(void (^)(CnmeshDataState<NSDictionary<CnmeshInt *, NSArray<CnmeshInt *> *> *> *))status __attribute__((swift_name("getSensorCalibrationValues(meshAddress:sensorMeshAddresses:sensorIntegrated:commandCount:commandDelay:status:)")));
- (void)isDeviceActiveMeshAddress:(int32_t)meshAddress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("isDeviceActive(meshAddress:status:)")));
- (void)provisionDeviceMeshDevice:(CnmeshMeshDevice *)meshDevice meshAddress:(int32_t)meshAddress provisionCommands:(NSArray<CnmeshCommands *> *)provisionCommands status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("provisionDevice(meshDevice:meshAddress:provisionCommands:status:)")));
- (void)provisionDeviceMacAddress:(NSString *)macAddress meshAddress:(int32_t)meshAddress provisionCommands:(NSArray<CnmeshCommands *> *)provisionCommands status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("provisionDevice(macAddress:meshAddress:provisionCommands:status:)")));
- (void)provisionEnOceanSensorProvisionEnOcean:(CnmeshEnOceanProvisionSensor *)provisionEnOcean status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("provisionEnOceanSensor(provisionEnOcean:status:)")));
- (void)provisionEnOceanSwitchProvisionEnOcean:(CnmeshEnOceanProvision *)provisionEnOcean status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("provisionEnOceanSwitch(provisionEnOcean:status:)")));
- (void)provisionGatewayMeshDevice:(CnmeshMeshDevice *)meshDevice status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("provisionGateway(meshDevice:status:)")));
- (id<CnmeshKtor_ioCloseable>)registerConnectionEventOnMeshStateChanged:(void (^)(CnmeshMeshState *))onMeshStateChanged __attribute__((swift_name("registerConnectionEvent(onMeshStateChanged:)")));
- (id<CnmeshKtor_ioCloseable>)registerFactoryConnectionEventOnMeshStateChanged:(void (^)(CnmeshMeshState *))onMeshStateChanged __attribute__((swift_name("registerFactoryConnectionEvent(onMeshStateChanged:)")));
- (id<CnmeshKtor_ioCloseable>)registerLightStatusEventOnLightStatusChanged:(void (^)(NSDictionary<CnmeshInt *, CnmeshLightStatus *> *))onLightStatusChanged __attribute__((swift_name("registerLightStatusEvent(onLightStatusChanged:)")));
- (id<CnmeshKtor_ioCloseable>)registerLoggerEventOnNewLog:(void (^)(NSString *))onNewLog __attribute__((swift_name("registerLoggerEvent(onNewLog:)")));
- (id<CnmeshKtor_ioCloseable>)registerSensorStatusEventOnSensorStatusChanged:(void (^)(CnmeshSensorStatus *))onSensorStatusChanged __attribute__((swift_name("registerSensorStatusEvent(onSensorStatusChanged:)")));
- (void)sendCommandMeshAddress:(int32_t)meshAddress commands:(NSArray<CnmeshCommands *> *)commands status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("sendCommand(meshAddress:commands:status:)")));
- (void)sendCommandFactoryMeshAddress:(int32_t)meshAddress commands:(NSArray<CnmeshCommands *> *)commands status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("sendCommandFactory(meshAddress:commands:status:)")));
- (void)sendCommandWithNotificationsMeshAddress:(int32_t)meshAddress commands:(NSArray<CnmeshCommands *> *)commands status:(void (^)(CnmeshDataState<NSArray<CnmeshMeshNotification *> *> *))status __attribute__((swift_name("sendCommandWithNotifications(meshAddress:commands:status:)")));
- (void)startMeshOtaFirmware:(CnmeshKotlinByteArray *)firmware productId:(int32_t)productId connectedMeshDevice:(void (^)(CnmeshMeshDevice *))connectedMeshDevice otaFileProgress:(void (^)(CnmeshInt *))otaFileProgress otaProgress:(void (^)(CnmeshInt *))otaProgress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("startMeshOta(firmware:productId:connectedMeshDevice:otaFileProgress:otaProgress:status:)")));
- (void)startMeshOtaFirmware:(CnmeshKotlinByteArray *)firmware macAddress:(NSString *)macAddress otaFileProgress:(void (^)(CnmeshInt *))otaFileProgress otaProgress:(void (^)(CnmeshInt *))otaProgress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("startMeshOta(firmware:macAddress:otaFileProgress:otaProgress:status:)")));
- (void)startP2POtaFirmware:(CnmeshKotlinByteArray *)firmware macAddress:(NSString *)macAddress otaProgress:(void (^)(CnmeshInt *))otaProgress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("startP2POta(firmware:macAddress:otaProgress:status:)")));
- (void)startProvisionMode __attribute__((swift_name("startProvisionMode()")));
- (void)stopProvisionMode __attribute__((swift_name("stopProvisionMode()")));
- (void)unProvisionDeviceMeshAddress:(int32_t)meshAddress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("unProvisionDevice(meshAddress:status:)")));
- (void)unProvisionDeviceMacAddress:(NSString *)macAddress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("unProvisionDevice(macAddress:status:)")));
- (void)unProvisionEnOceanSensorMacAddress:(NSString *)macAddress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("unProvisionEnOceanSensor(macAddress:status:)")));
- (void)unProvisionEnOceanSwitchMacAddress:(NSString *)macAddress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("unProvisionEnOceanSwitch(macAddress:status:)")));
- (void)unProvisionGatewayMacAddress:(NSString *)macAddress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("unProvisionGateway(macAddress:status:)")));
- (void)updateMeshUserNameAndPasswordUsername:(NSString * _Nullable)username password:(NSString * _Nullable)password __attribute__((swift_name("updateMeshUserNameAndPassword(username:password:)")));
- (void)updateMeshUserNamePasswordLtkUsername:(NSString * _Nullable)username password:(NSString * _Nullable)password ltk:(NSString * _Nullable)ltk __attribute__((swift_name("updateMeshUserNamePasswordLtk(username:password:ltk:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BuildConfig")))
@interface CnmeshBuildConfig : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (BOOL)isAndroid __attribute__((swift_name("isAndroid()")));
- (BOOL)isDebug __attribute__((swift_name("isDebug()")));
- (BOOL)isNfcSupported __attribute__((swift_name("isNfcSupported()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CommonFlow")))
@interface CnmeshCommonFlow<T> : CnmeshBase <CnmeshFlow>
- (instancetype)initWithOrigin:(id<CnmeshFlow>)origin __attribute__((swift_name("init(origin:)"))) __attribute__((objc_designated_initializer));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<CnmeshFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));
- (void)collectCommonCoroutineScope:(id<CnmeshCoroutineScope> _Nullable)coroutineScope callback:(void (^)(T _Nullable))callback __attribute__((swift_name("collectCommon(coroutineScope:callback:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Constants")))
@interface CnmeshConstants : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)constants __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshConstants *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DataState")))
@interface CnmeshDataState<T> : CnmeshBase
- (instancetype)initWithMessage:(CnmeshGenericMessageInfoBuilder * _Nullable)message data:(T _Nullable)data isLoading:(BOOL)isLoading __attribute__((swift_name("init(message:data:isLoading:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshDataStateCompanion *companion __attribute__((swift_name("companion")));
- (CnmeshGenericMessageInfoBuilder * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (T _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (BOOL)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshDataState<T> *)doCopyMessage:(CnmeshGenericMessageInfoBuilder * _Nullable)message data:(T _Nullable)data isLoading:(BOOL)isLoading __attribute__((swift_name("doCopy(message:data:isLoading:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) T _Nullable data __attribute__((swift_name("data")));
@property (readonly) BOOL isLoading __attribute__((swift_name("isLoading")));
@property (readonly) CnmeshGenericMessageInfoBuilder * _Nullable message __attribute__((swift_name("message")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DataStateCompanion")))
@interface CnmeshDataStateCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshDataStateCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshDataState<id> *)completed __attribute__((swift_name("completed()")));
- (CnmeshDataState<id> *)dataMessage:(CnmeshGenericMessageInfoBuilder * _Nullable)message data:(id _Nullable)data __attribute__((swift_name("data(message:data:)")));
- (CnmeshDataState<id> *)dataMessage:(CnmeshGenericMessageInfoBuilder * _Nullable)message data:(id _Nullable)data isLoading:(BOOL)isLoading __attribute__((swift_name("data(message:data:isLoading:)")));
- (CnmeshDataState<id> *)errorMessage:(CnmeshGenericMessageInfoBuilder *)message __attribute__((swift_name("error(message:)")));
- (CnmeshDataState<id> *)loading __attribute__((swift_name("loading()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GenericMessageInfo")))
@interface CnmeshGenericMessageInfo : CnmeshBase
@property (readonly) NSString * _Nullable description_ __attribute__((swift_name("description_")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) CnmeshNegativeAction * _Nullable negativeAction __attribute__((swift_name("negativeAction")));
@property (readonly) void (^ _Nullable onDismiss)(void) __attribute__((swift_name("onDismiss")));
@property (readonly) CnmeshPositiveAction * _Nullable positiveAction __attribute__((swift_name("positiveAction")));
@property (readonly) NSString *title __attribute__((swift_name("title")));
@property (readonly) CnmeshUIComponentType *uiComponentType __attribute__((swift_name("uiComponentType")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GenericMessageInfo.Builder")))
@interface CnmeshGenericMessageInfoBuilder : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (CnmeshGenericMessageInfo *)build __attribute__((swift_name("build()")));
- (CnmeshGenericMessageInfoBuilder *)descriptionDescription:(NSString *)description __attribute__((swift_name("description(description:)")));
- (CnmeshGenericMessageInfoBuilder *)idId:(NSString *)id __attribute__((swift_name("id(id:)")));
- (CnmeshGenericMessageInfoBuilder *)negativeNegativeAction:(CnmeshNegativeAction *)negativeAction __attribute__((swift_name("negative(negativeAction:)")));
- (CnmeshGenericMessageInfoBuilder *)onDismissOnDismiss:(void (^)(void))onDismiss __attribute__((swift_name("onDismiss(onDismiss:)")));
- (CnmeshGenericMessageInfoBuilder *)positivePositiveAction:(CnmeshPositiveAction * _Nullable)positiveAction __attribute__((swift_name("positive(positiveAction:)")));
- (CnmeshGenericMessageInfoBuilder *)titleTitle:(NSString *)title __attribute__((swift_name("title(title:)")));
- (CnmeshGenericMessageInfoBuilder *)uiComponentTypeUiComponentType:(CnmeshUIComponentType *)uiComponentType __attribute__((swift_name("uiComponentType(uiComponentType:)")));
@property (readonly) NSString * _Nullable description_ __attribute__((swift_name("description_")));
@property (readonly) NSString * _Nullable id __attribute__((swift_name("id")));
@property (readonly) CnmeshNegativeAction * _Nullable negativeAction __attribute__((swift_name("negativeAction")));
@property (readonly) void (^ _Nullable onDismiss)(void) __attribute__((swift_name("onDismiss")));
@property (readonly) CnmeshPositiveAction * _Nullable positiveAction __attribute__((swift_name("positiveAction")));
@property (readonly) NSString * _Nullable title __attribute__((swift_name("title")));
@property (readonly) CnmeshUIComponentType * _Nullable uiComponentType __attribute__((swift_name("uiComponentType")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GenericMessageInfoQueueUtil")))
@interface CnmeshGenericMessageInfoQueueUtil : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (BOOL)doesMessageAlreadyExistInQueueQueue:(CnmeshQueue<CnmeshGenericMessageInfo *> *)queue messageInfo:(CnmeshGenericMessageInfo *)messageInfo __attribute__((swift_name("doesMessageAlreadyExistInQueue(queue:messageInfo:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LinkedList")))
@interface CnmeshLinkedList<T> : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)addFirstData:(T _Nullable)data __attribute__((swift_name("addFirst(data:)")));
- (void)addLastData:(T _Nullable)data __attribute__((swift_name("addLast(data:)")));
- (T _Nullable)getLast __attribute__((swift_name("getLast()")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
- (void)printList __attribute__((swift_name("printList()")));
- (T _Nullable)removeFirst __attribute__((swift_name("removeFirst()")));
- (T _Nullable)removeLast __attribute__((swift_name("removeLast()")));
- (int32_t)size __attribute__((swift_name("size()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LinkedListNode")))
@interface CnmeshLinkedListNode<T, T_> : CnmeshBase
- (instancetype)initWith:(CnmeshLinkedList<T_> *)receiver data:(T _Nullable)data __attribute__((swift_name("init(_:data:)"))) __attribute__((objc_designated_initializer));
@property T _Nullable data __attribute__((swift_name("data")));
@property CnmeshLinkedListNode<T, T_> * _Nullable next __attribute__((swift_name("next")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NegativeAction")))
@interface CnmeshNegativeAction : CnmeshBase
- (instancetype)initWithNegativeBtnTxt:(NSString *)negativeBtnTxt onNegativeAction:(void (^)(void))onNegativeAction __attribute__((swift_name("init(negativeBtnTxt:onNegativeAction:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (void (^)(void))component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshNegativeAction *)doCopyNegativeBtnTxt:(NSString *)negativeBtnTxt onNegativeAction:(void (^)(void))onNegativeAction __attribute__((swift_name("doCopy(negativeBtnTxt:onNegativeAction:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *negativeBtnTxt __attribute__((swift_name("negativeBtnTxt")));
@property (readonly) void (^onNegativeAction)(void) __attribute__((swift_name("onNegativeAction")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PositiveAction")))
@interface CnmeshPositiveAction : CnmeshBase
- (instancetype)initWithPositiveBtnTxt:(NSString *)positiveBtnTxt onPositiveAction:(void (^)(void))onPositiveAction __attribute__((swift_name("init(positiveBtnTxt:onPositiveAction:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (void (^)(void))component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshPositiveAction *)doCopyPositiveBtnTxt:(NSString *)positiveBtnTxt onPositiveAction:(void (^)(void))onPositiveAction __attribute__((swift_name("doCopy(positiveBtnTxt:onPositiveAction:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) void (^onPositiveAction)(void) __attribute__((swift_name("onPositiveAction")));
@property (readonly) NSString *positiveBtnTxt __attribute__((swift_name("positiveBtnTxt")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Queue")))
@interface CnmeshQueue<T> : CnmeshBase
- (instancetype)initWithList:(NSMutableArray<id> *)list __attribute__((swift_name("init(list:)"))) __attribute__((objc_designated_initializer));
- (void)addElement:(T _Nullable)element __attribute__((swift_name("add(element:)")));
- (void)addAllQueue:(CnmeshQueue<T> *)queue __attribute__((swift_name("addAll(queue:)")));
- (void)clear __attribute__((swift_name("clear()")));
- (int32_t)count __attribute__((swift_name("count()")));

/**
 @note This method converts instances of Exception to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (T _Nullable)elementAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("element()"))) __attribute__((swift_error(nonnull_error)));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
- (BOOL)offerElement:(T _Nullable)element __attribute__((swift_name("offer(element:)")));
- (T _Nullable)peek __attribute__((swift_name("peek()")));
- (T _Nullable)poll __attribute__((swift_name("poll()")));

/**
 @note This method converts instances of Exception to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (T _Nullable)removeAndReturnError:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("remove()"))) __attribute__((swift_error(nonnull_error)));
- (BOOL)removeItem:(T _Nullable)item __attribute__((swift_name("remove(item:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property NSMutableArray<id> *items __attribute__((swift_name("items")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Stack")))
@interface CnmeshStack<T> : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
- (T _Nullable)peek __attribute__((swift_name("peek()")));
- (T _Nullable)pop __attribute__((swift_name("pop()")));
- (void)pushItem:(T _Nullable)item __attribute__((swift_name("push(item:)")));
- (int32_t)size __attribute__((swift_name("size()")));
@end;

__attribute__((swift_name("UIComponentType")))
@interface CnmeshUIComponentType : CnmeshBase
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UIComponentType.Dialog")))
@interface CnmeshUIComponentTypeDialog : CnmeshUIComponentType
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dialog __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshUIComponentTypeDialog *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UIComponentType.None")))
@interface CnmeshUIComponentTypeNone : CnmeshUIComponentType
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)none __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshUIComponentTypeNone *shared __attribute__((swift_name("shared")));
@end;

__attribute__((swift_name("NotifyService")))
@protocol CnmeshNotifyService
@required
- (void)enableNotifications __attribute__((swift_name("enableNotifications()")));
- (void)notificationsName:(NSString *)name macAddressString:(NSString *)macAddressString key:(CnmeshKotlinByteArray *)key notify:(void (^)(CnmeshDataState<CnmeshNotificationInfo *> *))notify __attribute__((swift_name("notifications(name:macAddressString:key:notify:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NotifyServiceImpl")))
@interface CnmeshNotifyServiceImpl : CnmeshBase <CnmeshNotifyService>
- (instancetype)initWithCommandAes:(CnmeshCommandAes *)commandAes meshDeviceConnecter:(CnmeshMeshDeviceConnecterImpl *)meshDeviceConnecter __attribute__((swift_name("init(commandAes:meshDeviceConnecter:)"))) __attribute__((objc_designated_initializer));
- (void)enableNotifications __attribute__((swift_name("enableNotifications()")));
- (CnmeshKotlinByteArray *)getMacBytesMacAddress:(NSString * _Nullable)macAddress __attribute__((swift_name("getMacBytes(macAddress:)")));
- (void)notificationsName:(NSString *)name macAddressString:(NSString *)macAddressString key:(CnmeshKotlinByteArray *)key notify:(void (^)(CnmeshDataState<CnmeshNotificationInfo *> *))notify __attribute__((swift_name("notifications(name:macAddressString:key:notify:)")));
- (CnmeshKotlinByteArray *)reverseArr:(CnmeshKotlinByteArray *)arr begin:(int32_t)begin end:(int32_t)end __attribute__((swift_name("reverse(arr:begin:end:)")));
@property (readonly) CnmeshCommandAes *commandAes __attribute__((swift_name("commandAes")));
@property (readonly) CnmeshMeshDeviceConnecterImpl *meshDeviceConnecter __attribute__((swift_name("meshDeviceConnecter")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NotificationInfo")))
@interface CnmeshNotificationInfo : CnmeshBase
- (instancetype)initWithName:(NSString *)name opcode:(CnmeshInt * _Nullable)opcode vendorId:(CnmeshInt * _Nullable)vendorId src:(CnmeshInt * _Nullable)src meshAddress:(CnmeshInt * _Nullable)meshAddress status:(CnmeshInt * _Nullable)status brightness:(CnmeshInt * _Nullable)brightness reserve:(CnmeshInt * _Nullable)reserve __attribute__((swift_name("init(name:opcode:vendorId:src:meshAddress:status:brightness:reserve:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component8 __attribute__((swift_name("component8()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshNotificationInfo *)doCopyName:(NSString *)name opcode:(CnmeshInt * _Nullable)opcode vendorId:(CnmeshInt * _Nullable)vendorId src:(CnmeshInt * _Nullable)src meshAddress:(CnmeshInt * _Nullable)meshAddress status:(CnmeshInt * _Nullable)status brightness:(CnmeshInt * _Nullable)brightness reserve:(CnmeshInt * _Nullable)reserve __attribute__((swift_name("doCopy(name:opcode:vendorId:src:meshAddress:status:brightness:reserve:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshInt * _Nullable brightness __attribute__((swift_name("brightness")));
@property (readonly) CnmeshInt * _Nullable meshAddress __attribute__((swift_name("meshAddress")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) CnmeshInt * _Nullable opcode __attribute__((swift_name("opcode")));
@property (readonly) CnmeshInt * _Nullable reserve __attribute__((swift_name("reserve")));
@property (readonly) CnmeshInt * _Nullable src __attribute__((swift_name("src")));
@property (readonly) CnmeshInt * _Nullable status __attribute__((swift_name("status")));
@property (readonly) CnmeshInt * _Nullable vendorId __attribute__((swift_name("vendorId")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshManager")))
@interface CnmeshMeshManager : CnmeshBase <CnmeshKoinComponent, CnmeshKtor_ioCloseable>
- (instancetype)initWithMeshData:(CnmeshMeshData * _Nullable)meshData __attribute__((swift_name("init(meshData:)"))) __attribute__((objc_designated_initializer));
- (BOOL)addAlarmAlarmId:(int32_t)alarmId on:(BOOL)on daysMask:(int32_t)daysMask hour:(int32_t)hour minute:(int32_t)minute second:(int32_t)second meshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("addAlarm(alarmId:on:daysMask:hour:minute:second:meshAddress:)")));
- (BOOL)addSceneSceneId:(int32_t)sceneId brightness:(int32_t)brightness red:(int32_t)red green:(int32_t)green blue:(int32_t)blue temperature:(int32_t)temperature meshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("addScene(sceneId:brightness:red:green:blue:temperature:meshAddress:)")));
- (BOOL)addSceneAlarmAlarmId:(int32_t)alarmId sceneId:(int32_t)sceneId daysMask:(int32_t)daysMask hour:(int32_t)hour minute:(int32_t)minute second:(int32_t)second meshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("addSceneAlarm(alarmId:sceneId:daysMask:hour:minute:second:meshAddress:)")));
- (void)addToGroupMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice groupAddress:(int32_t)groupAddress __attribute__((swift_name("addToGroup(meshDevice:groupAddress:)")));
- (void)addToGroupMeshAddress:(CnmeshInt * _Nullable)meshAddress groupAddress:(int32_t)groupAddress __attribute__((swift_name("addToGroup(meshAddress:groupAddress:)")));
- (void)blinkMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice __attribute__((swift_name("blink(meshDevice:)")));
- (void)blinkMeshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("blink(meshAddress:)")));
- (void)blinkAll __attribute__((swift_name("blinkAll()")));
- (void)brightnessMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice brightness:(int32_t)brightness __attribute__((swift_name("brightness(meshDevice:brightness:)")));
- (void)brightnessMeshAddress:(CnmeshInt * _Nullable)meshAddress brightness:(int32_t)brightness __attribute__((swift_name("brightness(meshAddress:brightness:)")));
- (void)brightnessAllBrightness:(int32_t)brightness __attribute__((swift_name("brightnessAll(brightness:)")));
- (void)close __attribute__((swift_name("close()")));
- (void)connect __attribute__((swift_name("connect()")));
- (void)connectAndAddToGroupMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice groupAddress:(int32_t)groupAddress status:(void (^)(CnmeshBoolean *))status __attribute__((swift_name("connectAndAddToGroup(meshDevice:groupAddress:status:)")));
- (void)connectAndBlinkMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice status:(void (^)(CnmeshBoolean *))status __attribute__((swift_name("connectAndBlink(meshDevice:status:)")));
- (void)connectAndFactoryResetMacAddress:(NSString * _Nullable)macAddress status:(void (^)(CnmeshBoolean *))status __attribute__((swift_name("connectAndFactoryReset(macAddress:status:)")));
- (void)connectMeshDeviceMeshDeviceAdvertisement:(CnmeshMeshDeviceAdvertisement *)meshDeviceAdvertisement __attribute__((swift_name("connectMeshDevice(meshDeviceAdvertisement:)")));
- (void)connectOtaMeshDeviceFirmware:(CnmeshKotlinByteArray *)firmware meshDeviceAdvertisement:(CnmeshMeshDeviceAdvertisement *)meshDeviceAdvertisement isP2p:(BOOL)isP2p __attribute__((swift_name("connectOtaMeshDevice(firmware:meshDeviceAdvertisement:isP2p:)")));
- (void)daliCommandDown __attribute__((swift_name("daliCommandDown()")));
- (void)daliCommandOnAndStepUp __attribute__((swift_name("daliCommandOnAndStepUp()")));
- (void)daliCommandRecallMaxLevel __attribute__((swift_name("daliCommandRecallMaxLevel()")));
- (void)daliCommandRecallMinLevel __attribute__((swift_name("daliCommandRecallMinLevel()")));
- (void)daliCommandStepDown __attribute__((swift_name("daliCommandStepDown()")));
- (void)daliCommandStepDownAndOff __attribute__((swift_name("daliCommandStepDownAndOff()")));
- (void)daliCommandStepUp __attribute__((swift_name("daliCommandStepUp()")));
- (void)daliCommandUp __attribute__((swift_name("daliCommandUp()")));
- (void)deleteAlarmAlarmId:(int32_t)alarmId meshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("deleteAlarm(alarmId:meshAddress:)")));
- (void)deleteSceneSceneId:(int32_t)sceneId __attribute__((swift_name("deleteScene(sceneId:)")));
- (void)disableAlarmAlarmId:(int32_t)alarmId meshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("disableAlarm(alarmId:meshAddress:)")));
- (void)disconnect __attribute__((swift_name("disconnect()")));
- (void)enableAlarmAlarmId:(int32_t)alarmId meshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("enableAlarm(alarmId:meshAddress:)")));
- (void)enableNotifications __attribute__((swift_name("enableNotifications()")));
- (void)factoryResetMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice __attribute__((swift_name("factoryReset(meshDevice:)")));
- (void)factoryResetMeshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("factoryReset(meshAddress:)")));
- (void)factoryResetAllResetDelay:(int32_t)resetDelay __attribute__((swift_name("factoryResetAll(resetDelay:)")));
- (CnmeshMeshData *)getInitMeshData __attribute__((swift_name("getInitMeshData()")));
- (void)getProvisioningMeshDevices __attribute__((swift_name("getProvisioningMeshDevices()")));
- (void)doInitMeshDataMeshData:(CnmeshMeshData *)meshData __attribute__((swift_name("doInitMeshData(meshData:)")));
- (void)loadSceneSceneId:(int32_t)sceneId __attribute__((swift_name("loadScene(sceneId:)")));
- (void)manualProvisionMeshDeviceMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice meshAddress:(int32_t)meshAddress groupAddress:(int32_t)groupAddress status:(void (^)(CnmeshBoolean *))status __attribute__((swift_name("manualProvisionMeshDevice(meshDevice:meshAddress:groupAddress:status:)")));
- (void)manualProvisionMeshDeviceMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice meshAddress:(int32_t)meshAddress provisionCommands:(NSArray<CnmeshProvisionCommands *> *)provisionCommands status:(void (^)(CnmeshBoolean *))status __attribute__((swift_name("manualProvisionMeshDevice(meshDevice:meshAddress:provisionCommands:status:)")));
- (void)manualProvisionMeshDeviceWithStatusMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice meshAddress:(int32_t)meshAddress provisionCommands:(NSArray<CnmeshProvisionCommands *> *)provisionCommands status:(void (^)(CnmeshDataState<CnmeshBoolean *> *))status __attribute__((swift_name("manualProvisionMeshDeviceWithStatus(meshDevice:meshAddress:provisionCommands:status:)")));
- (BOOL)modifyAlarmAlarmId:(int32_t)alarmId on:(BOOL)on daysMask:(int32_t)daysMask hour:(int32_t)hour minute:(int32_t)minute second:(int32_t)second meshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("modifyAlarm(alarmId:on:daysMask:hour:minute:second:meshAddress:)")));
- (BOOL)modifySceneAlarmAlarmId:(int32_t)alarmId sceneId:(int32_t)sceneId daysMask:(int32_t)daysMask hour:(int32_t)hour minute:(int32_t)minute second:(int32_t)second meshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("modifySceneAlarm(alarmId:sceneId:daysMask:hour:minute:second:meshAddress:)")));
- (void)offMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice __attribute__((swift_name("off(meshDevice:)")));
- (void)offMeshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("off(meshAddress:)")));
- (void)offAll __attribute__((swift_name("offAll()")));
- (void)onMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice __attribute__((swift_name("on(meshDevice:)")));
- (void)onMeshAddress:(CnmeshInt * _Nullable)meshAddress __attribute__((swift_name("on(meshAddress:)")));
- (void)onAll __attribute__((swift_name("onAll()")));
- (void)onClear __attribute__((swift_name("onClear()")));
- (void)onStart __attribute__((swift_name("onStart()")));
- (void)provisionMeshDeviceMeshDeviceAdvertisement:(CnmeshMeshDeviceAdvertisement *)meshDeviceAdvertisement __attribute__((swift_name("provisionMeshDevice(meshDeviceAdvertisement:)")));
- (void)removeFromGroupMeshDevice:(CnmeshMeshDevice * _Nullable)meshDevice groupAddress:(int32_t)groupAddress __attribute__((swift_name("removeFromGroup(meshDevice:groupAddress:)")));
- (void)removeFromGroupMeshAddress:(CnmeshInt * _Nullable)meshAddress groupAddress:(int32_t)groupAddress __attribute__((swift_name("removeFromGroup(meshAddress:groupAddress:)")));
- (void)resetMeshDeviceMeshDeviceAdvertisement:(CnmeshMeshDeviceAdvertisement *)meshDeviceAdvertisement __attribute__((swift_name("resetMeshDevice(meshDeviceAdvertisement:)")));
- (void)setDaliFadeRateFadeRate:(int32_t)fadeRate __attribute__((swift_name("setDaliFadeRate(fadeRate:)")));
- (void)setDaliFadeTimeFadeTime:(int32_t)fadeTime __attribute__((swift_name("setDaliFadeTime(fadeTime:)")));
- (void)setDaliMaxLevelMaxLevel:(int32_t)maxLevel __attribute__((swift_name("setDaliMaxLevel(maxLevel:)")));
- (void)setDaliMinLevelMinLevel:(int32_t)minLevel __attribute__((swift_name("setDaliMinLevel(minLevel:)")));
- (void)setDaliPowerOnLevelPowerOnLevel:(int32_t)powerOnLevel __attribute__((swift_name("setDaliPowerOnLevel(powerOnLevel:)")));
- (BOOL)setTimeYear:(int32_t)year month:(int32_t)month day:(int32_t)day hour:(int32_t)hour minute:(int32_t)minute second:(int32_t)second __attribute__((swift_name("setTime(year:month:day:hour:minute:second:)")));
- (void)startAutoProvisioningMeshProvisionFilter:(CnmeshMeshProvisionFilter *)meshProvisionFilter __attribute__((swift_name("startAutoProvisioning(meshProvisionFilter:)")));
- (void)startManualProvisioningMeshProvisionFilter:(CnmeshMeshProvisionFilter *)meshProvisionFilter meshDeviceList:(void (^)(NSArray<CnmeshMeshDevice *> *))meshDeviceList __attribute__((swift_name("startManualProvisioning(meshProvisionFilter:meshDeviceList:)")));
- (void)startOtaFirmware:(CnmeshKotlinByteArray *)firmware macAddress:(NSString * _Nullable)macAddress productId:(CnmeshInt * _Nullable)productId __attribute__((swift_name("startOta(firmware:macAddress:productId:)")));
- (void)startProvisioning __attribute__((swift_name("startProvisioning()")));
- (void)startReset __attribute__((swift_name("startReset()")));
- (void)stopManualProvisioning __attribute__((swift_name("stopManualProvisioning()")));
- (void)stopOta __attribute__((swift_name("stopOta()")));
- (void)stopProvisioning __attribute__((swift_name("stopProvisioning()")));
- (void)stopReset __attribute__((swift_name("stopReset()")));
- (void)updateMeshUserNameAndPasswordUsername:(NSString * _Nullable)username password:(NSString * _Nullable)password __attribute__((swift_name("updateMeshUserNameAndPassword(username:password:)")));
@property (readonly) CnmeshMeshData * _Nullable meshData __attribute__((swift_name("meshData")));
@property (readonly) id<CnmeshSharedFlow> meshManagerEventFlow __attribute__((swift_name("meshManagerEventFlow")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshManager2")))
@interface CnmeshMeshManager2 : CnmeshBase <CnmeshKoinComponent, CnmeshKtor_ioCloseable>
- (instancetype)initWithMeshData:(CnmeshMeshData * _Nullable)meshData __attribute__((swift_name("init(meshData:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)connectOnMeshStateChanged:(void (^)(CnmeshMeshState *))onMeshStateChanged completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("connect(onMeshStateChanged:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)connectAndGetSensorCalibrationValuesMacAddress:(NSString *)macAddress commandCount:(int32_t)commandCount commandDelay:(int64_t)commandDelay status:(void (^)(CnmeshDataState<NSDictionary<CnmeshInt *, NSArray<CnmeshInt *> *> *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("connectAndGetSensorCalibrationValues(macAddress:commandCount:commandDelay:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)connectAndSendCommandMeshDevice:(CnmeshMeshDevice *)meshDevice commands:(NSArray<CnmeshCommands *> *)commands status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("connectAndSendCommand(meshDevice:commands:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)connectAndSendCommandMacAddress:(NSString *)macAddress commands:(NSArray<CnmeshCommands *> *)commands status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("connectAndSendCommand(macAddress:commands:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)connectFactoryFactoryMeshDevice:(CnmeshMeshDevice * _Nullable)factoryMeshDevice onMeshStateChanged:(void (^)(CnmeshMeshState *))onMeshStateChanged completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("connectFactory(factoryMeshDevice:onMeshStateChanged:completionHandler:)")));
- (void)disableNotifications __attribute__((swift_name("disableNotifications()")));
- (void)enableNotifications __attribute__((swift_name("enableNotifications()")));
- (CnmeshMeshDevice * _Nullable)getConnectedMeshDevice __attribute__((swift_name("getConnectedMeshDevice()")));
- (void)getConnectedMeshDeviceConnectedMeshDevice:(void (^)(CnmeshMeshDevice * _Nullable))connectedMeshDevice __attribute__((swift_name("getConnectedMeshDevice(connectedMeshDevice:)")));
- (CnmeshMeshDevice * _Nullable)getConnectedMeshDeviceFactory __attribute__((swift_name("getConnectedMeshDeviceFactory()")));
- (void)getConnectedMeshDeviceFactoryConnectedMeshDeviceFactory:(void (^)(CnmeshMeshDevice * _Nullable))connectedMeshDeviceFactory __attribute__((swift_name("getConnectedMeshDeviceFactory(connectedMeshDeviceFactory:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getFactoryDevicesDeviceFilter:(CnmeshDeviceFilter * _Nullable)deviceFilter factoryMeshDeviceList:(void (^)(NSArray<CnmeshMeshDevice *> *))factoryMeshDeviceList completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("getFactoryDevices(deviceFilter:factoryMeshDeviceList:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getFirmwareVersionMeshAddress:(int32_t)meshAddress status:(void (^)(CnmeshDataState<NSString *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("getFirmwareVersion(meshAddress:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getFirmwareVersionMacAddress:(NSString *)macAddress status:(void (^)(CnmeshDataState<NSString *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("getFirmwareVersion(macAddress:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getGatewaysDeviceFilter:(CnmeshDeviceFilter * _Nullable)deviceFilter gatewaysList:(void (^)(NSArray<CnmeshMeshDevice *> *))gatewaysList completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("getGateways(deviceFilter:gatewaysList:completionHandler:)")));
- (CnmeshKotlinByteArray *)getMacBytesMacAddress:(NSString * _Nullable)macAddress __attribute__((swift_name("getMacBytes(macAddress:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getMeshDevicesDeviceFilter:(CnmeshDeviceFilter * _Nullable)deviceFilter meshDeviceList:(void (^)(NSArray<CnmeshMeshDevice *> *))meshDeviceList completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("getMeshDevices(deviceFilter:meshDeviceList:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getMeshOtaStatusMacAddress:(NSString *)macAddress otaProgress:(void (^)(CnmeshInt *))otaProgress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("getMeshOtaStatus(macAddress:otaProgress:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getProvisionedDevicesDeviceFilter:(CnmeshDeviceFilter * _Nullable)deviceFilter provisionedMeshDeviceList:(void (^)(NSArray<CnmeshMeshDevice *> *))provisionedMeshDeviceList completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("getProvisionedDevices(deviceFilter:provisionedMeshDeviceList:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getSensorCalibrationValuesMeshAddress:(int32_t)meshAddress sensorMeshAddresses:(NSArray<CnmeshInt *> *)sensorMeshAddresses sensorIntegrated:(BOOL)sensorIntegrated commandCount:(int32_t)commandCount commandDelay:(int64_t)commandDelay status:(void (^)(CnmeshDataState<NSDictionary<CnmeshInt *, NSArray<CnmeshInt *> *> *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("getSensorCalibrationValues(meshAddress:sensorMeshAddresses:sensorIntegrated:commandCount:commandDelay:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)isDeviceActiveMeshAddress:(int32_t)meshAddress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("isDeviceActive(meshAddress:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)provisionDeviceMeshDevice:(CnmeshMeshDevice *)meshDevice meshAddress:(int32_t)meshAddress provisionCommands:(NSArray<CnmeshCommands *> *)provisionCommands status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("provisionDevice(meshDevice:meshAddress:provisionCommands:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)provisionDeviceMacAddress:(NSString *)macAddress meshAddress:(int32_t)meshAddress provisionCommands:(NSArray<CnmeshCommands *> *)provisionCommands status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("provisionDevice(macAddress:meshAddress:provisionCommands:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)provisionGatewayMeshDevice:(CnmeshMeshDevice *)meshDevice status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("provisionGateway(meshDevice:status:completionHandler:)")));
- (CnmeshKotlinByteArray *)reverseArr:(CnmeshKotlinByteArray *)arr begin:(int32_t)begin end:(int32_t)end __attribute__((swift_name("reverse(arr:begin:end:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendCommandMeshAddress:(int32_t)meshAddress commands:(NSArray<CnmeshCommands *> *)commands status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("sendCommand(meshAddress:commands:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendCommandFactoryMeshAddress:(int32_t)meshAddress commands:(NSArray<CnmeshCommands *> *)commands status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("sendCommandFactory(meshAddress:commands:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendCommandWithNotificationsMeshAddress:(int32_t)meshAddress commands:(NSArray<CnmeshCommands *> *)commands status:(void (^)(CnmeshDataState<NSArray<CnmeshMeshNotification *> *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("sendCommandWithNotifications(meshAddress:commands:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)startMeshOtaFirmware:(CnmeshKotlinByteArray *)firmware productId:(int32_t)productId connectedMeshDevice:(void (^)(CnmeshMeshDevice *))connectedMeshDevice otaFileProgress:(void (^)(CnmeshInt *))otaFileProgress otaProgress:(void (^)(CnmeshInt *))otaProgress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("startMeshOta(firmware:productId:connectedMeshDevice:otaFileProgress:otaProgress:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)startMeshOtaFirmware:(CnmeshKotlinByteArray *)firmware macAddress:(NSString *)macAddress otaFileProgress:(void (^)(CnmeshInt *))otaFileProgress otaProgress:(void (^)(CnmeshInt *))otaProgress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("startMeshOta(firmware:macAddress:otaFileProgress:otaProgress:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)startP2POtaFirmware:(CnmeshKotlinByteArray *)firmware macAddress:(NSString *)macAddress otaProgress:(void (^)(CnmeshInt *))otaProgress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("startP2POta(firmware:macAddress:otaProgress:status:completionHandler:)")));
- (void)startProvisionMode __attribute__((swift_name("startProvisionMode()")));
- (void)stopProvisionMode __attribute__((swift_name("stopProvisionMode()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)unProvisionDeviceMeshAddress:(int32_t)meshAddress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("unProvisionDevice(meshAddress:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)unProvisionDeviceMacAddress:(NSString *)macAddress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("unProvisionDevice(macAddress:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)unProvisionGatewayMacAddress:(NSString *)macAddress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("unProvisionGateway(macAddress:status:completionHandler:)")));
- (void)updateMeshUserNameAndPasswordUsername:(NSString * _Nullable)username password:(NSString * _Nullable)password __attribute__((swift_name("updateMeshUserNameAndPassword(username:password:)")));
- (void)updateMeshUserNamePasswordLtkUsername:(NSString * _Nullable)username password:(NSString * _Nullable)password ltk:(NSString * _Nullable)ltk __attribute__((swift_name("updateMeshUserNamePasswordLtk(username:password:ltk:)")));
@property (readonly) id<CnmeshSharedFlow> logEventFlow __attribute__((swift_name("logEventFlow")));
@property CnmeshMeshData * _Nullable meshData __attribute__((swift_name("meshData")));
@property (readonly) id<CnmeshSharedFlow> meshLightStatusEventFlow __attribute__((swift_name("meshLightStatusEventFlow")));
@property (readonly) id<CnmeshSharedFlow> meshSensorStatusEventFlow __attribute__((swift_name("meshSensorStatusEventFlow")));
@property (readonly) id<CnmeshSharedFlow> meshStateEventFlow __attribute__((swift_name("meshStateEventFlow")));
@property (readonly) id<CnmeshSharedFlow> meshStateFactoryEventFlow __attribute__((swift_name("meshStateFactoryEventFlow")));
@end;

__attribute__((swift_name("MeshMode")))
@interface CnmeshMeshMode : CnmeshBase
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshMode.Normal")))
@interface CnmeshMeshModeNormal : CnmeshMeshMode
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)normal __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshMeshModeNormal *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshMode.Provision")))
@interface CnmeshMeshModeProvision : CnmeshMeshMode
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)provision __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshMeshModeProvision *shared __attribute__((swift_name("shared")));
@end;

__attribute__((swift_name("MeshState")))
@interface CnmeshMeshState : CnmeshBase
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshState.Connected")))
@interface CnmeshMeshStateConnected : CnmeshMeshState
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)connected __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshMeshStateConnected *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshState.Connecting")))
@interface CnmeshMeshStateConnecting : CnmeshMeshState
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)connecting __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshMeshStateConnecting *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshState.Disconnected")))
@interface CnmeshMeshStateDisconnected : CnmeshMeshState
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)disconnected __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshMeshStateDisconnected *shared __attribute__((swift_name("shared")));
@end;

__attribute__((swift_name("MeshManagerEvent")))
@interface CnmeshMeshManagerEvent : CnmeshBase
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshManagerEvent.MeshConnectedDevice")))
@interface CnmeshMeshManagerEventMeshConnectedDevice : CnmeshMeshManagerEvent
- (instancetype)initWithMeshConnectedDevice:(CnmeshMeshDevice *)meshConnectedDevice __attribute__((swift_name("init(meshConnectedDevice:)"))) __attribute__((objc_designated_initializer));
- (CnmeshMeshDevice *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshManagerEventMeshConnectedDevice *)doCopyMeshConnectedDevice:(CnmeshMeshDevice *)meshConnectedDevice __attribute__((swift_name("doCopy(meshConnectedDevice:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshMeshDevice *meshConnectedDevice __attribute__((swift_name("meshConnectedDevice")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshManagerEvent.MeshConnecting")))
@interface CnmeshMeshManagerEventMeshConnecting : CnmeshMeshManagerEvent
- (instancetype)initWithConnecting:(CnmeshBoolean * _Nullable)connecting __attribute__((swift_name("init(connecting:)"))) __attribute__((objc_designated_initializer));
- (CnmeshBoolean * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshManagerEventMeshConnecting *)doCopyConnecting:(CnmeshBoolean * _Nullable)connecting __attribute__((swift_name("doCopy(connecting:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshBoolean * _Nullable connecting __attribute__((swift_name("connecting")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshManagerEvent.MeshConnection")))
@interface CnmeshMeshManagerEventMeshConnection : CnmeshMeshManagerEvent
- (instancetype)initWithMeshState:(CnmeshMeshState * _Nullable)meshState __attribute__((swift_name("init(meshState:)"))) __attribute__((objc_designated_initializer));
- (CnmeshMeshState * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshManagerEventMeshConnection *)doCopyMeshState:(CnmeshMeshState * _Nullable)meshState __attribute__((swift_name("doCopy(meshState:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshMeshState * _Nullable meshState __attribute__((swift_name("meshState")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshManagerEvent.MeshDevices")))
@interface CnmeshMeshManagerEventMeshDevices : CnmeshMeshManagerEvent
- (instancetype)initWithMeshConnectedDevices:(NSArray<CnmeshMeshDevice *> *)meshConnectedDevices __attribute__((swift_name("init(meshConnectedDevices:)"))) __attribute__((objc_designated_initializer));
- (NSArray<CnmeshMeshDevice *> *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshManagerEventMeshDevices *)doCopyMeshConnectedDevices:(NSArray<CnmeshMeshDevice *> *)meshConnectedDevices __attribute__((swift_name("doCopy(meshConnectedDevices:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<CnmeshMeshDevice *> *meshConnectedDevices __attribute__((swift_name("meshConnectedDevices")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshManagerEvent.MeshManualProvisioning")))
@interface CnmeshMeshManagerEventMeshManualProvisioning : CnmeshMeshManagerEvent
- (instancetype)initWithManualProvisioning:(CnmeshBoolean * _Nullable)manualProvisioning __attribute__((swift_name("init(manualProvisioning:)"))) __attribute__((objc_designated_initializer));
- (CnmeshBoolean * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshManagerEventMeshManualProvisioning *)doCopyManualProvisioning:(CnmeshBoolean * _Nullable)manualProvisioning __attribute__((swift_name("doCopy(manualProvisioning:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshBoolean * _Nullable manualProvisioning __attribute__((swift_name("manualProvisioning")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshManagerEvent.MeshOtaInProgress")))
@interface CnmeshMeshManagerEventMeshOtaInProgress : CnmeshMeshManagerEvent
- (instancetype)initWithOtaInProgress:(CnmeshBoolean * _Nullable)otaInProgress __attribute__((swift_name("init(otaInProgress:)"))) __attribute__((objc_designated_initializer));
- (CnmeshBoolean * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshManagerEventMeshOtaInProgress *)doCopyOtaInProgress:(CnmeshBoolean * _Nullable)otaInProgress __attribute__((swift_name("doCopy(otaInProgress:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshBoolean * _Nullable otaInProgress __attribute__((swift_name("otaInProgress")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshManagerEvent.MeshOtaStatus")))
@interface CnmeshMeshManagerEventMeshOtaStatus : CnmeshMeshManagerEvent
- (instancetype)initWithOtaStatus:(CnmeshOtaStatus * _Nullable)otaStatus __attribute__((swift_name("init(otaStatus:)"))) __attribute__((objc_designated_initializer));
- (CnmeshOtaStatus * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshManagerEventMeshOtaStatus *)doCopyOtaStatus:(CnmeshOtaStatus * _Nullable)otaStatus __attribute__((swift_name("doCopy(otaStatus:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshOtaStatus * _Nullable otaStatus __attribute__((swift_name("otaStatus")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshManagerEvent.MeshProvisionedDevice")))
@interface CnmeshMeshManagerEventMeshProvisionedDevice : CnmeshMeshManagerEvent
- (instancetype)initWithMeshProvisionedDevice:(CnmeshMeshDevice *)meshProvisionedDevice __attribute__((swift_name("init(meshProvisionedDevice:)"))) __attribute__((objc_designated_initializer));
- (CnmeshMeshDevice *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshManagerEventMeshProvisionedDevice *)doCopyMeshProvisionedDevice:(CnmeshMeshDevice *)meshProvisionedDevice __attribute__((swift_name("doCopy(meshProvisionedDevice:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshMeshDevice *meshProvisionedDevice __attribute__((swift_name("meshProvisionedDevice")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshManagerEvent.MeshProvisionedDevices")))
@interface CnmeshMeshManagerEventMeshProvisionedDevices : CnmeshMeshManagerEvent
- (instancetype)initWithMeshProvisionedDevices:(NSArray<CnmeshMeshDevice *> *)meshProvisionedDevices __attribute__((swift_name("init(meshProvisionedDevices:)"))) __attribute__((objc_designated_initializer));
- (NSArray<CnmeshMeshDevice *> *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshManagerEventMeshProvisionedDevices *)doCopyMeshProvisionedDevices:(NSArray<CnmeshMeshDevice *> *)meshProvisionedDevices __attribute__((swift_name("doCopy(meshProvisionedDevices:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<CnmeshMeshDevice *> *meshProvisionedDevices __attribute__((swift_name("meshProvisionedDevices")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshManagerEvent.MeshProvisioning")))
@interface CnmeshMeshManagerEventMeshProvisioning : CnmeshMeshManagerEvent
- (instancetype)initWithProvisioning:(CnmeshBoolean * _Nullable)provisioning __attribute__((swift_name("init(provisioning:)"))) __attribute__((objc_designated_initializer));
- (CnmeshBoolean * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshManagerEventMeshProvisioning *)doCopyProvisioning:(CnmeshBoolean * _Nullable)provisioning __attribute__((swift_name("doCopy(provisioning:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshBoolean * _Nullable provisioning __attribute__((swift_name("provisioning")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshManagerEvent.MeshProvisioningMeshDevice")))
@interface CnmeshMeshManagerEventMeshProvisioningMeshDevice : CnmeshMeshManagerEvent
- (instancetype)initWithMeshProvisioningDevice:(CnmeshMeshDevice *)meshProvisioningDevice __attribute__((swift_name("init(meshProvisioningDevice:)"))) __attribute__((objc_designated_initializer));
- (CnmeshMeshDevice *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshManagerEventMeshProvisioningMeshDevice *)doCopyMeshProvisioningDevice:(CnmeshMeshDevice *)meshProvisioningDevice __attribute__((swift_name("doCopy(meshProvisioningDevice:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshMeshDevice *meshProvisioningDevice __attribute__((swift_name("meshProvisioningDevice")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshManagerEvent.MeshProvisioningMeshDevices")))
@interface CnmeshMeshManagerEventMeshProvisioningMeshDevices : CnmeshMeshManagerEvent
- (instancetype)initWithMeshProvisioningDevices:(NSArray<CnmeshMeshDevice *> *)meshProvisioningDevices __attribute__((swift_name("init(meshProvisioningDevices:)"))) __attribute__((objc_designated_initializer));
- (NSArray<CnmeshMeshDevice *> *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshManagerEventMeshProvisioningMeshDevices *)doCopyMeshProvisioningDevices:(NSArray<CnmeshMeshDevice *> *)meshProvisioningDevices __attribute__((swift_name("doCopy(meshProvisioningDevices:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<CnmeshMeshDevice *> *meshProvisioningDevices __attribute__((swift_name("meshProvisioningDevices")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshManagerEvent.MeshResetting")))
@interface CnmeshMeshManagerEventMeshResetting : CnmeshMeshManagerEvent
- (instancetype)initWithResetting:(CnmeshBoolean * _Nullable)resetting __attribute__((swift_name("init(resetting:)"))) __attribute__((objc_designated_initializer));
- (CnmeshBoolean * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshManagerEventMeshResetting *)doCopyResetting:(CnmeshBoolean * _Nullable)resetting __attribute__((swift_name("doCopy(resetting:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshBoolean * _Nullable resetting __attribute__((swift_name("resetting")));
@end;

__attribute__((swift_name("DeviceService")))
@protocol CnmeshDeviceService
@required
- (void)brightnessMacAddress:(NSString *)macAddress brightness:(int32_t)brightness __attribute__((swift_name("brightness(macAddress:brightness:)")));
- (void)brightnessAllBrightness:(int32_t)brightness __attribute__((swift_name("brightnessAll(brightness:)")));
- (void)meshDeviceAdvertisementMeshDeviceAdvertisement:(CnmeshMeshDeviceAdvertisement *)meshDeviceAdvertisement __attribute__((swift_name("meshDeviceAdvertisement(meshDeviceAdvertisement:)")));
- (void)notificationNotificationInfo:(CnmeshNotificationInfo *)notificationInfo __attribute__((swift_name("notification(notificationInfo:)")));
- (void)onAllOn:(BOOL)on __attribute__((swift_name("onAll(on:)")));
- (void)onOffMacAddress:(NSString *)macAddress on:(BOOL)on __attribute__((swift_name("onOff(macAddress:on:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DeviceServiceImpl")))
@interface CnmeshDeviceServiceImpl : CnmeshBase <CnmeshDeviceService, CnmeshKtor_ioCloseable>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)brightnessMacAddress:(NSString *)macAddress brightness:(int32_t)brightness __attribute__((swift_name("brightness(macAddress:brightness:)")));
- (void)brightnessAllBrightness:(int32_t)brightness __attribute__((swift_name("brightnessAll(brightness:)")));
- (void)clearMeshDevices __attribute__((swift_name("clearMeshDevices()")));
- (void)close __attribute__((swift_name("close()")));
- (void)meshDeviceMeshDevice:(CnmeshMeshDevice *)meshDevice __attribute__((swift_name("meshDevice(meshDevice:)")));
- (void)meshDeviceAdvertisementMeshDeviceAdvertisement:(CnmeshMeshDeviceAdvertisement *)meshDeviceAdvertisement __attribute__((swift_name("meshDeviceAdvertisement(meshDeviceAdvertisement:)")));
- (void)meshDevicesMeshDevices:(NSArray<CnmeshMeshDevice *> *)meshDevices __attribute__((swift_name("meshDevices(meshDevices:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)modifyDeviceListBlock:(void (^)(NSMutableArray<CnmeshMeshDevice *> *))block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("modifyDeviceList(block:completionHandler:)")));
- (void)notificationNotificationInfo:(CnmeshNotificationInfo *)notificationInfo __attribute__((swift_name("notification(notificationInfo:)")));
- (void)onAllOn:(BOOL)on __attribute__((swift_name("onAll(on:)")));
- (void)onOffMacAddress:(NSString *)macAddress on:(BOOL)on __attribute__((swift_name("onOff(macAddress:on:)")));
@property (readonly) id<CnmeshMutableSharedFlow> meshDevicesMapFlow __attribute__((swift_name("meshDevicesMapFlow")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CreateMeshDevice")))
@interface CnmeshCreateMeshDevice : CnmeshBase
- (instancetype)initWithMeshDeviceAdvertisement:(CnmeshMeshDeviceAdvertisement * _Nullable)meshDeviceAdvertisement notificationInfo:(CnmeshNotificationInfo * _Nullable)notificationInfo onAll:(CnmeshBoolean * _Nullable)onAll brightnessAll:(CnmeshInt * _Nullable)brightnessAll deviceOnOff:(CnmeshDeviceOnOff * _Nullable)deviceOnOff deviceBrightness:(CnmeshDeviceBrightness * _Nullable)deviceBrightness meshDevice:(CnmeshMeshDevice * _Nullable)meshDevice meshDevices:(NSArray<CnmeshMeshDevice *> * _Nullable)meshDevices __attribute__((swift_name("init(meshDeviceAdvertisement:notificationInfo:onAll:brightnessAll:deviceOnOff:deviceBrightness:meshDevice:meshDevices:)"))) __attribute__((objc_designated_initializer));
- (CnmeshMeshDeviceAdvertisement * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshNotificationInfo * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshBoolean * _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshDeviceOnOff * _Nullable)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshDeviceBrightness * _Nullable)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshDevice * _Nullable)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSArray<CnmeshMeshDevice *> * _Nullable)component8 __attribute__((swift_name("component8()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCreateMeshDevice *)doCopyMeshDeviceAdvertisement:(CnmeshMeshDeviceAdvertisement * _Nullable)meshDeviceAdvertisement notificationInfo:(CnmeshNotificationInfo * _Nullable)notificationInfo onAll:(CnmeshBoolean * _Nullable)onAll brightnessAll:(CnmeshInt * _Nullable)brightnessAll deviceOnOff:(CnmeshDeviceOnOff * _Nullable)deviceOnOff deviceBrightness:(CnmeshDeviceBrightness * _Nullable)deviceBrightness meshDevice:(CnmeshMeshDevice * _Nullable)meshDevice meshDevices:(NSArray<CnmeshMeshDevice *> * _Nullable)meshDevices __attribute__((swift_name("doCopy(meshDeviceAdvertisement:notificationInfo:onAll:brightnessAll:deviceOnOff:deviceBrightness:meshDevice:meshDevices:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshInt * _Nullable brightnessAll __attribute__((swift_name("brightnessAll")));
@property (readonly) CnmeshDeviceBrightness * _Nullable deviceBrightness __attribute__((swift_name("deviceBrightness")));
@property (readonly) CnmeshDeviceOnOff * _Nullable deviceOnOff __attribute__((swift_name("deviceOnOff")));
@property (readonly) CnmeshMeshDevice * _Nullable meshDevice __attribute__((swift_name("meshDevice")));
@property (readonly) CnmeshMeshDeviceAdvertisement * _Nullable meshDeviceAdvertisement __attribute__((swift_name("meshDeviceAdvertisement")));
@property (readonly) NSArray<CnmeshMeshDevice *> * _Nullable meshDevices __attribute__((swift_name("meshDevices")));
@property (readonly) CnmeshNotificationInfo * _Nullable notificationInfo __attribute__((swift_name("notificationInfo")));
@property (readonly) CnmeshBoolean * _Nullable onAll __attribute__((swift_name("onAll")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DeviceBrightness")))
@interface CnmeshDeviceBrightness : CnmeshBase
- (instancetype)initWithMacAddress:(NSString * _Nullable)macAddress brightness:(CnmeshInt * _Nullable)brightness __attribute__((swift_name("init(macAddress:brightness:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshDeviceBrightness *)doCopyMacAddress:(NSString * _Nullable)macAddress brightness:(CnmeshInt * _Nullable)brightness __attribute__((swift_name("doCopy(macAddress:brightness:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshInt * _Nullable brightness __attribute__((swift_name("brightness")));
@property (readonly) NSString * _Nullable macAddress __attribute__((swift_name("macAddress")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DeviceOnOff")))
@interface CnmeshDeviceOnOff : CnmeshBase
- (instancetype)initWithMacAddress:(NSString * _Nullable)macAddress on:(CnmeshBoolean * _Nullable)on __attribute__((swift_name("init(macAddress:on:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshBoolean * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshDeviceOnOff *)doCopyMacAddress:(NSString * _Nullable)macAddress on:(CnmeshBoolean * _Nullable)on __attribute__((swift_name("doCopy(macAddress:on:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString * _Nullable macAddress __attribute__((swift_name("macAddress")));
@property (readonly) CnmeshBoolean * _Nullable on __attribute__((swift_name("on")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OtaPacketParser")))
@interface CnmeshOtaPacketParser : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)clear __attribute__((swift_name("clear()")));
- (int32_t)crc16Packet:(CnmeshKotlinByteArray *)packet __attribute__((swift_name("crc16(packet:)")));
- (void)fillCrcPacket:(CnmeshKotlinByteArray *)packet crc:(int32_t)crc __attribute__((swift_name("fillCrc(packet:crc:)")));
- (void)fillIndexPacket:(CnmeshKotlinByteArray *)packet index:(int32_t)index __attribute__((swift_name("fillIndex(packet:index:)")));
- (CnmeshKotlinByteArray *)getCheckPacket __attribute__((swift_name("getCheckPacket()")));
- (CnmeshKotlinByteArray * _Nullable)getNextPacket __attribute__((swift_name("getNextPacket()")));
- (int32_t)getNextPacketIndex __attribute__((swift_name("getNextPacketIndex()")));
- (CnmeshKotlinByteArray * _Nullable)getPacketIndex:(int32_t)index __attribute__((swift_name("getPacket(index:)")));
- (int32_t)getProgress __attribute__((swift_name("getProgress()")));
- (BOOL)hasNextPacket __attribute__((swift_name("hasNextPacket()")));
- (BOOL)invalidateProgress __attribute__((swift_name("invalidateProgress()")));
- (void)setData:(CnmeshKotlinByteArray * _Nullable)data __attribute__((swift_name("set(data:)")));
@end;

__attribute__((swift_name("OtaService")))
@protocol CnmeshOtaService
@required
- (void)startOtaFirmware:(CnmeshKotlinByteArray *)firmware connectedMeshDevice:(CnmeshMeshDevice * _Nullable)connectedMeshDevice sessionKey:(CnmeshKotlinByteArray * _Nullable)sessionKey isP2p:(BOOL)isP2p otaStatus:(void (^)(CnmeshDataState<CnmeshOtaStatus *> *))otaStatus __attribute__((swift_name("startOta(firmware:connectedMeshDevice:sessionKey:isP2p:otaStatus:)")));
- (void)stopOta __attribute__((swift_name("stopOta()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OtaServiceImpl")))
@interface CnmeshOtaServiceImpl : CnmeshBase <CnmeshOtaService, CnmeshKtor_ioCloseable>
- (instancetype)initWithMeshDeviceConnecter:(CnmeshMeshDeviceConnecterImpl *)meshDeviceConnecter commandServiceImpl:(CnmeshCommandServiceImpl * _Nullable)commandServiceImpl commandAes:(CnmeshCommandAes *)commandAes __attribute__((swift_name("init(meshDeviceConnecter:commandServiceImpl:commandAes:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));
- (CnmeshKotlinByteArray *)getMacBytesMacAddress:(NSString * _Nullable)macAddress __attribute__((swift_name("getMacBytes(macAddress:)")));
- (CnmeshKotlinByteArray *)reverseArr:(CnmeshKotlinByteArray *)arr begin:(int32_t)begin end:(int32_t)end __attribute__((swift_name("reverse(arr:begin:end:)")));
- (void)startOtaFirmware:(CnmeshKotlinByteArray *)firmware connectedMeshDevice:(CnmeshMeshDevice * _Nullable)connectedMeshDevice sessionKey:(CnmeshKotlinByteArray * _Nullable)sessionKey isP2p:(BOOL)isP2p otaStatus:(void (^)(CnmeshDataState<CnmeshOtaStatus *> *))otaStatus __attribute__((swift_name("startOta(firmware:connectedMeshDevice:sessionKey:isP2p:otaStatus:)")));
- (void)stopOta __attribute__((swift_name("stopOta()")));
@property (readonly) CnmeshCommandAes *commandAes __attribute__((swift_name("commandAes")));
@property (readonly) CnmeshCommandServiceImpl * _Nullable commandServiceImpl __attribute__((swift_name("commandServiceImpl")));
@property (readonly) CnmeshMeshDeviceConnecterImpl *meshDeviceConnecter __attribute__((swift_name("meshDeviceConnecter")));
@end;

__attribute__((swift_name("OtaStatus")))
@interface CnmeshOtaStatus : CnmeshBase
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OtaStatus.StatusOtaCompleted")))
@interface CnmeshOtaStatusStatusOtaCompleted : CnmeshOtaStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)statusOtaCompleted __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshOtaStatusStatusOtaCompleted *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OtaStatus.StatusOtaFailed")))
@interface CnmeshOtaStatusStatusOtaFailed : CnmeshOtaStatus
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshOtaStatusStatusOtaFailed *)doCopyMessage:(NSString *)message __attribute__((swift_name("doCopy(message:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *message __attribute__((swift_name("message")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OtaStatus.StatusOtaFileSending")))
@interface CnmeshOtaStatusStatusOtaFileSending : CnmeshOtaStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)statusOtaFileSending __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshOtaStatusStatusOtaFileSending *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OtaStatus.StatusOtaFileSent")))
@interface CnmeshOtaStatusStatusOtaFileSent : CnmeshOtaStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)statusOtaFileSent __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshOtaStatusStatusOtaFileSent *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OtaStatus.StatusOtaFileSentProgress")))
@interface CnmeshOtaStatusStatusOtaFileSentProgress : CnmeshOtaStatus
- (instancetype)initWithProgress:(int32_t)progress __attribute__((swift_name("init(progress:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshOtaStatusStatusOtaFileSentProgress *)doCopyProgress:(int32_t)progress __attribute__((swift_name("doCopy(progress:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t progress __attribute__((swift_name("progress")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OtaStatus.StatusOtaGetDeviceStateRequest")))
@interface CnmeshOtaStatusStatusOtaGetDeviceStateRequest : CnmeshOtaStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)statusOtaGetDeviceStateRequest __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshOtaStatusStatusOtaGetDeviceStateRequest *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OtaStatus.StatusOtaGetDeviceStateResponse")))
@interface CnmeshOtaStatusStatusOtaGetDeviceStateResponse : CnmeshOtaStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)statusOtaGetDeviceStateResponse __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshOtaStatusStatusOtaGetDeviceStateResponse *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OtaStatus.StatusOtaMeshProgress")))
@interface CnmeshOtaStatusStatusOtaMeshProgress : CnmeshOtaStatus
- (instancetype)initWithProgress:(int32_t)progress __attribute__((swift_name("init(progress:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshOtaStatusStatusOtaMeshProgress *)doCopyProgress:(int32_t)progress __attribute__((swift_name("doCopy(progress:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t progress __attribute__((swift_name("progress")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OtaStatus.StatusOtaSetModeRequest")))
@interface CnmeshOtaStatusStatusOtaSetModeRequest : CnmeshOtaStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)statusOtaSetModeRequest __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshOtaStatusStatusOtaSetModeRequest *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OtaStatus.StatusOtaSetModeResponse")))
@interface CnmeshOtaStatusStatusOtaSetModeResponse : CnmeshOtaStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)statusOtaSetModeResponse __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshOtaStatusStatusOtaSetModeResponse *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CommandConstants")))
@interface CnmeshCommandConstants : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)commandConstants __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshCommandConstants *shared __attribute__((swift_name("shared")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_C0 __attribute__((swift_name("BLE_GATT_OP_CTRL_C0")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_C1 __attribute__((swift_name("BLE_GATT_OP_CTRL_C1")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_C8 __attribute__((swift_name("BLE_GATT_OP_CTRL_C8")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_CA __attribute__((swift_name("BLE_GATT_OP_CTRL_CA")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_D0 __attribute__((swift_name("BLE_GATT_OP_CTRL_D0")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_D1 __attribute__((swift_name("BLE_GATT_OP_CTRL_D1")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_D2 __attribute__((swift_name("BLE_GATT_OP_CTRL_D2")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_D3 __attribute__((swift_name("BLE_GATT_OP_CTRL_D3")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_D4 __attribute__((swift_name("BLE_GATT_OP_CTRL_D4")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_D5 __attribute__((swift_name("BLE_GATT_OP_CTRL_D5")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_D6 __attribute__((swift_name("BLE_GATT_OP_CTRL_D6")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_D7 __attribute__((swift_name("BLE_GATT_OP_CTRL_D7")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_D8 __attribute__((swift_name("BLE_GATT_OP_CTRL_D8")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_D9 __attribute__((swift_name("BLE_GATT_OP_CTRL_D9")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_DA __attribute__((swift_name("BLE_GATT_OP_CTRL_DA")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_DB __attribute__((swift_name("BLE_GATT_OP_CTRL_DB")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_DC __attribute__((swift_name("BLE_GATT_OP_CTRL_DC")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_DD __attribute__((swift_name("BLE_GATT_OP_CTRL_DD")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_DE __attribute__((swift_name("BLE_GATT_OP_CTRL_DE")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_DF __attribute__((swift_name("BLE_GATT_OP_CTRL_DF")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_E0 __attribute__((swift_name("BLE_GATT_OP_CTRL_E0")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_E1 __attribute__((swift_name("BLE_GATT_OP_CTRL_E1")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_E2 __attribute__((swift_name("BLE_GATT_OP_CTRL_E2")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_E3 __attribute__((swift_name("BLE_GATT_OP_CTRL_E3")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_E4 __attribute__((swift_name("BLE_GATT_OP_CTRL_E4")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_E5 __attribute__((swift_name("BLE_GATT_OP_CTRL_E5")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_E6 __attribute__((swift_name("BLE_GATT_OP_CTRL_E6")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_E7 __attribute__((swift_name("BLE_GATT_OP_CTRL_E7")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_E8 __attribute__((swift_name("BLE_GATT_OP_CTRL_E8")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_E9 __attribute__((swift_name("BLE_GATT_OP_CTRL_E9")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_EA __attribute__((swift_name("BLE_GATT_OP_CTRL_EA")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_EB __attribute__((swift_name("BLE_GATT_OP_CTRL_EB")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_EE __attribute__((swift_name("BLE_GATT_OP_CTRL_EE")));
@property (readonly) int8_t BLE_GATT_OP_CTRL_EF __attribute__((swift_name("BLE_GATT_OP_CTRL_EF")));
@end;

__attribute__((swift_name("CommandService")))
@protocol CnmeshCommandService
@required
- (void)sendCommandOpcode:(int8_t)opcode address:(int32_t)address params:(CnmeshKotlinByteArray *)params macAddressString:(NSString *)macAddressString key:(CnmeshKotlinByteArray *)key companyIdentifier:(int32_t)companyIdentifier __attribute__((swift_name("sendCommand(opcode:address:params:macAddressString:key:companyIdentifier:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CommandServiceImpl")))
@interface CnmeshCommandServiceImpl : CnmeshBase <CnmeshCommandService>
- (instancetype)initWithCommandAes:(CnmeshCommandAes *)commandAes connecter:(CnmeshMeshDeviceConnecterImpl *)connecter __attribute__((swift_name("init(commandAes:connecter:)"))) __attribute__((objc_designated_initializer));
- (CnmeshKotlinByteArray *)getMacBytesMacAddress:(NSString * _Nullable)macAddress __attribute__((swift_name("getMacBytes(macAddress:)")));
- (CnmeshKotlinByteArray * _Nullable)reverseArr:(CnmeshKotlinByteArray *)arr begin:(int32_t)begin end:(int32_t)end __attribute__((swift_name("reverse(arr:begin:end:)")));
- (CnmeshKotlinByteArray * _Nullable)reverseA:(CnmeshKotlinByteArray * _Nullable)a __attribute__((swift_name("reverse(a:)")));
- (void)sendCommandOpcode:(int8_t)opcode address:(int32_t)address params:(CnmeshKotlinByteArray *)params macAddressString:(NSString *)macAddressString key:(CnmeshKotlinByteArray *)key companyIdentifier:(int32_t)companyIdentifier __attribute__((swift_name("sendCommand(opcode:address:params:macAddressString:key:companyIdentifier:)")));
- (void)sendCommandWithResponseOpcode:(int8_t)opcode address:(int32_t)address params:(CnmeshKotlinByteArray *)params macAddressString:(NSString *)macAddressString key:(CnmeshKotlinByteArray *)key companyIdentifier:(int32_t)companyIdentifier status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("sendCommandWithResponse(opcode:address:params:macAddressString:key:companyIdentifier:status:)")));
@property (readonly) CnmeshCommandAes *commandAes __attribute__((swift_name("commandAes")));
@property (readonly) CnmeshMeshDeviceConnecterImpl *connecter __attribute__((swift_name("connecter")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PairConstants")))
@interface CnmeshPairConstants : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)pairConstants __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshPairConstants *shared __attribute__((swift_name("shared")));
@property (readonly) int8_t BLE_GATT_OP_PAIR_CONFIRM __attribute__((swift_name("BLE_GATT_OP_PAIR_CONFIRM")));
@property (readonly) int8_t BLE_GATT_OP_PAIR_DELETE __attribute__((swift_name("BLE_GATT_OP_PAIR_DELETE")));
@property (readonly) int8_t BLE_GATT_OP_PAIR_DEL_RSP __attribute__((swift_name("BLE_GATT_OP_PAIR_DEL_RSP")));
@property (readonly) int8_t BLE_GATT_OP_PAIR_ENC_FAIL __attribute__((swift_name("BLE_GATT_OP_PAIR_ENC_FAIL")));
@property (readonly) int8_t BLE_GATT_OP_PAIR_ENC_REQ __attribute__((swift_name("BLE_GATT_OP_PAIR_ENC_REQ")));
@property (readonly) int8_t BLE_GATT_OP_PAIR_ENC_RSP __attribute__((swift_name("BLE_GATT_OP_PAIR_ENC_RSP")));
@property (readonly) int8_t BLE_GATT_OP_PAIR_LTK __attribute__((swift_name("BLE_GATT_OP_PAIR_LTK")));
@property (readonly) int8_t BLE_GATT_OP_PAIR_LTK_REQ __attribute__((swift_name("BLE_GATT_OP_PAIR_LTK_REQ")));
@property (readonly) int8_t BLE_GATT_OP_PAIR_LTK_RSP __attribute__((swift_name("BLE_GATT_OP_PAIR_LTK_RSP")));
@property (readonly) int8_t BLE_GATT_OP_PAIR_NETWORK_NAME __attribute__((swift_name("BLE_GATT_OP_PAIR_NETWORK_NAME")));
@property (readonly) int8_t BLE_GATT_OP_PAIR_PASS __attribute__((swift_name("BLE_GATT_OP_PAIR_PASS")));
@property (readonly) int8_t BLE_GATT_OP_PAIR_REJECT __attribute__((swift_name("BLE_GATT_OP_PAIR_REJECT")));
@property (readonly) int8_t BLE_GATT_OP_PAIR_REQ __attribute__((swift_name("BLE_GATT_OP_PAIR_REQ")));
@property (readonly) int8_t BLE_GATT_OP_PAIR_RSP __attribute__((swift_name("BLE_GATT_OP_PAIR_RSP")));
@property (readonly) NSString *NETWORK_NAME __attribute__((swift_name("NETWORK_NAME")));
@property (readonly) NSString *NETWORK_PASSWORD __attribute__((swift_name("NETWORK_PASSWORD")));
@end;

__attribute__((swift_name("PairService")))
@protocol CnmeshPairService
@required
- (void)loginMeshname:(CnmeshKotlinByteArray *)meshname meshpassword:(CnmeshKotlinByteArray *)meshpassword sessionKey:(void (^)(CnmeshDataState<CnmeshKotlinByteArray *> *))sessionKey __attribute__((swift_name("login(meshname:meshpassword:sessionKey:)")));
- (void)resetMeshMeshname:(CnmeshKotlinByteArray *)meshname meshpassword:(CnmeshKotlinByteArray *)meshpassword meshLtk:(CnmeshKotlinByteArray *)meshLtk sessionKey:(CnmeshKotlinByteArray *)sessionKey resetMeshStatus:(void (^)(CnmeshBoolean *))resetMeshStatus __attribute__((swift_name("resetMesh(meshname:meshpassword:meshLtk:sessionKey:resetMeshStatus:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PairServiceImpl")))
@interface CnmeshPairServiceImpl : CnmeshBase <CnmeshPairService, CnmeshKtor_ioCloseable>
- (instancetype)initWithMeshDeviceConnecter:(CnmeshMeshDeviceConnecterImpl *)meshDeviceConnecter __attribute__((swift_name("init(meshDeviceConnecter:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));
- (NSString *)getNetworkNameEmail:(NSString *)email __attribute__((swift_name("getNetworkName(email:)")));
- (NSString *)getNetworkPasswordEmail:(NSString *)email __attribute__((swift_name("getNetworkPassword(email:)")));
- (void)loginMeshname:(CnmeshKotlinByteArray *)meshname meshpassword:(CnmeshKotlinByteArray *)meshpassword sessionKey:(void (^)(CnmeshDataState<CnmeshKotlinByteArray *> *))sessionKey __attribute__((swift_name("login(meshname:meshpassword:sessionKey:)")));
- (void)resetLoginGatewayMeshname:(NSString *)meshname meshpassword:(NSString *)meshpassword ltk:(NSString *)ltk status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("resetLoginGateway(meshname:meshpassword:ltk:status:)")));
- (void)resetMeshMeshname:(CnmeshKotlinByteArray *)meshname meshpassword:(CnmeshKotlinByteArray *)meshpassword meshLtk:(CnmeshKotlinByteArray *)meshLtk sessionKey:(CnmeshKotlinByteArray *)sessionKey resetMeshStatus:(void (^)(CnmeshBoolean *))resetMeshStatus __attribute__((swift_name("resetMesh(meshname:meshpassword:meshLtk:sessionKey:resetMeshStatus:)")));
- (CnmeshKotlinByteArray * _Nullable)reverseArr:(CnmeshKotlinByteArray *)arr begin:(int32_t)begin end:(int32_t)end __attribute__((swift_name("reverse(arr:begin:end:)")));
- (CnmeshKotlinByteArray *)reverseA:(CnmeshKotlinByteArray * _Nullable)a __attribute__((swift_name("reverse(a:)")));
@property (readonly) CnmeshMeshDeviceConnecterImpl *meshDeviceConnecter __attribute__((swift_name("meshDeviceConnecter")));
@end;

__attribute__((unavailable("Kotlin subclass of Objective-C class can't be imported")))
__attribute__((swift_name("MeshNfc")))
@interface CnmeshMeshNfc : NSObject
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NFC")))
@interface CnmeshNFC : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)nFC __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshNFC *shared __attribute__((swift_name("shared")));
@property (readonly) NSObject *instance __attribute__((swift_name("instance")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NfcManager")))
@interface CnmeshNfcManager : CnmeshBase <CnmeshKoinComponent>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)editEnOceanSwitchMacAddress:(NSString *)macAddress groupAddress:(int32_t)groupAddress A0:(int32_t)A0 A1:(int32_t)A1 B0:(int32_t)B0 B1:(int32_t)B1 status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("editEnOceanSwitch(macAddress:groupAddress:A0:A1:B0:B1:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getEnOceanSensorStatus:(void (^)(CnmeshDataState<CnmeshMeshNFCDevice *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("getEnOceanSensor(status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getEnOceanSwitchStatus:(void (^)(CnmeshDataState<CnmeshMeshNFCDevice *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("getEnOceanSwitch(status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)provisionEnOceanSensorProvisionSensorEnOcean:(CnmeshEnOceanProvisionSensor *)provisionSensorEnOcean status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("provisionEnOceanSensor(provisionSensorEnOcean:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)provisionEnOceanSwitchProvisionEnOcean:(CnmeshEnOceanProvision *)provisionEnOcean status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("provisionEnOceanSwitch(provisionEnOcean:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("read(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readSensorWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readSensor(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)unProvisionEnOceanSensorMacAddress:(NSString *)macAddress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("unProvisionEnOceanSensor(macAddress:status:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)unProvisionEnOceanSwitchMacAddress:(NSString *)macAddress status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("unProvisionEnOceanSwitch(macAddress:status:completionHandler:)")));
@property (readonly) int8_t AUTHENTICATE __attribute__((swift_name("AUTHENTICATE")));
@property (readonly) int8_t CHANGE_PIN __attribute__((swift_name("CHANGE_PIN")));
@property (readonly) int8_t CONFIGURATION_PAGE __attribute__((swift_name("CONFIGURATION_PAGE")));
@property (readonly) int8_t CONFIGURATION_UPDATE __attribute__((swift_name("CONFIGURATION_UPDATE")));
@property (readonly) NSArray<CnmeshByte *> *ENOCEAN_FACTORY_CONFIGURATION_UPDATE __attribute__((swift_name("ENOCEAN_FACTORY_CONFIGURATION_UPDATE")));
@property (readonly) NSArray<CnmeshByte *> *ENOCEAN_FACTORY_OPTIONAL_DATA __attribute__((swift_name("ENOCEAN_FACTORY_OPTIONAL_DATA")));
@property (readonly) NSArray<CnmeshByte *> *ENOCEAN_FACTORY_PIN __attribute__((swift_name("ENOCEAN_FACTORY_PIN")));
@property (readonly) int32_t ENOCEAN_NETWORK_ID __attribute__((swift_name("ENOCEAN_NETWORK_ID")));
@property (readonly) NSArray<CnmeshByte *> *ENOCEAN_RESERVED __attribute__((swift_name("ENOCEAN_RESERVED")));
@property (readonly) NSArray<CnmeshByte *> *ENOCEAN_SENSOR_FACTORY_PIN __attribute__((swift_name("ENOCEAN_SENSOR_FACTORY_PIN")));
@property (readonly) int8_t MANUFACTURE_ID_WRITE_PAGE __attribute__((swift_name("MANUFACTURE_ID_WRITE_PAGE")));
@property (readonly) int8_t OPTIONAL_DATA_PAGE __attribute__((swift_name("OPTIONAL_DATA_PAGE")));
@property (readonly) int8_t PRODUCT_NAME_PAGE __attribute__((swift_name("PRODUCT_NAME_PAGE")));
@property (readonly) NSString *PTM215B __attribute__((swift_name("PTM215B")));
@property (readonly) NSString *PTM216B __attribute__((swift_name("PTM216B")));
@property (readonly) int8_t READ __attribute__((swift_name("READ")));
@property (readonly) int8_t SENSOR_CHANGE_PIN __attribute__((swift_name("SENSOR_CHANGE_PIN")));
@property (readonly) int8_t SENSOR_CONFIGURATION_PAGE __attribute__((swift_name("SENSOR_CONFIGURATION_PAGE")));
@property (readonly) NSArray<CnmeshByte *> *SENSOR_CONFIGURATION_UPDATE __attribute__((swift_name("SENSOR_CONFIGURATION_UPDATE")));
@property (readonly) NSArray<CnmeshByte *> *SENSOR_FACTORY_CONFIGURATION_UPDATE __attribute__((swift_name("SENSOR_FACTORY_CONFIGURATION_UPDATE")));
@property (readonly) int8_t SENSOR_MANUFACTURE_ID_WRITE_PAGE __attribute__((swift_name("SENSOR_MANUFACTURE_ID_WRITE_PAGE")));
@property (readonly) int8_t SENSOR_OPTIONAL_DATA_PAGE __attribute__((swift_name("SENSOR_OPTIONAL_DATA_PAGE")));
@property (readonly) int8_t SENSOR_STATIC_SOURCE_ADDRESS_PAGE __attribute__((swift_name("SENSOR_STATIC_SOURCE_ADDRESS_PAGE")));
@property (readonly) int8_t STATIC_SOURCE_ADDRESS_PAGE __attribute__((swift_name("STATIC_SOURCE_ADDRESS_PAGE")));
@property (readonly) int8_t WRITE __attribute__((swift_name("WRITE")));
@end;

__attribute__((swift_name("MeshDeviceScanner")))
@protocol CnmeshMeshDeviceScanner
@required
- (void)startScanMeshDeviceScannerFilter:(CnmeshMeshDeviceScannerFilter * _Nullable)meshDeviceScannerFilter emit:(void (^)(CnmeshDataState<CnmeshMeshDeviceAdvertisement *> *))emit __attribute__((swift_name("startScan(meshDeviceScannerFilter:emit:)")));
- (void)stopScan __attribute__((swift_name("stopScan()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshDeviceScannerConstants")))
@interface CnmeshMeshDeviceScannerConstants : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)meshDeviceScannerConstants __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshMeshDeviceScannerConstants *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *HEX_CHARS __attribute__((swift_name("HEX_CHARS")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshDeviceScannerFilter")))
@interface CnmeshMeshDeviceScannerFilter : CnmeshBase
- (instancetype)initWithScanDuration:(int64_t)scanDuration names:(NSArray<NSString *> *)names rssi:(CnmeshInt * _Nullable)rssi companyIdentifier:(CnmeshInt * _Nullable)companyIdentifier productId:(CnmeshInt * _Nullable)productId macAddress:(NSString * _Nullable)macAddress __attribute__((swift_name("init(scanDuration:names:rssi:companyIdentifier:productId:macAddress:)"))) __attribute__((objc_designated_initializer));
- (int64_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSArray<NSString *> *)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshDeviceScannerFilter *)doCopyScanDuration:(int64_t)scanDuration names:(NSArray<NSString *> *)names rssi:(CnmeshInt * _Nullable)rssi companyIdentifier:(CnmeshInt * _Nullable)companyIdentifier productId:(CnmeshInt * _Nullable)productId macAddress:(NSString * _Nullable)macAddress __attribute__((swift_name("doCopy(scanDuration:names:rssi:companyIdentifier:productId:macAddress:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshInt * _Nullable companyIdentifier __attribute__((swift_name("companyIdentifier")));
@property (readonly) NSString * _Nullable macAddress __attribute__((swift_name("macAddress")));
@property (readonly) NSArray<NSString *> *names __attribute__((swift_name("names")));
@property (readonly) CnmeshInt * _Nullable productId __attribute__((swift_name("productId")));
@property (readonly) CnmeshInt * _Nullable rssi __attribute__((swift_name("rssi")));
@property (readonly) int64_t scanDuration __attribute__((swift_name("scanDuration")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshDeviceScannerImpl")))
@interface CnmeshMeshDeviceScannerImpl : CnmeshBase <CnmeshMeshDeviceScanner, CnmeshKoinComponent, CnmeshKtor_ioCloseable>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)close __attribute__((swift_name("close()")));
- (void)startBatchScanMeshDeviceScannerFilter:(CnmeshMeshDeviceScannerFilter *)meshDeviceScannerFilter emit:(void (^)(CnmeshDataState<NSArray<CnmeshMeshDeviceAdvertisement *> *> *))emit __attribute__((swift_name("startBatchScan(meshDeviceScannerFilter:emit:)")));
- (void)startGatewayBatchScanDelay:(int64_t)delay emit:(void (^)(CnmeshDataState<NSArray<CnmeshMeshDeviceAdvertisement *> *> *))emit __attribute__((swift_name("startGatewayBatchScan(delay:emit:)")));
- (void)startNewBatchScanDelay:(int64_t)delay emit:(void (^)(CnmeshDataState<NSArray<CnmeshMeshDeviceAdvertisement *> *> *))emit __attribute__((swift_name("startNewBatchScan(delay:emit:)")));
- (void)startScanMeshDeviceScannerFilter:(CnmeshMeshDeviceScannerFilter * _Nullable)meshDeviceScannerFilter emit:(void (^)(CnmeshDataState<CnmeshMeshDeviceAdvertisement *> *))emit __attribute__((swift_name("startScan(meshDeviceScannerFilter:emit:)")));
- (void)stopScan __attribute__((swift_name("stopScan()")));
@property BOOL isScanning __attribute__((swift_name("isScanning")));
@end;

__attribute__((swift_name("MeshDeviceConnecter")))
@protocol CnmeshMeshDeviceConnecter
@required
- (void)connect __attribute__((swift_name("connect()")));
- (void)disconnectEmit:(void (^)(CnmeshDataState<CnmeshState *> *))emit __attribute__((swift_name("disconnect(emit:)")));
- (void)doInitAndConnectMeshDeviceAdvertisement:(CnmeshMeshDeviceAdvertisement *)meshDeviceAdvertisement emit:(void (^)(CnmeshDataState<CnmeshState *> *))emit __attribute__((swift_name("doInitAndConnect(meshDeviceAdvertisement:emit:)")));
- (void)doInitConnecterMeshDeviceAdvertisement:(CnmeshMeshDeviceAdvertisement *)meshDeviceAdvertisement emit:(void (^)(CnmeshDataState<CnmeshState *> *))emit __attribute__((swift_name("doInitConnecter(meshDeviceAdvertisement:emit:)")));
- (void)notificationsNotify:(void (^)(CnmeshDataState<CnmeshKotlinByteArray *> *))notify __attribute__((swift_name("notifications(notify:)")));
- (void)onClear __attribute__((swift_name("onClear()")));
- (void)readOtaRead:(void (^)(CnmeshDataState<CnmeshKotlinByteArray *> *))read __attribute__((swift_name("readOta(read:)")));
- (void)readPairRead:(void (^)(CnmeshDataState<CnmeshKotlinByteArray *> *))read __attribute__((swift_name("readPair(read:)")));
- (void)readPairTimeMillis:(int64_t)timeMillis read:(void (^)(CnmeshDataState<CnmeshKotlinByteArray *> *))read __attribute__((swift_name("readPair(timeMillis:read:)")));
- (void)sendCommandData:(CnmeshKotlinByteArray *)data __attribute__((swift_name("sendCommand(data:)")));
- (void)writeGatewayKeyData:(CnmeshKotlinByteArray *)data __attribute__((swift_name("writeGatewayKey(data:)")));
- (void)writeGatewaySaveData:(CnmeshKotlinByteArray *)data status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("writeGatewaySave(data:status:)")));
- (void)writeGatewayValueData:(CnmeshKotlinByteArray *)data __attribute__((swift_name("writeGatewayValue(data:)")));
- (void)writeNotificationData:(CnmeshKotlinByteArray *)data __attribute__((swift_name("writeNotification(data:)")));
- (void)writeOtaData:(CnmeshKotlinByteArray *)data success:(void (^)(CnmeshBoolean *))success __attribute__((swift_name("writeOta(data:success:)")));
- (void)writePairData:(CnmeshKotlinByteArray *)data __attribute__((swift_name("writePair(data:)")));
- (void)writePairData:(CnmeshKotlinByteArray *)data timeMillis:(int64_t)timeMillis __attribute__((swift_name("writePair(data:timeMillis:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshDeviceConnecterImpl")))
@interface CnmeshMeshDeviceConnecterImpl : CnmeshBase <CnmeshMeshDeviceConnecter, CnmeshKtor_ioCloseable>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)close __attribute__((swift_name("close()")));
- (void)connect __attribute__((swift_name("connect()")));
- (void)disconnectEmit:(void (^)(CnmeshDataState<CnmeshState *> *))emit __attribute__((swift_name("disconnect(emit:)")));
- (void)getRssiStatus:(void (^)(CnmeshDataState<CnmeshInt *> *))status __attribute__((swift_name("getRssi(status:)")));
- (void)doInitAndConnectMeshDeviceAdvertisement:(CnmeshMeshDeviceAdvertisement *)meshDeviceAdvertisement emit:(void (^)(CnmeshDataState<CnmeshState *> *))emit __attribute__((swift_name("doInitAndConnect(meshDeviceAdvertisement:emit:)")));
- (void)doInitConnecterMeshDeviceAdvertisement:(CnmeshMeshDeviceAdvertisement *)meshDeviceAdvertisement emit:(void (^)(CnmeshDataState<CnmeshState *> *))emit __attribute__((swift_name("doInitConnecter(meshDeviceAdvertisement:emit:)")));
- (BOOL)isDeviceReady __attribute__((swift_name("isDeviceReady()")));
- (void)notificationsNotify:(void (^)(CnmeshDataState<CnmeshKotlinByteArray *> *))notify __attribute__((swift_name("notifications(notify:)")));
- (void)onClear __attribute__((swift_name("onClear()")));
- (void)readOtaRead:(void (^)(CnmeshDataState<CnmeshKotlinByteArray *> *))read __attribute__((swift_name("readOta(read:)")));
- (void)readPairRead:(void (^)(CnmeshDataState<CnmeshKotlinByteArray *> *))read __attribute__((swift_name("readPair(read:)")));
- (void)readPairTimeMillis:(int64_t)timeMillis read:(void (^)(CnmeshDataState<CnmeshKotlinByteArray *> *))read __attribute__((swift_name("readPair(timeMillis:read:)")));
- (void)sendCommandData:(CnmeshKotlinByteArray *)data __attribute__((swift_name("sendCommand(data:)")));
- (void)sendCommandWithResponseData:(CnmeshKotlinByteArray *)data status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("sendCommandWithResponse(data:status:)")));
- (void)writeGatewayKeyData:(CnmeshKotlinByteArray *)data __attribute__((swift_name("writeGatewayKey(data:)")));
- (void)writeGatewaySaveData:(CnmeshKotlinByteArray *)data status:(void (^)(CnmeshDataState<CnmeshKotlinUnit *> *))status __attribute__((swift_name("writeGatewaySave(data:status:)")));
- (void)writeGatewayValueData:(CnmeshKotlinByteArray *)data __attribute__((swift_name("writeGatewayValue(data:)")));
- (void)writeNotificationData:(CnmeshKotlinByteArray *)data __attribute__((swift_name("writeNotification(data:)")));
- (void)writeOtaData:(CnmeshKotlinByteArray *)data success:(void (^)(CnmeshBoolean *))success __attribute__((swift_name("writeOta(data:success:)")));
- (void)writePairData:(CnmeshKotlinByteArray *)data __attribute__((swift_name("writePair(data:)")));
- (void)writePairData:(CnmeshKotlinByteArray *)data timeMillis:(int64_t)timeMillis __attribute__((swift_name("writePair(data:timeMillis:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RuntimeCache")))
@interface CnmeshRuntimeCache : CnmeshBase
- (instancetype)initWithPreference:(CnmeshPreference *)preference __attribute__((swift_name("init(preference:)"))) __attribute__((objc_designated_initializer));
@property CnmeshMeshData *meshData __attribute__((swift_name("meshData")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Preference")))
@interface CnmeshPreference : CnmeshBase
- (instancetype)initWithS:(id<CnmeshMultiplatform_settingsSettings>)s __attribute__((swift_name("init(s:)"))) __attribute__((objc_designated_initializer));
- (void)addDeviceDevice:(CnmeshMeshDevice *)device __attribute__((swift_name("addDevice(device:)")));
- (void)addGroupGroup:(CnmeshMeshGroup *)group __attribute__((swift_name("addGroup(group:)")));
- (NSArray<CnmeshMeshDevice *> *)getDevices __attribute__((swift_name("getDevices()")));
- (NSArray<CnmeshMeshGroup *> *)getGroups __attribute__((swift_name("getGroups()")));
- (CnmeshMeshData *)getMeshData __attribute__((swift_name("getMeshData()")));
- (void)setDevicesDevices:(NSArray<CnmeshMeshDevice *> *)devices __attribute__((swift_name("setDevices(devices:)")));
- (void)setGroupsGroups:(NSArray<CnmeshMeshGroup *> *)groups __attribute__((swift_name("setGroups(groups:)")));
- (void)setMeshDataMeshData:(CnmeshMeshData *)meshData __attribute__((swift_name("setMeshData(meshData:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PreferenceDevice")))
@interface CnmeshPreferenceDevice : CnmeshBase
- (instancetype)initWithId:(NSString * _Nullable)id name:(NSString * _Nullable)name rssi:(CnmeshInt * _Nullable)rssi companyIdentifier:(CnmeshInt * _Nullable)companyIdentifier macAddress:(NSString * _Nullable)macAddress productId:(CnmeshInt * _Nullable)productId status:(CnmeshInt * _Nullable)status meshAddress:(CnmeshInt * _Nullable)meshAddress relayCounter:(CnmeshInt * _Nullable)relayCounter chipType:(CnmeshInt * _Nullable)chipType firmwareVersion:(NSString * _Nullable)firmwareVersion vendorData:(NSString * _Nullable)vendorData vendorId:(CnmeshInt * _Nullable)vendorId on:(CnmeshBoolean * _Nullable)on brightness:(CnmeshInt * _Nullable)brightness reserve:(CnmeshInt * _Nullable)reserve __attribute__((swift_name("init(id:name:rssi:companyIdentifier:macAddress:productId:status:meshAddress:relayCounter:chipType:firmwareVersion:vendorData:vendorId:on:brightness:reserve:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshPreferenceDeviceCompanion *companion __attribute__((swift_name("companion")));
- (NSString * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component10 __attribute__((swift_name("component10()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component11 __attribute__((swift_name("component11()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component12 __attribute__((swift_name("component12()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component13 __attribute__((swift_name("component13()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshBoolean * _Nullable)component14 __attribute__((swift_name("component14()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component15 __attribute__((swift_name("component15()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component16 __attribute__((swift_name("component16()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component8 __attribute__((swift_name("component8()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component9 __attribute__((swift_name("component9()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshPreferenceDevice *)doCopyId:(NSString * _Nullable)id name:(NSString * _Nullable)name rssi:(CnmeshInt * _Nullable)rssi companyIdentifier:(CnmeshInt * _Nullable)companyIdentifier macAddress:(NSString * _Nullable)macAddress productId:(CnmeshInt * _Nullable)productId status:(CnmeshInt * _Nullable)status meshAddress:(CnmeshInt * _Nullable)meshAddress relayCounter:(CnmeshInt * _Nullable)relayCounter chipType:(CnmeshInt * _Nullable)chipType firmwareVersion:(NSString * _Nullable)firmwareVersion vendorData:(NSString * _Nullable)vendorData vendorId:(CnmeshInt * _Nullable)vendorId on:(CnmeshBoolean * _Nullable)on brightness:(CnmeshInt * _Nullable)brightness reserve:(CnmeshInt * _Nullable)reserve __attribute__((swift_name("doCopy(id:name:rssi:companyIdentifier:macAddress:productId:status:meshAddress:relayCounter:chipType:firmwareVersion:vendorData:vendorId:on:brightness:reserve:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshInt * _Nullable brightness __attribute__((swift_name("brightness")));
@property (readonly) CnmeshInt * _Nullable chipType __attribute__((swift_name("chipType")));
@property (readonly) CnmeshInt * _Nullable companyIdentifier __attribute__((swift_name("companyIdentifier")));
@property (readonly) NSString * _Nullable firmwareVersion __attribute__((swift_name("firmwareVersion")));
@property (readonly) NSString * _Nullable id __attribute__((swift_name("id")));
@property (readonly) NSString * _Nullable macAddress __attribute__((swift_name("macAddress")));
@property (readonly) CnmeshInt * _Nullable meshAddress __attribute__((swift_name("meshAddress")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@property (readonly) CnmeshBoolean * _Nullable on __attribute__((swift_name("on")));
@property (readonly) CnmeshInt * _Nullable productId __attribute__((swift_name("productId")));
@property (readonly) CnmeshInt * _Nullable relayCounter __attribute__((swift_name("relayCounter")));
@property (readonly) CnmeshInt * _Nullable reserve __attribute__((swift_name("reserve")));
@property (readonly) CnmeshInt * _Nullable rssi __attribute__((swift_name("rssi")));
@property (readonly) CnmeshInt * _Nullable status __attribute__((swift_name("status")));
@property (readonly) NSString * _Nullable vendorData __attribute__((swift_name("vendorData")));
@property (readonly) CnmeshInt * _Nullable vendorId __attribute__((swift_name("vendorId")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PreferenceDevice.Companion")))
@interface CnmeshPreferenceDeviceCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshPreferenceDeviceCompanion *shared __attribute__((swift_name("shared")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PreferenceGroup")))
@interface CnmeshPreferenceGroup : CnmeshBase
- (instancetype)initWithId:(NSString * _Nullable)id name:(NSString * _Nullable)name groupAddress:(CnmeshInt * _Nullable)groupAddress on:(CnmeshBoolean * _Nullable)on brightness:(CnmeshInt * _Nullable)brightness __attribute__((swift_name("init(id:name:groupAddress:on:brightness:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshPreferenceGroupCompanion *companion __attribute__((swift_name("companion")));
- (NSString * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshBoolean * _Nullable)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshPreferenceGroup *)doCopyId:(NSString * _Nullable)id name:(NSString * _Nullable)name groupAddress:(CnmeshInt * _Nullable)groupAddress on:(CnmeshBoolean * _Nullable)on brightness:(CnmeshInt * _Nullable)brightness __attribute__((swift_name("doCopy(id:name:groupAddress:on:brightness:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshInt * _Nullable brightness __attribute__((swift_name("brightness")));
@property (readonly) CnmeshInt * _Nullable groupAddress __attribute__((swift_name("groupAddress")));
@property (readonly) NSString * _Nullable id __attribute__((swift_name("id")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@property (readonly) CnmeshBoolean * _Nullable on __attribute__((swift_name("on")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PreferenceGroup.Companion")))
@interface CnmeshPreferenceGroupCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshPreferenceGroupCompanion *shared __attribute__((swift_name("shared")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PreferenceMeshData")))
@interface CnmeshPreferenceMeshData : CnmeshBase
- (instancetype)initWithFactoryMeshName:(NSString * _Nullable)factoryMeshName factoryMeshPassword:(NSString * _Nullable)factoryMeshPassword factoryLtk:(CnmeshKotlinByteArray * _Nullable)factoryLtk companyIdentifier:(NSArray<CnmeshInt *> * _Nullable)companyIdentifier provisionMeshName:(NSString * _Nullable)provisionMeshName provisionMeshPassword:(NSString * _Nullable)provisionMeshPassword provisionLtk:(CnmeshKotlinByteArray * _Nullable)provisionLtk connections:(CnmeshInt * _Nullable)connections scanDuration:(CnmeshLong * _Nullable)scanDuration __attribute__((swift_name("init(factoryMeshName:factoryMeshPassword:factoryLtk:companyIdentifier:provisionMeshName:provisionMeshPassword:provisionLtk:connections:scanDuration:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshPreferenceMeshDataCompanion *companion __attribute__((swift_name("companion")));
- (NSString * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKotlinByteArray * _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSArray<CnmeshInt *> * _Nullable)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKotlinByteArray * _Nullable)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component8 __attribute__((swift_name("component8()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshLong * _Nullable)component9 __attribute__((swift_name("component9()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshPreferenceMeshData *)doCopyFactoryMeshName:(NSString * _Nullable)factoryMeshName factoryMeshPassword:(NSString * _Nullable)factoryMeshPassword factoryLtk:(CnmeshKotlinByteArray * _Nullable)factoryLtk companyIdentifier:(NSArray<CnmeshInt *> * _Nullable)companyIdentifier provisionMeshName:(NSString * _Nullable)provisionMeshName provisionMeshPassword:(NSString * _Nullable)provisionMeshPassword provisionLtk:(CnmeshKotlinByteArray * _Nullable)provisionLtk connections:(CnmeshInt * _Nullable)connections scanDuration:(CnmeshLong * _Nullable)scanDuration __attribute__((swift_name("doCopy(factoryMeshName:factoryMeshPassword:factoryLtk:companyIdentifier:provisionMeshName:provisionMeshPassword:provisionLtk:connections:scanDuration:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property NSArray<CnmeshInt *> * _Nullable companyIdentifier __attribute__((swift_name("companyIdentifier")));
@property CnmeshInt * _Nullable connections __attribute__((swift_name("connections")));
@property CnmeshKotlinByteArray * _Nullable factoryLtk __attribute__((swift_name("factoryLtk")));
@property NSString * _Nullable factoryMeshName __attribute__((swift_name("factoryMeshName")));
@property NSString * _Nullable factoryMeshPassword __attribute__((swift_name("factoryMeshPassword")));
@property CnmeshKotlinByteArray * _Nullable provisionLtk __attribute__((swift_name("provisionLtk")));
@property NSString * _Nullable provisionMeshName __attribute__((swift_name("provisionMeshName")));
@property NSString * _Nullable provisionMeshPassword __attribute__((swift_name("provisionMeshPassword")));
@property CnmeshLong * _Nullable scanDuration __attribute__((swift_name("scanDuration")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PreferenceMeshData.Companion")))
@interface CnmeshPreferenceMeshDataCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshPreferenceMeshDataCompanion *shared __attribute__((swift_name("shared")));
- (id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Aes")))
@interface CnmeshAes : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (CnmeshKotlinByteArray *)decryptEncrypted:(CnmeshKotlinByteArray *)encrypted key:(CnmeshKotlinByteArray *)key iv:(CnmeshKotlinByteArray *)iv __attribute__((swift_name("decrypt(encrypted:key:iv:)")));
- (CnmeshKotlinByteArray *)encryptDecrypted:(CnmeshKotlinByteArray *)decrypted key:(CnmeshKotlinByteArray *)key iv:(CnmeshKotlinByteArray *)iv __attribute__((swift_name("encrypt(decrypted:key:iv:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CommandAes")))
@interface CnmeshCommandAes : CnmeshBase
- (instancetype)initWithAes:(CnmeshAes *)aes __attribute__((swift_name("init(aes:)"))) __attribute__((objc_designated_initializer));
- (BOOL)decryptCommandKey:(CnmeshKotlinByteArray *)key iv:(CnmeshKotlinByteArray *)iv mic:(CnmeshKotlinByteArray *)mic ps:(CnmeshKotlinByteArray *)ps __attribute__((swift_name("decryptCommand(key:iv:mic:ps:)")));
- (void)encryptCommandKey:(CnmeshKotlinByteArray *)key iv:(CnmeshKotlinByteArray *)iv mic:(CnmeshKotlinByteArray *)mic ps:(CnmeshKotlinByteArray *)ps __attribute__((swift_name("encryptCommand(key:iv:mic:ps:)")));
- (CnmeshKotlinByteArray *)reverseArr:(CnmeshKotlinByteArray *)arr begin:(int32_t)begin end:(int32_t)end __attribute__((swift_name("reverse(arr:begin:end:)")));
- (CnmeshKotlinByteArray *)reverseA:(CnmeshKotlinByteArray * _Nullable)a __attribute__((swift_name("reverse(a:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Logger__")))
@interface CnmeshLogger_ : CnmeshBase
- (instancetype)initWithClassName:(NSString *)className __attribute__((swift_name("init(className:)"))) __attribute__((objc_designated_initializer));
- (void)logMsg:(NSString *)msg __attribute__((swift_name("log(msg:)")));
@end;

__attribute__((swift_name("Commands")))
@interface CnmeshCommands : CnmeshBase
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.AddScene")))
@interface CnmeshCommandsAddScene : CnmeshCommands
- (instancetype)initWithSceneId:(int32_t)sceneId brightness:(int32_t)brightness red:(int32_t)red green:(int32_t)green blue:(int32_t)blue temperature:(int32_t)temperature commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(sceneId:brightness:red:green:blue:temperature:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsAddScene *)doCopySceneId:(int32_t)sceneId brightness:(int32_t)brightness red:(int32_t)red green:(int32_t)green blue:(int32_t)blue temperature:(int32_t)temperature commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(sceneId:brightness:red:green:blue:temperature:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t blue __attribute__((swift_name("blue")));
@property (readonly) int32_t brightness __attribute__((swift_name("brightness")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t green __attribute__((swift_name("green")));
@property (readonly) int32_t red __attribute__((swift_name("red")));
@property (readonly) int32_t sceneId __attribute__((swift_name("sceneId")));
@property (readonly) int32_t temperature __attribute__((swift_name("temperature")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.AddSensorTargetGroup")))
@interface CnmeshCommandsAddSensorTargetGroup : CnmeshCommands
- (instancetype)initWithSensorType:(int32_t)sensorType groupAddress:(int32_t)groupAddress isLocal:(BOOL)isLocal commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(sensorType:groupAddress:isLocal:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (BOOL)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsAddSensorTargetGroup *)doCopySensorType:(int32_t)sensorType groupAddress:(int32_t)groupAddress isLocal:(BOOL)isLocal commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(sensorType:groupAddress:isLocal:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t groupAddress __attribute__((swift_name("groupAddress")));
@property (readonly) BOOL isLocal __attribute__((swift_name("isLocal")));
@property (readonly) int32_t sensorType __attribute__((swift_name("sensorType")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.AddSensorTargetGroupV2")))
@interface CnmeshCommandsAddSensorTargetGroupV2 : CnmeshCommands
- (instancetype)initWithSensorType:(int32_t)sensorType groupAddress:(int32_t)groupAddress standbyAction:(int32_t)standbyAction standbyTimeout:(int32_t)standbyTimeout isLocal:(BOOL)isLocal commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(sensorType:groupAddress:standbyAction:standbyTimeout:isLocal:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (BOOL)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsAddSensorTargetGroupV2 *)doCopySensorType:(int32_t)sensorType groupAddress:(int32_t)groupAddress standbyAction:(int32_t)standbyAction standbyTimeout:(int32_t)standbyTimeout isLocal:(BOOL)isLocal commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(sensorType:groupAddress:standbyAction:standbyTimeout:isLocal:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t groupAddress __attribute__((swift_name("groupAddress")));
@property (readonly) BOOL isLocal __attribute__((swift_name("isLocal")));
@property (readonly) int32_t sensorType __attribute__((swift_name("sensorType")));
@property (readonly) int32_t standbyAction __attribute__((swift_name("standbyAction")));
@property (readonly) int32_t standbyTimeout __attribute__((swift_name("standbyTimeout")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.AddToGroup")))
@interface CnmeshCommandsAddToGroup : CnmeshCommands
- (instancetype)initWithGroupAddress:(int32_t)groupAddress commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(groupAddress:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsAddToGroup *)doCopyGroupAddress:(int32_t)groupAddress commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(groupAddress:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t groupAddress __attribute__((swift_name("groupAddress")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.AssignMasterZone")))
@interface CnmeshCommandsAssignMasterZone : CnmeshCommands
- (instancetype)initWithZoneAddress:(int32_t)zoneAddress commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(zoneAddress:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsAssignMasterZone *)doCopyZoneAddress:(int32_t)zoneAddress commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(zoneAddress:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t zoneAddress __attribute__((swift_name("zoneAddress")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.BeaconScanning")))
@interface CnmeshCommandsBeaconScanning : CnmeshCommands
- (instancetype)initWithEnable:(int32_t)enable commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(enable:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsBeaconScanning *)doCopyEnable:(int32_t)enable commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(enable:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t enable __attribute__((swift_name("enable")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.Blink")))
@interface CnmeshCommandsBlink : CnmeshCommands
- (instancetype)initWithCommandDelay:(int64_t)commandDelay __attribute__((swift_name("init(commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int64_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsBlink *)doCopyCommandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.Blue")))
@interface CnmeshCommandsBlue : CnmeshCommands
- (instancetype)initWithBlue:(int32_t)blue commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(blue:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsBlue *)doCopyBlue:(int32_t)blue commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(blue:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t blue __attribute__((swift_name("blue")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.Brightness")))
@interface CnmeshCommandsBrightness : CnmeshCommands
- (instancetype)initWithBrightness:(int32_t)brightness commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(brightness:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsBrightness *)doCopyBrightness:(int32_t)brightness commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(brightness:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t brightness __attribute__((swift_name("brightness")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.CCT")))
@interface CnmeshCommandsCCT : CnmeshCommands
- (instancetype)initWithCct:(int32_t)cct commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(cct:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsCCT *)doCopyCct:(int32_t)cct commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(cct:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t cct __attribute__((swift_name("cct")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.ClearDurationTestResult")))
@interface CnmeshCommandsClearDurationTestResult : CnmeshCommands
- (instancetype)initWithCommandDelay:(int64_t)commandDelay __attribute__((swift_name("init(commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int64_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsClearDurationTestResult *)doCopyCommandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.ClearFunctionTestResult")))
@interface CnmeshCommandsClearFunctionTestResult : CnmeshCommands
- (instancetype)initWithCommandDelay:(int64_t)commandDelay __attribute__((swift_name("init(commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int64_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsClearFunctionTestResult *)doCopyCommandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.Custom")))
@interface CnmeshCommandsCustom : CnmeshCommands
- (instancetype)initWithOpcode:(int32_t)opcode params:(NSArray<CnmeshInt *> *)params commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(opcode:params:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSArray<CnmeshInt *> *)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsCustom *)doCopyOpcode:(int32_t)opcode params:(NSArray<CnmeshInt *> *)params commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(opcode:params:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t opcode __attribute__((swift_name("opcode")));
@property (readonly) NSArray<CnmeshInt *> *params __attribute__((swift_name("params")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.DayLightSensorConfigClosedLoop")))
@interface CnmeshCommandsDayLightSensorConfigClosedLoop : CnmeshCommands
- (instancetype)initWithSensorType:(int32_t)sensorType enable:(int32_t)enable maintainThreshold:(int32_t)maintainThreshold updateInterval:(int32_t)updateInterval tolerance:(int32_t)tolerance minDimLevel:(int32_t)minDimLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(sensorType:enable:maintainThreshold:updateInterval:tolerance:minDimLevel:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsDayLightSensorConfigClosedLoop *)doCopySensorType:(int32_t)sensorType enable:(int32_t)enable maintainThreshold:(int32_t)maintainThreshold updateInterval:(int32_t)updateInterval tolerance:(int32_t)tolerance minDimLevel:(int32_t)minDimLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(sensorType:enable:maintainThreshold:updateInterval:tolerance:minDimLevel:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t enable __attribute__((swift_name("enable")));
@property (readonly) int32_t maintainThreshold __attribute__((swift_name("maintainThreshold")));
@property (readonly) int32_t minDimLevel __attribute__((swift_name("minDimLevel")));
@property (readonly) int32_t sensorType __attribute__((swift_name("sensorType")));
@property (readonly) int32_t tolerance __attribute__((swift_name("tolerance")));
@property (readonly) int32_t updateInterval __attribute__((swift_name("updateInterval")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.DayLightSensorConfigOnOff")))
@interface CnmeshCommandsDayLightSensorConfigOnOff : CnmeshCommands
- (instancetype)initWithSensorType:(int32_t)sensorType enable:(int32_t)enable onThreshold:(int32_t)onThreshold offThreshold:(int32_t)offThreshold fadeTime:(int32_t)fadeTime commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(sensorType:enable:onThreshold:offThreshold:fadeTime:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsDayLightSensorConfigOnOff *)doCopySensorType:(int32_t)sensorType enable:(int32_t)enable onThreshold:(int32_t)onThreshold offThreshold:(int32_t)offThreshold fadeTime:(int32_t)fadeTime commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(sensorType:enable:onThreshold:offThreshold:fadeTime:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t enable __attribute__((swift_name("enable")));
@property (readonly) int32_t fadeTime __attribute__((swift_name("fadeTime")));
@property (readonly) int32_t offThreshold __attribute__((swift_name("offThreshold")));
@property (readonly) int32_t onThreshold __attribute__((swift_name("onThreshold")));
@property (readonly) int32_t sensorType __attribute__((swift_name("sensorType")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.DayLightSensorGain")))
@interface CnmeshCommandsDayLightSensorGain : CnmeshCommands
- (instancetype)initWithGain:(int32_t)gain commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(gain:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsDayLightSensorGain *)doCopyGain:(int32_t)gain commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(gain:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t gain __attribute__((swift_name("gain")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.DayLightSensorStepUnit")))
@interface CnmeshCommandsDayLightSensorStepUnit : CnmeshCommands
- (instancetype)initWithStepUnit:(int32_t)stepUnit commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(stepUnit:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsDayLightSensorStepUnit *)doCopyStepUnit:(int32_t)stepUnit commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(stepUnit:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t stepUnit __attribute__((swift_name("stepUnit")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.DeleteScene")))
@interface CnmeshCommandsDeleteScene : CnmeshCommands
- (instancetype)initWithSceneId:(int32_t)sceneId commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(sceneId:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsDeleteScene *)doCopySceneId:(int32_t)sceneId commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(sceneId:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t sceneId __attribute__((swift_name("sceneId")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.DisableCorridorHoldGroup")))
@interface CnmeshCommandsDisableCorridorHoldGroup : CnmeshCommands
- (instancetype)initWithCommandDelay:(int64_t)commandDelay __attribute__((swift_name("init(commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int64_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsDisableCorridorHoldGroup *)doCopyCommandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.DisableDaylightCalibrationMode")))
@interface CnmeshCommandsDisableDaylightCalibrationMode : CnmeshCommands
- (instancetype)initWithSensorType:(int32_t)sensorType timout:(int32_t)timout commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(sensorType:timout:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsDisableDaylightCalibrationMode *)doCopySensorType:(int32_t)sensorType timout:(int32_t)timout commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(sensorType:timout:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t sensorType __attribute__((swift_name("sensorType")));
@property (readonly) int32_t timout __attribute__((swift_name("timout")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.EnableCorridorHoldGroup")))
@interface CnmeshCommandsEnableCorridorHoldGroup : CnmeshCommands
- (instancetype)initWithHoldLevel:(int32_t)holdLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(holdLevel:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsEnableCorridorHoldGroup *)doCopyHoldLevel:(int32_t)holdLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(holdLevel:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t holdLevel __attribute__((swift_name("holdLevel")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.EnableDaylightCalibrationMode")))
@interface CnmeshCommandsEnableDaylightCalibrationMode : CnmeshCommands
- (instancetype)initWithSensorType:(int32_t)sensorType timout:(int32_t)timout commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(sensorType:timout:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsEnableDaylightCalibrationMode *)doCopySensorType:(int32_t)sensorType timout:(int32_t)timout commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(sensorType:timout:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t sensorType __attribute__((swift_name("sensorType")));
@property (readonly) int32_t timout __attribute__((swift_name("timout")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.GetLdrValue")))
@interface CnmeshCommandsGetLdrValue : CnmeshCommands
- (instancetype)initWithSensorType:(int32_t)sensorType commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(sensorType:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsGetLdrValue *)doCopySensorType:(int32_t)sensorType commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(sensorType:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t sensorType __attribute__((swift_name("sensorType")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.Green")))
@interface CnmeshCommandsGreen : CnmeshCommands
- (instancetype)initWithGreen:(int32_t)green commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(green:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsGreen *)doCopyGreen:(int32_t)green commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(green:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t green __attribute__((swift_name("green")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.LinkCorridorHoldGroup")))
@interface CnmeshCommandsLinkCorridorHoldGroup : CnmeshCommands
- (instancetype)initWithGroupAddress:(int32_t)groupAddress commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(groupAddress:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsLinkCorridorHoldGroup *)doCopyGroupAddress:(int32_t)groupAddress commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(groupAddress:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t groupAddress __attribute__((swift_name("groupAddress")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.LoadScene")))
@interface CnmeshCommandsLoadScene : CnmeshCommands
- (instancetype)initWithSceneId:(int32_t)sceneId commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(sceneId:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsLoadScene *)doCopySceneId:(int32_t)sceneId commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(sceneId:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t sceneId __attribute__((swift_name("sceneId")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.ManualOverride")))
@interface CnmeshCommandsManualOverride : CnmeshCommands
- (instancetype)initWithEnable:(int32_t)enable timeoutSeconds:(int32_t)timeoutSeconds commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(enable:timeoutSeconds:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsManualOverride *)doCopyEnable:(int32_t)enable timeoutSeconds:(int32_t)timeoutSeconds commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(enable:timeoutSeconds:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t enable __attribute__((swift_name("enable")));
@property (readonly) int32_t timeoutSeconds __attribute__((swift_name("timeoutSeconds")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.MaxLevel")))
@interface CnmeshCommandsMaxLevel : CnmeshCommands
- (instancetype)initWithChannel:(int32_t)channel maxLevel:(int32_t)maxLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(channel:maxLevel:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsMaxLevel *)doCopyChannel:(int32_t)channel maxLevel:(int32_t)maxLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(channel:maxLevel:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t channel __attribute__((swift_name("channel")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t maxLevel __attribute__((swift_name("maxLevel")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.MotionSensorConfig")))
@interface CnmeshCommandsMotionSensorConfig : CnmeshCommands
- (instancetype)initWithSensorType:(int32_t)sensorType enable:(int32_t)enable mode:(int32_t)mode presenceAction:(int32_t)presenceAction absenceAction:(int32_t)absenceAction absenceTimeout:(int32_t)absenceTimeout absenceFadeTime:(int32_t)absenceFadeTime commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(sensorType:enable:mode:presenceAction:absenceAction:absenceTimeout:absenceFadeTime:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component8 __attribute__((swift_name("component8()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsMotionSensorConfig *)doCopySensorType:(int32_t)sensorType enable:(int32_t)enable mode:(int32_t)mode presenceAction:(int32_t)presenceAction absenceAction:(int32_t)absenceAction absenceTimeout:(int32_t)absenceTimeout absenceFadeTime:(int32_t)absenceFadeTime commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(sensorType:enable:mode:presenceAction:absenceAction:absenceTimeout:absenceFadeTime:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t absenceAction __attribute__((swift_name("absenceAction")));
@property (readonly) int32_t absenceFadeTime __attribute__((swift_name("absenceFadeTime")));
@property (readonly) int32_t absenceTimeout __attribute__((swift_name("absenceTimeout")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t enable __attribute__((swift_name("enable")));
@property (readonly) int32_t mode __attribute__((swift_name("mode")));
@property (readonly) int32_t presenceAction __attribute__((swift_name("presenceAction")));
@property (readonly) int32_t sensorType __attribute__((swift_name("sensorType")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.Off")))
@interface CnmeshCommandsOff : CnmeshCommands
- (instancetype)initWithCommandDelay:(int64_t)commandDelay __attribute__((swift_name("init(commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int64_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsOff *)doCopyCommandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.On")))
@interface CnmeshCommandsOn : CnmeshCommands
- (instancetype)initWithCommandDelay:(int64_t)commandDelay __attribute__((swift_name("init(commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int64_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsOn *)doCopyCommandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.PowerOnLevel")))
@interface CnmeshCommandsPowerOnLevel : CnmeshCommands
- (instancetype)initWithChannel:(int32_t)channel startupLevel:(int32_t)startupLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(channel:startupLevel:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsPowerOnLevel *)doCopyChannel:(int32_t)channel startupLevel:(int32_t)startupLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(channel:startupLevel:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t channel __attribute__((swift_name("channel")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t startupLevel __attribute__((swift_name("startupLevel")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.RGB")))
@interface CnmeshCommandsRGB : CnmeshCommands
- (instancetype)initWithRed:(int32_t)red green:(int32_t)green blue:(int32_t)blue commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(red:green:blue:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsRGB *)doCopyRed:(int32_t)red green:(int32_t)green blue:(int32_t)blue commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(red:green:blue:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t blue __attribute__((swift_name("blue")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t green __attribute__((swift_name("green")));
@property (readonly) int32_t red __attribute__((swift_name("red")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.Red")))
@interface CnmeshCommandsRed : CnmeshCommands
- (instancetype)initWithRed:(int32_t)red commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(red:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsRed *)doCopyRed:(int32_t)red commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(red:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t red __attribute__((swift_name("red")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.RemoveFromGroup")))
@interface CnmeshCommandsRemoveFromGroup : CnmeshCommands
- (instancetype)initWithGroupAddress:(int32_t)groupAddress commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(groupAddress:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsRemoveFromGroup *)doCopyGroupAddress:(int32_t)groupAddress commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(groupAddress:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t groupAddress __attribute__((swift_name("groupAddress")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.SensorReportingInterval")))
@interface CnmeshCommandsSensorReportingInterval : CnmeshCommands
- (instancetype)initWithInterval:(int32_t)interval commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(interval:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsSensorReportingInterval *)doCopyInterval:(int32_t)interval commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(interval:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t interval __attribute__((swift_name("interval")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.SetDaliFadeRate")))
@interface CnmeshCommandsSetDaliFadeRate : CnmeshCommands
- (instancetype)initWithFadeRate:(int32_t)fadeRate commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(fadeRate:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsSetDaliFadeRate *)doCopyFadeRate:(int32_t)fadeRate commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(fadeRate:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t fadeRate __attribute__((swift_name("fadeRate")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.SetDaliFadeTime")))
@interface CnmeshCommandsSetDaliFadeTime : CnmeshCommands
- (instancetype)initWithFadeTime:(int32_t)fadeTime commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(fadeTime:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsSetDaliFadeTime *)doCopyFadeTime:(int32_t)fadeTime commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(fadeTime:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t fadeTime __attribute__((swift_name("fadeTime")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.SetDaliMaxLevel")))
@interface CnmeshCommandsSetDaliMaxLevel : CnmeshCommands
- (instancetype)initWithMaxLevel:(int32_t)maxLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(maxLevel:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsSetDaliMaxLevel *)doCopyMaxLevel:(int32_t)maxLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(maxLevel:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t maxLevel __attribute__((swift_name("maxLevel")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.SetDaliMinLevel")))
@interface CnmeshCommandsSetDaliMinLevel : CnmeshCommands
- (instancetype)initWithMinLevel:(int32_t)minLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(minLevel:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsSetDaliMinLevel *)doCopyMinLevel:(int32_t)minLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(minLevel:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t minLevel __attribute__((swift_name("minLevel")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.SetDaliPowerOnLevel")))
@interface CnmeshCommandsSetDaliPowerOnLevel : CnmeshCommands
- (instancetype)initWithPowerOnLevel:(int32_t)powerOnLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(powerOnLevel:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsSetDaliPowerOnLevel *)doCopyPowerOnLevel:(int32_t)powerOnLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(powerOnLevel:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t powerOnLevel __attribute__((swift_name("powerOnLevel")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.SetDimmingCurve")))
@interface CnmeshCommandsSetDimmingCurve : CnmeshCommands
- (instancetype)initWithDimmingCurve:(int32_t)dimmingCurve commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(dimmingCurve:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsSetDimmingCurve *)doCopyDimmingCurve:(int32_t)dimmingCurve commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(dimmingCurve:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t dimmingCurve __attribute__((swift_name("dimmingCurve")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.SetFadeTime")))
@interface CnmeshCommandsSetFadeTime : CnmeshCommands
- (instancetype)initWithFadeTime:(int32_t)fadeTime commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(fadeTime:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsSetFadeTime *)doCopyFadeTime:(int32_t)fadeTime commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(fadeTime:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t fadeTime __attribute__((swift_name("fadeTime")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.SetMaxLevel")))
@interface CnmeshCommandsSetMaxLevel : CnmeshCommands
- (instancetype)initWithChannel:(int32_t)channel maxLevel:(int32_t)maxLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(channel:maxLevel:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsSetMaxLevel *)doCopyChannel:(int32_t)channel maxLevel:(int32_t)maxLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(channel:maxLevel:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t channel __attribute__((swift_name("channel")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t maxLevel __attribute__((swift_name("maxLevel")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.SetMinLevel")))
@interface CnmeshCommandsSetMinLevel : CnmeshCommands
- (instancetype)initWithChannel:(int32_t)channel minLevel:(int32_t)minLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(channel:minLevel:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsSetMinLevel *)doCopyChannel:(int32_t)channel minLevel:(int32_t)minLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(channel:minLevel:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t channel __attribute__((swift_name("channel")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t minLevel __attribute__((swift_name("minLevel")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.SetMultiChannelControl")))
@interface CnmeshCommandsSetMultiChannelControl : CnmeshCommands
- (instancetype)initWithChannelNumber:(int32_t)channelNumber channelValue:(int32_t)channelValue fadeTime:(int32_t)fadeTime commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(channelNumber:channelValue:fadeTime:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsSetMultiChannelControl *)doCopyChannelNumber:(int32_t)channelNumber channelValue:(int32_t)channelValue fadeTime:(int32_t)fadeTime commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(channelNumber:channelValue:fadeTime:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t channelNumber __attribute__((swift_name("channelNumber")));
@property (readonly) int32_t channelValue __attribute__((swift_name("channelValue")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t fadeTime __attribute__((swift_name("fadeTime")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.SetNetworkId")))
@interface CnmeshCommandsSetNetworkId : CnmeshCommands
- (instancetype)initWithNetworkId:(int32_t)networkId commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(networkId:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsSetNetworkId *)doCopyNetworkId:(int32_t)networkId commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(networkId:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t networkId __attribute__((swift_name("networkId")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.SetPowerOnLevel")))
@interface CnmeshCommandsSetPowerOnLevel : CnmeshCommands
- (instancetype)initWithChannel:(int32_t)channel startupLevel:(int32_t)startupLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(channel:startupLevel:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsSetPowerOnLevel *)doCopyChannel:(int32_t)channel startupLevel:(int32_t)startupLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(channel:startupLevel:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t channel __attribute__((swift_name("channel")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t startupLevel __attribute__((swift_name("startupLevel")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.SetRelayMode")))
@interface CnmeshCommandsSetRelayMode : CnmeshCommands
- (instancetype)initWithRelayEnabled:(BOOL)relayEnabled commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(relayEnabled:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (BOOL)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsSetRelayMode *)doCopyRelayEnabled:(BOOL)relayEnabled commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(relayEnabled:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) BOOL relayEnabled __attribute__((swift_name("relayEnabled")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.SetSunricherMode")))
@interface CnmeshCommandsSetSunricherMode : CnmeshCommands
- (instancetype)initWithIsDaliMode:(BOOL)isDaliMode commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(isDaliMode:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (BOOL)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsSetSunricherMode *)doCopyIsDaliMode:(BOOL)isDaliMode commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(isDaliMode:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) BOOL isDaliMode __attribute__((swift_name("isDaliMode")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.SetTestTiming")))
@interface CnmeshCommandsSetTestTiming : CnmeshCommands
- (instancetype)initWithCommandDelay:(int64_t)commandDelay __attribute__((swift_name("init(commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int64_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsSetTestTiming *)doCopyCommandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Commands.UnlinkCorridorHoldGroup")))
@interface CnmeshCommandsUnlinkCorridorHoldGroup : CnmeshCommands
- (instancetype)initWithGroupAddress:(int32_t)groupAddress commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(groupAddress:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshCommandsUnlinkCorridorHoldGroup *)doCopyGroupAddress:(int32_t)groupAddress commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(groupAddress:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t groupAddress __attribute__((swift_name("groupAddress")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DeviceFilter")))
@interface CnmeshDeviceFilter : CnmeshBase
- (instancetype)initWithProductId:(NSArray<id> * _Nullable)productId macAddress:(NSString * _Nullable)macAddress rssi:(CnmeshInt * _Nullable)rssi __attribute__((swift_name("init(productId:macAddress:rssi:)"))) __attribute__((objc_designated_initializer));
- (NSArray<id> * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshDeviceFilter *)doCopyProductId:(NSArray<id> * _Nullable)productId macAddress:(NSString * _Nullable)macAddress rssi:(CnmeshInt * _Nullable)rssi __attribute__((swift_name("doCopy(productId:macAddress:rssi:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property NSString * _Nullable macAddress __attribute__((swift_name("macAddress")));
@property NSArray<id> * _Nullable productId __attribute__((swift_name("productId")));
@property CnmeshInt * _Nullable rssi __attribute__((swift_name("rssi")));
@end;

__attribute__((swift_name("EnOcean")))
@interface CnmeshEnOcean : CnmeshBase
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EnOcean.Provision")))
@interface CnmeshEnOceanProvision : CnmeshEnOcean
- (instancetype)initWithNfcDevice:(CnmeshMeshNFCDevice * _Nullable)nfcDevice networkId:(int32_t)networkId groupAddress:(int32_t)groupAddress A0:(int32_t)A0 A1:(int32_t)A1 B0:(int32_t)B0 B1:(int32_t)B1 __attribute__((swift_name("init(nfcDevice:networkId:groupAddress:A0:A1:B0:B1:)"))) __attribute__((objc_designated_initializer));
- (CnmeshMeshNFCDevice * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshEnOceanProvision *)doCopyNfcDevice:(CnmeshMeshNFCDevice * _Nullable)nfcDevice networkId:(int32_t)networkId groupAddress:(int32_t)groupAddress A0:(int32_t)A0 A1:(int32_t)A1 B0:(int32_t)B0 B1:(int32_t)B1 __attribute__((swift_name("doCopy(nfcDevice:networkId:groupAddress:A0:A1:B0:B1:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t A0 __attribute__((swift_name("A0")));
@property (readonly) int32_t A1 __attribute__((swift_name("A1")));
@property (readonly) int32_t B0 __attribute__((swift_name("B0")));
@property (readonly) int32_t B1 __attribute__((swift_name("B1")));
@property (readonly) int32_t groupAddress __attribute__((swift_name("groupAddress")));
@property (readonly) int32_t networkId __attribute__((swift_name("networkId")));
@property (readonly) CnmeshMeshNFCDevice * _Nullable nfcDevice __attribute__((swift_name("nfcDevice")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EnOcean.ProvisionSensor")))
@interface CnmeshEnOceanProvisionSensor : CnmeshEnOcean
- (instancetype)initWithNfcDevice:(CnmeshMeshNFCDevice * _Nullable)nfcDevice networkId:(int32_t)networkId groupAddress:(int32_t)groupAddress meshAddress:(int32_t)meshAddress __attribute__((swift_name("init(nfcDevice:networkId:groupAddress:meshAddress:)"))) __attribute__((objc_designated_initializer));
- (CnmeshMeshNFCDevice * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshEnOceanProvisionSensor *)doCopyNfcDevice:(CnmeshMeshNFCDevice * _Nullable)nfcDevice networkId:(int32_t)networkId groupAddress:(int32_t)groupAddress meshAddress:(int32_t)meshAddress __attribute__((swift_name("doCopy(nfcDevice:networkId:groupAddress:meshAddress:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t groupAddress __attribute__((swift_name("groupAddress")));
@property (readonly) int32_t meshAddress __attribute__((swift_name("meshAddress")));
@property (readonly) int32_t networkId __attribute__((swift_name("networkId")));
@property (readonly) CnmeshMeshNFCDevice * _Nullable nfcDevice __attribute__((swift_name("nfcDevice")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EnOceanButtonAction")))
@interface CnmeshEnOceanButtonAction : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)enOceanButtonAction __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshEnOceanButtonAction *shared __attribute__((swift_name("shared")));
@property (readonly) int32_t CCT_MINUS __attribute__((swift_name("CCT_MINUS")));
@property (readonly) int32_t CCT_PLUS __attribute__((swift_name("CCT_PLUS")));
@property (readonly) int32_t DOWN __attribute__((swift_name("DOWN")));
@property (readonly) int32_t OFF __attribute__((swift_name("OFF")));
@property (readonly) int32_t ON __attribute__((swift_name("ON")));
@property (readonly) int32_t SCENE_1 __attribute__((swift_name("SCENE_1")));
@property (readonly) int32_t SCENE_2 __attribute__((swift_name("SCENE_2")));
@property (readonly) int32_t SCENE_3 __attribute__((swift_name("SCENE_3")));
@property (readonly) int32_t SCENE_4 __attribute__((swift_name("SCENE_4")));
@property (readonly) int32_t SCENE_5 __attribute__((swift_name("SCENE_5")));
@property (readonly) int32_t SCENE_6 __attribute__((swift_name("SCENE_6")));
@property (readonly) int32_t SCENE_7 __attribute__((swift_name("SCENE_7")));
@property (readonly) int32_t SCENE_8 __attribute__((swift_name("SCENE_8")));
@property (readonly) int32_t UP __attribute__((swift_name("UP")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LightStatus")))
@interface CnmeshLightStatus : CnmeshBase
- (instancetype)initWithMeshAddress:(CnmeshInt * _Nullable)meshAddress pid:(CnmeshInt * _Nullable)pid fwMajor:(CnmeshInt * _Nullable)fwMajor fwMinor:(CnmeshInt * _Nullable)fwMinor on:(CnmeshBoolean * _Nullable)on brightness:(CnmeshInt * _Nullable)brightness red:(CnmeshInt * _Nullable)red green:(CnmeshInt * _Nullable)green blue:(CnmeshInt * _Nullable)blue cct:(CnmeshInt * _Nullable)cct energy:(CnmeshDouble * _Nullable)energy __attribute__((swift_name("init(meshAddress:pid:fwMajor:fwMinor:on:brightness:red:green:blue:cct:energy:)"))) __attribute__((objc_designated_initializer));
- (CnmeshInt * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component10 __attribute__((swift_name("component10()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshDouble * _Nullable)component11 __attribute__((swift_name("component11()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshBoolean * _Nullable)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component8 __attribute__((swift_name("component8()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component9 __attribute__((swift_name("component9()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshLightStatus *)doCopyMeshAddress:(CnmeshInt * _Nullable)meshAddress pid:(CnmeshInt * _Nullable)pid fwMajor:(CnmeshInt * _Nullable)fwMajor fwMinor:(CnmeshInt * _Nullable)fwMinor on:(CnmeshBoolean * _Nullable)on brightness:(CnmeshInt * _Nullable)brightness red:(CnmeshInt * _Nullable)red green:(CnmeshInt * _Nullable)green blue:(CnmeshInt * _Nullable)blue cct:(CnmeshInt * _Nullable)cct energy:(CnmeshDouble * _Nullable)energy __attribute__((swift_name("doCopy(meshAddress:pid:fwMajor:fwMinor:on:brightness:red:green:blue:cct:energy:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshInt * _Nullable blue __attribute__((swift_name("blue")));
@property (readonly) CnmeshInt * _Nullable brightness __attribute__((swift_name("brightness")));
@property (readonly) CnmeshInt * _Nullable cct __attribute__((swift_name("cct")));
@property (readonly) CnmeshDouble * _Nullable energy __attribute__((swift_name("energy")));
@property (readonly) CnmeshInt * _Nullable fwMajor __attribute__((swift_name("fwMajor")));
@property (readonly) CnmeshInt * _Nullable fwMinor __attribute__((swift_name("fwMinor")));
@property (readonly) CnmeshInt * _Nullable green __attribute__((swift_name("green")));
@property (readonly) CnmeshInt * _Nullable meshAddress __attribute__((swift_name("meshAddress")));
@property (readonly) CnmeshBoolean * _Nullable on __attribute__((swift_name("on")));
@property (readonly) CnmeshInt * _Nullable pid __attribute__((swift_name("pid")));
@property (readonly) CnmeshInt * _Nullable red __attribute__((swift_name("red")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshData")))
@interface CnmeshMeshData : CnmeshBase
- (instancetype)initWithFactoryMeshName:(NSString * _Nullable)factoryMeshName factoryMeshPassword:(NSString * _Nullable)factoryMeshPassword factoryLtk:(CnmeshKotlinByteArray * _Nullable)factoryLtk companyIdentifier:(NSArray<CnmeshInt *> * _Nullable)companyIdentifier provisionMeshName:(NSString * _Nullable)provisionMeshName provisionMeshPassword:(NSString * _Nullable)provisionMeshPassword provisionLtk:(CnmeshKotlinByteArray * _Nullable)provisionLtk connections:(CnmeshInt * _Nullable)connections scanDuration:(CnmeshLong * _Nullable)scanDuration __attribute__((swift_name("init(factoryMeshName:factoryMeshPassword:factoryLtk:companyIdentifier:provisionMeshName:provisionMeshPassword:provisionLtk:connections:scanDuration:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKotlinByteArray * _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSArray<CnmeshInt *> * _Nullable)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKotlinByteArray * _Nullable)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component8 __attribute__((swift_name("component8()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshLong * _Nullable)component9 __attribute__((swift_name("component9()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshData *)doCopyFactoryMeshName:(NSString * _Nullable)factoryMeshName factoryMeshPassword:(NSString * _Nullable)factoryMeshPassword factoryLtk:(CnmeshKotlinByteArray * _Nullable)factoryLtk companyIdentifier:(NSArray<CnmeshInt *> * _Nullable)companyIdentifier provisionMeshName:(NSString * _Nullable)provisionMeshName provisionMeshPassword:(NSString * _Nullable)provisionMeshPassword provisionLtk:(CnmeshKotlinByteArray * _Nullable)provisionLtk connections:(CnmeshInt * _Nullable)connections scanDuration:(CnmeshLong * _Nullable)scanDuration __attribute__((swift_name("doCopy(factoryMeshName:factoryMeshPassword:factoryLtk:companyIdentifier:provisionMeshName:provisionMeshPassword:provisionLtk:connections:scanDuration:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property NSArray<CnmeshInt *> * _Nullable companyIdentifier __attribute__((swift_name("companyIdentifier")));
@property CnmeshInt * _Nullable connections __attribute__((swift_name("connections")));
@property CnmeshKotlinByteArray * _Nullable factoryLtk __attribute__((swift_name("factoryLtk")));
@property NSString * _Nullable factoryMeshName __attribute__((swift_name("factoryMeshName")));
@property NSString * _Nullable factoryMeshPassword __attribute__((swift_name("factoryMeshPassword")));
@property CnmeshKotlinByteArray * _Nullable provisionLtk __attribute__((swift_name("provisionLtk")));
@property NSString * _Nullable provisionMeshName __attribute__((swift_name("provisionMeshName")));
@property NSString * _Nullable provisionMeshPassword __attribute__((swift_name("provisionMeshPassword")));
@property CnmeshLong * _Nullable scanDuration __attribute__((swift_name("scanDuration")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshDevice")))
@interface CnmeshMeshDevice : CnmeshBase
- (instancetype)initWithId:(NSString * _Nullable)id name:(NSString * _Nullable)name rssi:(CnmeshInt * _Nullable)rssi companyIdentifier:(CnmeshInt * _Nullable)companyIdentifier macAddress:(NSString * _Nullable)macAddress productId:(CnmeshInt * _Nullable)productId status:(CnmeshInt * _Nullable)status meshAddress:(CnmeshInt * _Nullable)meshAddress relayCounter:(CnmeshInt * _Nullable)relayCounter chipType:(CnmeshInt * _Nullable)chipType firmwareVersion:(NSString * _Nullable)firmwareVersion vendorData:(NSString * _Nullable)vendorData vendorId:(CnmeshInt * _Nullable)vendorId brightness:(CnmeshInt * _Nullable)brightness reserve:(CnmeshInt * _Nullable)reserve advertisement:(CnmeshAdvertisement * _Nullable)advertisement deviceName:(NSString * _Nullable)deviceName deviceModel:(NSString * _Nullable)deviceModel timestamp:(int64_t)timestamp __attribute__((swift_name("init(id:name:rssi:companyIdentifier:macAddress:productId:status:meshAddress:relayCounter:chipType:firmwareVersion:vendorData:vendorId:brightness:reserve:advertisement:deviceName:deviceModel:timestamp:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component10 __attribute__((swift_name("component10()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component11 __attribute__((swift_name("component11()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component12 __attribute__((swift_name("component12()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component13 __attribute__((swift_name("component13()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component14 __attribute__((swift_name("component14()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component15 __attribute__((swift_name("component15()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshAdvertisement * _Nullable)component16 __attribute__((swift_name("component16()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component17 __attribute__((swift_name("component17()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component18 __attribute__((swift_name("component18()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component19 __attribute__((swift_name("component19()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component8 __attribute__((swift_name("component8()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component9 __attribute__((swift_name("component9()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshDevice *)doCopyId:(NSString * _Nullable)id name:(NSString * _Nullable)name rssi:(CnmeshInt * _Nullable)rssi companyIdentifier:(CnmeshInt * _Nullable)companyIdentifier macAddress:(NSString * _Nullable)macAddress productId:(CnmeshInt * _Nullable)productId status:(CnmeshInt * _Nullable)status meshAddress:(CnmeshInt * _Nullable)meshAddress relayCounter:(CnmeshInt * _Nullable)relayCounter chipType:(CnmeshInt * _Nullable)chipType firmwareVersion:(NSString * _Nullable)firmwareVersion vendorData:(NSString * _Nullable)vendorData vendorId:(CnmeshInt * _Nullable)vendorId brightness:(CnmeshInt * _Nullable)brightness reserve:(CnmeshInt * _Nullable)reserve advertisement:(CnmeshAdvertisement * _Nullable)advertisement deviceName:(NSString * _Nullable)deviceName deviceModel:(NSString * _Nullable)deviceModel timestamp:(int64_t)timestamp __attribute__((swift_name("doCopy(id:name:rssi:companyIdentifier:macAddress:productId:status:meshAddress:relayCounter:chipType:firmwareVersion:vendorData:vendorId:brightness:reserve:advertisement:deviceName:deviceModel:timestamp:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (int32_t)getConnectionStatus __attribute__((swift_name("getConnectionStatus()")));
- (NSString * _Nullable)getDisplayDeviceName __attribute__((swift_name("getDisplayDeviceName()")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property CnmeshAdvertisement * _Nullable advertisement __attribute__((swift_name("advertisement")));
@property CnmeshInt * _Nullable brightness __attribute__((swift_name("brightness")));
@property CnmeshInt * _Nullable chipType __attribute__((swift_name("chipType")));
@property CnmeshInt * _Nullable companyIdentifier __attribute__((swift_name("companyIdentifier")));
@property NSString * _Nullable deviceModel __attribute__((swift_name("deviceModel")));
@property NSString * _Nullable deviceName __attribute__((swift_name("deviceName")));
@property NSString * _Nullable firmwareVersion __attribute__((swift_name("firmwareVersion")));
@property NSString * _Nullable id __attribute__((swift_name("id")));
@property NSString * _Nullable macAddress __attribute__((swift_name("macAddress")));
@property CnmeshInt * _Nullable meshAddress __attribute__((swift_name("meshAddress")));
@property NSString * _Nullable name __attribute__((swift_name("name")));
@property CnmeshInt * _Nullable productId __attribute__((swift_name("productId")));
@property CnmeshInt * _Nullable relayCounter __attribute__((swift_name("relayCounter")));
@property CnmeshInt * _Nullable reserve __attribute__((swift_name("reserve")));
@property CnmeshInt * _Nullable rssi __attribute__((swift_name("rssi")));
@property CnmeshInt * _Nullable status __attribute__((swift_name("status")));
@property int64_t timestamp __attribute__((swift_name("timestamp")));
@property NSString * _Nullable vendorData __attribute__((swift_name("vendorData")));
@property CnmeshInt * _Nullable vendorId __attribute__((swift_name("vendorId")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshDeviceAdvertisement")))
@interface CnmeshMeshDeviceAdvertisement : CnmeshBase
- (instancetype)initWithId:(NSString *)id name:(NSString * _Nullable)name rssi:(CnmeshInt * _Nullable)rssi companyIdentifier:(CnmeshInt * _Nullable)companyIdentifier macAddress:(NSString * _Nullable)macAddress productId:(CnmeshInt * _Nullable)productId status:(CnmeshInt * _Nullable)status meshAddress:(CnmeshInt * _Nullable)meshAddress relayCounter:(CnmeshInt * _Nullable)relayCounter chipType:(CnmeshInt * _Nullable)chipType firmwareVersion:(NSString * _Nullable)firmwareVersion vendorData:(NSString * _Nullable)vendorData timestamp:(int64_t)timestamp advertisement:(CnmeshAdvertisement *)advertisement __attribute__((swift_name("init(id:name:rssi:companyIdentifier:macAddress:productId:status:meshAddress:relayCounter:chipType:firmwareVersion:vendorData:timestamp:advertisement:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component10 __attribute__((swift_name("component10()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component11 __attribute__((swift_name("component11()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component12 __attribute__((swift_name("component12()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component13 __attribute__((swift_name("component13()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshAdvertisement *)component14 __attribute__((swift_name("component14()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component8 __attribute__((swift_name("component8()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component9 __attribute__((swift_name("component9()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshDeviceAdvertisement *)doCopyId:(NSString *)id name:(NSString * _Nullable)name rssi:(CnmeshInt * _Nullable)rssi companyIdentifier:(CnmeshInt * _Nullable)companyIdentifier macAddress:(NSString * _Nullable)macAddress productId:(CnmeshInt * _Nullable)productId status:(CnmeshInt * _Nullable)status meshAddress:(CnmeshInt * _Nullable)meshAddress relayCounter:(CnmeshInt * _Nullable)relayCounter chipType:(CnmeshInt * _Nullable)chipType firmwareVersion:(NSString * _Nullable)firmwareVersion vendorData:(NSString * _Nullable)vendorData timestamp:(int64_t)timestamp advertisement:(CnmeshAdvertisement *)advertisement __attribute__((swift_name("doCopy(id:name:rssi:companyIdentifier:macAddress:productId:status:meshAddress:relayCounter:chipType:firmwareVersion:vendorData:timestamp:advertisement:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)toMeshDeviceAdvertisementString __attribute__((swift_name("toMeshDeviceAdvertisementString()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshAdvertisement *advertisement __attribute__((swift_name("advertisement")));
@property (readonly) CnmeshInt * _Nullable chipType __attribute__((swift_name("chipType")));
@property (readonly) CnmeshInt * _Nullable companyIdentifier __attribute__((swift_name("companyIdentifier")));
@property (readonly) NSString * _Nullable firmwareVersion __attribute__((swift_name("firmwareVersion")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) NSString * _Nullable macAddress __attribute__((swift_name("macAddress")));
@property (readonly) CnmeshInt * _Nullable meshAddress __attribute__((swift_name("meshAddress")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@property (readonly) CnmeshInt * _Nullable productId __attribute__((swift_name("productId")));
@property (readonly) CnmeshInt * _Nullable relayCounter __attribute__((swift_name("relayCounter")));
@property (readonly) CnmeshInt * _Nullable rssi __attribute__((swift_name("rssi")));
@property (readonly) CnmeshInt * _Nullable status __attribute__((swift_name("status")));
@property int64_t timestamp __attribute__((swift_name("timestamp")));
@property (readonly) NSString * _Nullable vendorData __attribute__((swift_name("vendorData")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshGroup")))
@interface CnmeshMeshGroup : CnmeshBase
- (instancetype)initWithId:(NSString * _Nullable)id name:(NSString * _Nullable)name groupAddress:(CnmeshInt * _Nullable)groupAddress on:(CnmeshBoolean * _Nullable)on brightness:(CnmeshInt * _Nullable)brightness devices:(NSArray<NSString *> *)devices __attribute__((swift_name("init(id:name:groupAddress:on:brightness:devices:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshBoolean * _Nullable)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSArray<NSString *> *)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshGroup *)doCopyId:(NSString * _Nullable)id name:(NSString * _Nullable)name groupAddress:(CnmeshInt * _Nullable)groupAddress on:(CnmeshBoolean * _Nullable)on brightness:(CnmeshInt * _Nullable)brightness devices:(NSArray<NSString *> *)devices __attribute__((swift_name("doCopy(id:name:groupAddress:on:brightness:devices:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property CnmeshInt * _Nullable brightness __attribute__((swift_name("brightness")));
@property NSArray<NSString *> *devices __attribute__((swift_name("devices")));
@property CnmeshInt * _Nullable groupAddress __attribute__((swift_name("groupAddress")));
@property NSString * _Nullable id __attribute__((swift_name("id")));
@property NSString * _Nullable name __attribute__((swift_name("name")));
@property CnmeshBoolean * _Nullable on __attribute__((swift_name("on")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshNFCDevice")))
@interface CnmeshMeshNFCDevice : CnmeshBase
- (instancetype)initWithId:(NSString * _Nullable)id name:(NSString * _Nullable)name macAddress:(NSString * _Nullable)macAddress configuration:(CnmeshKotlinByteArray * _Nullable)configuration __attribute__((swift_name("init(id:name:macAddress:configuration:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKotlinByteArray * _Nullable)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshNFCDevice *)doCopyId:(NSString * _Nullable)id name:(NSString * _Nullable)name macAddress:(NSString * _Nullable)macAddress configuration:(CnmeshKotlinByteArray * _Nullable)configuration __attribute__((swift_name("doCopy(id:name:macAddress:configuration:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property CnmeshKotlinByteArray * _Nullable configuration __attribute__((swift_name("configuration")));
@property NSString * _Nullable id __attribute__((swift_name("id")));
@property NSString * _Nullable macAddress __attribute__((swift_name("macAddress")));
@property NSString * _Nullable name __attribute__((swift_name("name")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshNotification")))
@interface CnmeshMeshNotification : CnmeshBase
- (instancetype)initWithMeshAddress:(CnmeshInt * _Nullable)meshAddress opcode:(CnmeshInt * _Nullable)opcode params:(CnmeshKotlinByteArray * _Nullable)params __attribute__((swift_name("init(meshAddress:opcode:params:)"))) __attribute__((objc_designated_initializer));
- (CnmeshInt * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKotlinByteArray * _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshNotification *)doCopyMeshAddress:(CnmeshInt * _Nullable)meshAddress opcode:(CnmeshInt * _Nullable)opcode params:(CnmeshKotlinByteArray * _Nullable)params __attribute__((swift_name("doCopy(meshAddress:opcode:params:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshInt * _Nullable meshAddress __attribute__((swift_name("meshAddress")));
@property (readonly) CnmeshInt * _Nullable opcode __attribute__((swift_name("opcode")));
@property (readonly) CnmeshKotlinByteArray * _Nullable params __attribute__((swift_name("params")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshProvisionFilter")))
@interface CnmeshMeshProvisionFilter : CnmeshBase
- (instancetype)initWithProductId:(CnmeshInt * _Nullable)productId macAddress:(NSString * _Nullable)macAddress rssi:(CnmeshInt * _Nullable)rssi startMeshAddress:(CnmeshInt * _Nullable)startMeshAddress scanDuration:(int64_t)scanDuration timout:(CnmeshLong * _Nullable)timout groupAddress:(CnmeshInt * _Nullable)groupAddress unlockKey:(NSString * _Nullable)unlockKey __attribute__((swift_name("init(productId:macAddress:rssi:startMeshAddress:scanDuration:timout:groupAddress:unlockKey:)"))) __attribute__((objc_designated_initializer));
- (CnmeshInt * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshLong * _Nullable)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshInt * _Nullable)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component8 __attribute__((swift_name("component8()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshMeshProvisionFilter *)doCopyProductId:(CnmeshInt * _Nullable)productId macAddress:(NSString * _Nullable)macAddress rssi:(CnmeshInt * _Nullable)rssi startMeshAddress:(CnmeshInt * _Nullable)startMeshAddress scanDuration:(int64_t)scanDuration timout:(CnmeshLong * _Nullable)timout groupAddress:(CnmeshInt * _Nullable)groupAddress unlockKey:(NSString * _Nullable)unlockKey __attribute__((swift_name("doCopy(productId:macAddress:rssi:startMeshAddress:scanDuration:timout:groupAddress:unlockKey:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property CnmeshInt * _Nullable groupAddress __attribute__((swift_name("groupAddress")));
@property NSString * _Nullable macAddress __attribute__((swift_name("macAddress")));
@property CnmeshInt * _Nullable productId __attribute__((swift_name("productId")));
@property CnmeshInt * _Nullable rssi __attribute__((swift_name("rssi")));
@property int64_t scanDuration __attribute__((swift_name("scanDuration")));
@property CnmeshInt * _Nullable startMeshAddress __attribute__((swift_name("startMeshAddress")));
@property CnmeshLong * _Nullable timout __attribute__((swift_name("timout")));
@property NSString * _Nullable unlockKey __attribute__((swift_name("unlockKey")));
@end;

__attribute__((swift_name("ProvisionCommands")))
@interface CnmeshProvisionCommands : CnmeshBase
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProvisionCommands.AddSensorToGroup")))
@interface CnmeshProvisionCommandsAddSensorToGroup : CnmeshProvisionCommands
- (instancetype)initWithSensorType:(int32_t)sensorType groupAddress:(int32_t)groupAddress commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(sensorType:groupAddress:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshProvisionCommandsAddSensorToGroup *)doCopySensorType:(int32_t)sensorType groupAddress:(int32_t)groupAddress commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(sensorType:groupAddress:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t groupAddress __attribute__((swift_name("groupAddress")));
@property (readonly) int32_t sensorType __attribute__((swift_name("sensorType")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProvisionCommands.AddToGroup")))
@interface CnmeshProvisionCommandsAddToGroup : CnmeshProvisionCommands
- (instancetype)initWithGroupAddress:(int32_t)groupAddress commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(groupAddress:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshProvisionCommandsAddToGroup *)doCopyGroupAddress:(int32_t)groupAddress commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(groupAddress:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t groupAddress __attribute__((swift_name("groupAddress")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProvisionCommands.DayLightSensorConfigClosedLoop")))
@interface CnmeshProvisionCommandsDayLightSensorConfigClosedLoop : CnmeshProvisionCommands
- (instancetype)initWithSensorType:(int32_t)sensorType enable:(int32_t)enable maintainThreshold:(int32_t)maintainThreshold updateInterval:(int32_t)updateInterval tolerance:(int32_t)tolerance minDimLevel:(int32_t)minDimLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(sensorType:enable:maintainThreshold:updateInterval:tolerance:minDimLevel:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshProvisionCommandsDayLightSensorConfigClosedLoop *)doCopySensorType:(int32_t)sensorType enable:(int32_t)enable maintainThreshold:(int32_t)maintainThreshold updateInterval:(int32_t)updateInterval tolerance:(int32_t)tolerance minDimLevel:(int32_t)minDimLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(sensorType:enable:maintainThreshold:updateInterval:tolerance:minDimLevel:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t enable __attribute__((swift_name("enable")));
@property (readonly) int32_t maintainThreshold __attribute__((swift_name("maintainThreshold")));
@property (readonly) int32_t minDimLevel __attribute__((swift_name("minDimLevel")));
@property (readonly) int32_t sensorType __attribute__((swift_name("sensorType")));
@property (readonly) int32_t tolerance __attribute__((swift_name("tolerance")));
@property (readonly) int32_t updateInterval __attribute__((swift_name("updateInterval")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProvisionCommands.DayLightSensorConfigOnOff")))
@interface CnmeshProvisionCommandsDayLightSensorConfigOnOff : CnmeshProvisionCommands
- (instancetype)initWithSensorType:(int32_t)sensorType enable:(int32_t)enable onThreshold:(int32_t)onThreshold offThreshold:(int32_t)offThreshold fadeTime:(int32_t)fadeTime commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(sensorType:enable:onThreshold:offThreshold:fadeTime:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshProvisionCommandsDayLightSensorConfigOnOff *)doCopySensorType:(int32_t)sensorType enable:(int32_t)enable onThreshold:(int32_t)onThreshold offThreshold:(int32_t)offThreshold fadeTime:(int32_t)fadeTime commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(sensorType:enable:onThreshold:offThreshold:fadeTime:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t enable __attribute__((swift_name("enable")));
@property (readonly) int32_t fadeTime __attribute__((swift_name("fadeTime")));
@property (readonly) int32_t offThreshold __attribute__((swift_name("offThreshold")));
@property (readonly) int32_t onThreshold __attribute__((swift_name("onThreshold")));
@property (readonly) int32_t sensorType __attribute__((swift_name("sensorType")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProvisionCommands.MaxLevel")))
@interface CnmeshProvisionCommandsMaxLevel : CnmeshProvisionCommands
- (instancetype)initWithChannel:(int32_t)channel maxLevel:(int32_t)maxLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(channel:maxLevel:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshProvisionCommandsMaxLevel *)doCopyChannel:(int32_t)channel maxLevel:(int32_t)maxLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(channel:maxLevel:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t channel __attribute__((swift_name("channel")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t maxLevel __attribute__((swift_name("maxLevel")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProvisionCommands.MotionSensorConfig")))
@interface CnmeshProvisionCommandsMotionSensorConfig : CnmeshProvisionCommands
- (instancetype)initWithSensorType:(int32_t)sensorType enable:(int32_t)enable mode:(int32_t)mode presenceAction:(int32_t)presenceAction absenceAction:(int32_t)absenceAction absenceTimeout:(int32_t)absenceTimeout absenceFadeTime:(int32_t)absenceFadeTime commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(sensorType:enable:mode:presenceAction:absenceAction:absenceTimeout:absenceFadeTime:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component8 __attribute__((swift_name("component8()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshProvisionCommandsMotionSensorConfig *)doCopySensorType:(int32_t)sensorType enable:(int32_t)enable mode:(int32_t)mode presenceAction:(int32_t)presenceAction absenceAction:(int32_t)absenceAction absenceTimeout:(int32_t)absenceTimeout absenceFadeTime:(int32_t)absenceFadeTime commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(sensorType:enable:mode:presenceAction:absenceAction:absenceTimeout:absenceFadeTime:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t absenceAction __attribute__((swift_name("absenceAction")));
@property (readonly) int32_t absenceFadeTime __attribute__((swift_name("absenceFadeTime")));
@property (readonly) int32_t absenceTimeout __attribute__((swift_name("absenceTimeout")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t enable __attribute__((swift_name("enable")));
@property (readonly) int32_t mode __attribute__((swift_name("mode")));
@property (readonly) int32_t presenceAction __attribute__((swift_name("presenceAction")));
@property (readonly) int32_t sensorType __attribute__((swift_name("sensorType")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProvisionCommands.PowerOnLevel")))
@interface CnmeshProvisionCommandsPowerOnLevel : CnmeshProvisionCommands
- (instancetype)initWithChannel:(int32_t)channel startupLevel:(int32_t)startupLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(channel:startupLevel:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshProvisionCommandsPowerOnLevel *)doCopyChannel:(int32_t)channel startupLevel:(int32_t)startupLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(channel:startupLevel:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t channel __attribute__((swift_name("channel")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t startupLevel __attribute__((swift_name("startupLevel")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProvisionCommands.SensorReportingInterval")))
@interface CnmeshProvisionCommandsSensorReportingInterval : CnmeshProvisionCommands
- (instancetype)initWithInterval:(int32_t)interval commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(interval:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshProvisionCommandsSensorReportingInterval *)doCopyInterval:(int32_t)interval commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(interval:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t interval __attribute__((swift_name("interval")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProvisionCommands.SetDaliFadeRate")))
@interface CnmeshProvisionCommandsSetDaliFadeRate : CnmeshProvisionCommands
- (instancetype)initWithFadeRate:(int32_t)fadeRate commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(fadeRate:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshProvisionCommandsSetDaliFadeRate *)doCopyFadeRate:(int32_t)fadeRate commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(fadeRate:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t fadeRate __attribute__((swift_name("fadeRate")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProvisionCommands.SetDaliFadeTime")))
@interface CnmeshProvisionCommandsSetDaliFadeTime : CnmeshProvisionCommands
- (instancetype)initWithFadeTime:(int32_t)fadeTime commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(fadeTime:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshProvisionCommandsSetDaliFadeTime *)doCopyFadeTime:(int32_t)fadeTime commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(fadeTime:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t fadeTime __attribute__((swift_name("fadeTime")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProvisionCommands.SetDaliMaxLevel")))
@interface CnmeshProvisionCommandsSetDaliMaxLevel : CnmeshProvisionCommands
- (instancetype)initWithMaxLevel:(int32_t)maxLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(maxLevel:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshProvisionCommandsSetDaliMaxLevel *)doCopyMaxLevel:(int32_t)maxLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(maxLevel:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t maxLevel __attribute__((swift_name("maxLevel")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProvisionCommands.SetDaliMinLevel")))
@interface CnmeshProvisionCommandsSetDaliMinLevel : CnmeshProvisionCommands
- (instancetype)initWithMinLevel:(int32_t)minLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(minLevel:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshProvisionCommandsSetDaliMinLevel *)doCopyMinLevel:(int32_t)minLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(minLevel:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t minLevel __attribute__((swift_name("minLevel")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProvisionCommands.SetDaliPowerOnLevel")))
@interface CnmeshProvisionCommandsSetDaliPowerOnLevel : CnmeshProvisionCommands
- (instancetype)initWithPowerOnLevel:(int32_t)powerOnLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("init(powerOnLevel:commandDelay:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshProvisionCommandsSetDaliPowerOnLevel *)doCopyPowerOnLevel:(int32_t)powerOnLevel commandDelay:(int64_t)commandDelay __attribute__((swift_name("doCopy(powerOnLevel:commandDelay:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t commandDelay __attribute__((swift_name("commandDelay")));
@property (readonly) int32_t powerOnLevel __attribute__((swift_name("powerOnLevel")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SensorStatus")))
@interface CnmeshSensorStatus : CnmeshBase
- (instancetype)initWithTemperature:(NSString * _Nullable)temperature humidity:(NSString * _Nullable)humidity luxValue:(NSString * _Nullable)luxValue energy:(NSString * _Nullable)energy __attribute__((swift_name("init(temperature:humidity:luxValue:energy:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshSensorStatus *)doCopyTemperature:(NSString * _Nullable)temperature humidity:(NSString * _Nullable)humidity luxValue:(NSString * _Nullable)luxValue energy:(NSString * _Nullable)energy __attribute__((swift_name("doCopy(temperature:humidity:luxValue:energy:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString * _Nullable energy __attribute__((swift_name("energy")));
@property (readonly) NSString * _Nullable humidity __attribute__((swift_name("humidity")));
@property (readonly) NSString * _Nullable luxValue __attribute__((swift_name("luxValue")));
@property (readonly) NSString * _Nullable temperature __attribute__((swift_name("temperature")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Advertisement")))
@interface CnmeshAdvertisement : CnmeshBase
- (instancetype)initWithRssi:(int32_t)rssi data:(NSDictionary<NSString *, id> *)data cbPeripheral:(CBPeripheral *)cbPeripheral __attribute__((swift_name("init(rssi:data:cbPeripheral:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSDictionary<NSString *, id> *)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshAdvertisement *)doCopyRssi:(int32_t)rssi data:(NSDictionary<NSString *, id> *)data cbPeripheral:(CBPeripheral *)cbPeripheral __attribute__((swift_name("doCopy(rssi:data:cbPeripheral:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (CnmeshKotlinByteArray * _Nullable)manufacturerDataCompanyIdentifierCode:(int32_t)companyIdentifierCode __attribute__((swift_name("manufacturerData(companyIdentifierCode:)")));
- (NSData * _Nullable)manufacturerDataAsNSDataCompanyIdentifierCode:(int32_t)companyIdentifierCode __attribute__((swift_name("manufacturerDataAsNSData(companyIdentifierCode:)")));
- (CnmeshKotlinByteArray * _Nullable)serviceDataUuid:(CnmeshUuid *)uuid __attribute__((swift_name("serviceData(uuid:)")));
- (NSData * _Nullable)serviceDataAsNSDataUuid:(CnmeshUuid *)uuid __attribute__((swift_name("serviceDataAsNSData(uuid:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSDictionary<NSString *, id> *data __attribute__((swift_name("data")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) NSUUID *identifier __attribute__((swift_name("identifier")));
@property (readonly) CnmeshManufacturerData * _Nullable manufacturerData __attribute__((swift_name("manufacturerData")));
@property (readonly) NSData * _Nullable manufacturerDataAsNSData __attribute__((swift_name("manufacturerDataAsNSData")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@property (readonly) int32_t rssi __attribute__((swift_name("rssi")));
@property (readonly) CnmeshInt * _Nullable txPower __attribute__((swift_name("txPower")));
@property (readonly) NSArray<CnmeshUuid *> *uuids __attribute__((swift_name("uuids")));
@end;

__attribute__((swift_name("Peripheral")))
@protocol CnmeshPeripheral
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)connectWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("connect(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)disconnectWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("disconnect(completionHandler:)")));
- (id<CnmeshFlow>)observeCharacteristic:(id<CnmeshCharacteristic>)characteristic onSubscription:(id<CnmeshKotlinSuspendFunction0>)onSubscription __attribute__((swift_name("observe(characteristic:onSubscription:)")));

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readCharacteristic:(id<CnmeshCharacteristic>)characteristic completionHandler:(void (^)(CnmeshKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("read(characteristic:completionHandler:)")));

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readDescriptor:(id<CnmeshDescriptor>)descriptor completionHandler:(void (^)(CnmeshKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("read(descriptor:completionHandler:)")));

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)rssiWithCompletionHandler:(void (^)(CnmeshInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("rssi(completionHandler:)")));

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeCharacteristic:(id<CnmeshCharacteristic>)characteristic data:(CnmeshKotlinByteArray *)data writeType:(CnmeshWriteType *)writeType completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("write(characteristic:data:writeType:completionHandler:)")));

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeDescriptor:(id<CnmeshDescriptor>)descriptor data:(CnmeshKotlinByteArray *)data completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("write(descriptor:data:completionHandler:)")));
@property (readonly) NSArray<CnmeshDiscoveredService *> * _Nullable services __attribute__((swift_name("services")));
@property (readonly) id<CnmeshStateFlow> state __attribute__((swift_name("state")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ApplePeripheral")))
@interface CnmeshApplePeripheral : CnmeshBase <CnmeshPeripheral>

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)connectWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("connect(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)disconnectWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("disconnect(completionHandler:)")));
- (id<CnmeshFlow>)observeCharacteristic:(id<CnmeshCharacteristic>)characteristic onSubscription:(id<CnmeshKotlinSuspendFunction0>)onSubscription __attribute__((swift_name("observe(characteristic:onSubscription:)")));
- (id<CnmeshFlow>)observeAsNSDataCharacteristic:(id<CnmeshCharacteristic>)characteristic onSubscription:(id<CnmeshKotlinSuspendFunction0>)onSubscription __attribute__((swift_name("observeAsNSData(characteristic:onSubscription:)")));

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readCharacteristic:(id<CnmeshCharacteristic>)characteristic completionHandler:(void (^)(CnmeshKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("read(characteristic:completionHandler:)")));

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readDescriptor:(id<CnmeshDescriptor>)descriptor completionHandler:(void (^)(CnmeshKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("read(descriptor:completionHandler:)")));

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAsNSDataCharacteristic:(id<CnmeshCharacteristic>)characteristic completionHandler:(void (^)(NSData * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAsNSData(characteristic:completionHandler:)")));

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAsNSDataDescriptor:(id<CnmeshDescriptor>)descriptor completionHandler:(void (^)(NSData * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAsNSData(descriptor:completionHandler:)")));

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)rssiWithCompletionHandler:(void (^)(CnmeshInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("rssi(completionHandler:)")));
- (NSString *)description __attribute__((swift_name("description()")));

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeCharacteristic:(id<CnmeshCharacteristic>)characteristic data:(CnmeshKotlinByteArray *)data writeType:(CnmeshWriteType *)writeType completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("write(characteristic:data:writeType:completionHandler:)")));

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeCharacteristic:(id<CnmeshCharacteristic>)characteristic data:(NSData *)data writeType:(CnmeshWriteType *)writeType completionHandler_:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("write(characteristic:data:writeType:completionHandler_:)")));

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeDescriptor:(id<CnmeshDescriptor>)descriptor data:(CnmeshKotlinByteArray *)data completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("write(descriptor:data:completionHandler:)")));

/**
 @note This method converts instances of CancellationException, IOException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeDescriptor:(id<CnmeshDescriptor>)descriptor data:(NSData *)data completionHandler_:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("write(descriptor:data:completionHandler_:)")));
@property (readonly) NSArray<CnmeshDiscoveredService *> * _Nullable services __attribute__((swift_name("services")));
@property (readonly) id<CnmeshStateFlow> state __attribute__((swift_name("state")));
@end;

__attribute__((swift_name("Scanner")))
@protocol CnmeshScanner
@required
@property (readonly) id<CnmeshFlow> advertisements __attribute__((swift_name("advertisements")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AppleScanner")))
@interface CnmeshAppleScanner : CnmeshBase <CnmeshScanner>
@property (readonly) id<CnmeshFlow> advertisements __attribute__((swift_name("advertisements")));
@end;

__attribute__((swift_name("BluetoothException")))
@interface CnmeshBluetoothException : CnmeshKotlinException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BluetoothDisabledException")))
@interface CnmeshBluetoothDisabledException : CnmeshBluetoothException
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CentralManager")))
@interface CnmeshCentralManager : CnmeshBase
@end;

__attribute__((swift_name("Characteristic")))
@protocol CnmeshCharacteristic
@required
@property (readonly) CnmeshUuid *characteristicUuid __attribute__((swift_name("characteristicUuid")));
@property (readonly) CnmeshUuid *serviceUuid __attribute__((swift_name("serviceUuid")));
@end;

__attribute__((swift_name("IOException")))
@interface CnmeshIOException : CnmeshKotlinException
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("NotConnectedException")))
@interface CnmeshNotConnectedException : CnmeshIOException
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConnectionLostException")))
@interface CnmeshConnectionLostException : CnmeshNotConnectedException
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConnectionRejectedException")))
@interface CnmeshConnectionRejectedException : CnmeshIOException
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("Descriptor")))
@protocol CnmeshDescriptor
@required
@property (readonly) CnmeshUuid *characteristicUuid __attribute__((swift_name("characteristicUuid")));
@property (readonly) CnmeshUuid *descriptorUuid __attribute__((swift_name("descriptorUuid")));
@property (readonly) CnmeshUuid *serviceUuid __attribute__((swift_name("serviceUuid")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DiscoveredCharacteristic")))
@interface CnmeshDiscoveredCharacteristic : CnmeshBase <CnmeshCharacteristic>
- (CnmeshDiscoveredCharacteristic *)doCopyCharacteristic:(CBCharacteristic *)characteristic __attribute__((swift_name("doCopy(characteristic:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshUuid *characteristicUuid __attribute__((swift_name("characteristicUuid")));
@property (readonly) NSArray<CnmeshDiscoveredDescriptor *> *descriptors __attribute__((swift_name("descriptors")));
@property (readonly) int32_t properties __attribute__((swift_name("properties")));
@property (readonly) CnmeshUuid *serviceUuid __attribute__((swift_name("serviceUuid")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DiscoveredDescriptor")))
@interface CnmeshDiscoveredDescriptor : CnmeshBase <CnmeshDescriptor>
- (CnmeshDiscoveredDescriptor *)doCopyDescriptor:(CBDescriptor *)descriptor __attribute__((swift_name("doCopy(descriptor:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshUuid *characteristicUuid __attribute__((swift_name("characteristicUuid")));
@property (readonly) CnmeshUuid *descriptorUuid __attribute__((swift_name("descriptorUuid")));
@property (readonly) CnmeshUuid *serviceUuid __attribute__((swift_name("serviceUuid")));
@end;

__attribute__((swift_name("Service")))
@protocol CnmeshService
@required
@property (readonly) CnmeshUuid *serviceUuid __attribute__((swift_name("serviceUuid")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DiscoveredService")))
@interface CnmeshDiscoveredService : CnmeshBase <CnmeshService>
- (CnmeshDiscoveredService *)doCopyService:(CBService *)service __attribute__((swift_name("doCopy(service:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<CnmeshDiscoveredCharacteristic *> *characteristics __attribute__((swift_name("characteristics")));
@property (readonly) CnmeshUuid *serviceUuid __attribute__((swift_name("serviceUuid")));
@end;

__attribute__((swift_name("Filter")))
@interface CnmeshFilter : CnmeshBase
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Filter.Service")))
@interface CnmeshFilterService : CnmeshFilter
- (instancetype)initWithUuid:(CnmeshUuid *)uuid __attribute__((swift_name("init(uuid:)"))) __attribute__((objc_designated_initializer));
@property (readonly) CnmeshUuid *uuid __attribute__((swift_name("uuid")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GattStatusException")))
@interface CnmeshGattStatusException : CnmeshIOException
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LazyCharacteristic")))
@interface CnmeshLazyCharacteristic : CnmeshBase <CnmeshCharacteristic>
- (CnmeshUuid *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshUuid *)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshLazyCharacteristic *)doCopyServiceUuid:(CnmeshUuid *)serviceUuid characteristicUuid:(CnmeshUuid *)characteristicUuid __attribute__((swift_name("doCopy(serviceUuid:characteristicUuid:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshUuid *characteristicUuid __attribute__((swift_name("characteristicUuid")));
@property (readonly) CnmeshUuid *serviceUuid __attribute__((swift_name("serviceUuid")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LazyDescriptor")))
@interface CnmeshLazyDescriptor : CnmeshBase <CnmeshDescriptor>
- (instancetype)initWithServiceUuid:(CnmeshUuid *)serviceUuid characteristicUuid:(CnmeshUuid *)characteristicUuid descriptorUuid:(CnmeshUuid *)descriptorUuid __attribute__((swift_name("init(serviceUuid:characteristicUuid:descriptorUuid:)"))) __attribute__((objc_designated_initializer));
- (CnmeshUuid *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshUuid *)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshUuid *)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshLazyDescriptor *)doCopyServiceUuid:(CnmeshUuid *)serviceUuid characteristicUuid:(CnmeshUuid *)characteristicUuid descriptorUuid:(CnmeshUuid *)descriptorUuid __attribute__((swift_name("doCopy(serviceUuid:characteristicUuid:descriptorUuid:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshUuid *characteristicUuid __attribute__((swift_name("characteristicUuid")));
@property (readonly) CnmeshUuid *descriptorUuid __attribute__((swift_name("descriptorUuid")));
@property (readonly) CnmeshUuid *serviceUuid __attribute__((swift_name("serviceUuid")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ManufacturerData")))
@interface CnmeshManufacturerData : CnmeshBase
- (instancetype)initWithCode:(int32_t)code data:(CnmeshKotlinByteArray *)data __attribute__((swift_name("init(code:data:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t code __attribute__((swift_name("code")));
@property (readonly) CnmeshKotlinByteArray *data __attribute__((swift_name("data")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NotReadyException")))
@interface CnmeshNotReadyException : CnmeshNotConnectedException
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ObservationExceptionPeripheral")))
@interface CnmeshObservationExceptionPeripheral : CnmeshBase
@property (readonly) id<CnmeshStateFlow> state __attribute__((swift_name("state")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PeripheralBuilder")))
@interface CnmeshPeripheralBuilder : CnmeshBase
- (void)loggingInit:(void (^)(CnmeshLogging_ *))init __attribute__((swift_name("logging(init:)")));
- (void)observationExceptionHandlerHandler:(id<CnmeshKotlinSuspendFunction2>)handler __attribute__((swift_name("observationExceptionHandler(handler:)")));
- (void)onServicesDiscoveredAction:(id<CnmeshKotlinSuspendFunction1>)action __attribute__((swift_name("onServicesDiscovered(action:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ScannerBuilder")))
@interface CnmeshScannerBuilder : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)loggingInit:(void (^)(CnmeshLogging_ *))init __attribute__((swift_name("logging(init:)")));
@property NSArray<CnmeshFilter *> * _Nullable filters __attribute__((swift_name("filters")));
@property NSArray<CnmeshUuid *> * _Nullable services __attribute__((swift_name("services"))) __attribute__((deprecated("Replaced by filters property")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ServicesDiscoveredPeripheral")))
@interface CnmeshServicesDiscoveredPeripheral : CnmeshBase

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readCharacteristic:(id<CnmeshCharacteristic>)characteristic completionHandler:(void (^)(CnmeshKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("read(characteristic:completionHandler:)")));

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readDescriptor:(id<CnmeshDescriptor>)descriptor completionHandler:(void (^)(CnmeshKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("read(descriptor:completionHandler:)")));

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeCharacteristic:(id<CnmeshCharacteristic>)characteristic data:(CnmeshKotlinByteArray *)data writeType:(CnmeshWriteType *)writeType completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("write(characteristic:data:writeType:completionHandler:)")));

/**
 @note This method converts instances of CancellationException, IOException, NotReadyException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeDescriptor:(id<CnmeshDescriptor>)descriptor data:(CnmeshKotlinByteArray *)data completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("write(descriptor:data:completionHandler:)")));
@end;

__attribute__((swift_name("State")))
@interface CnmeshState : CnmeshBase
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.Connected")))
@interface CnmeshStateConnected : CnmeshState
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)connected __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshStateConnected *shared __attribute__((swift_name("shared")));
@end;

__attribute__((swift_name("State.Connecting")))
@interface CnmeshStateConnecting : CnmeshState
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.ConnectingBluetooth")))
@interface CnmeshStateConnectingBluetooth : CnmeshStateConnecting
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)bluetooth __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshStateConnectingBluetooth *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.ConnectingObserves")))
@interface CnmeshStateConnectingObserves : CnmeshStateConnecting
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)observes __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshStateConnectingObserves *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.ConnectingServices")))
@interface CnmeshStateConnectingServices : CnmeshStateConnecting
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)services __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshStateConnectingServices *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.Disconnected")))
@interface CnmeshStateDisconnected : CnmeshState
- (instancetype)initWithStatus:(CnmeshStateDisconnectedStatus * _Nullable)status __attribute__((swift_name("init(status:)"))) __attribute__((objc_designated_initializer));
- (CnmeshStateDisconnectedStatus * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshStateDisconnected *)doCopyStatus:(CnmeshStateDisconnectedStatus * _Nullable)status __attribute__((swift_name("doCopy(status:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshStateDisconnectedStatus * _Nullable status __attribute__((swift_name("status")));
@end;

__attribute__((swift_name("State.DisconnectedStatus")))
@interface CnmeshStateDisconnectedStatus : CnmeshBase
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.DisconnectedStatusCancelled")))
@interface CnmeshStateDisconnectedStatusCancelled : CnmeshStateDisconnectedStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)cancelled __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshStateDisconnectedStatusCancelled *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.DisconnectedStatusCentralDisconnected")))
@interface CnmeshStateDisconnectedStatusCentralDisconnected : CnmeshStateDisconnectedStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)centralDisconnected __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshStateDisconnectedStatusCentralDisconnected *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.DisconnectedStatusConnectionLimitReached")))
@interface CnmeshStateDisconnectedStatusConnectionLimitReached : CnmeshStateDisconnectedStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)connectionLimitReached __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshStateDisconnectedStatusConnectionLimitReached *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.DisconnectedStatusEncryptionTimedOut")))
@interface CnmeshStateDisconnectedStatusEncryptionTimedOut : CnmeshStateDisconnectedStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)encryptionTimedOut __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshStateDisconnectedStatusEncryptionTimedOut *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.DisconnectedStatusFailed")))
@interface CnmeshStateDisconnectedStatusFailed : CnmeshStateDisconnectedStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)failed __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshStateDisconnectedStatusFailed *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.DisconnectedStatusL2CapFailure")))
@interface CnmeshStateDisconnectedStatusL2CapFailure : CnmeshStateDisconnectedStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)l2CapFailure __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshStateDisconnectedStatusL2CapFailure *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.DisconnectedStatusLinkManagerProtocolTimeout")))
@interface CnmeshStateDisconnectedStatusLinkManagerProtocolTimeout : CnmeshStateDisconnectedStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)linkManagerProtocolTimeout __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshStateDisconnectedStatusLinkManagerProtocolTimeout *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.DisconnectedStatusPeripheralDisconnected")))
@interface CnmeshStateDisconnectedStatusPeripheralDisconnected : CnmeshStateDisconnectedStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)peripheralDisconnected __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshStateDisconnectedStatusPeripheralDisconnected *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.DisconnectedStatusTimeout")))
@interface CnmeshStateDisconnectedStatusTimeout : CnmeshStateDisconnectedStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)timeout __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshStateDisconnectedStatusTimeout *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.DisconnectedStatusUnknown")))
@interface CnmeshStateDisconnectedStatusUnknown : CnmeshStateDisconnectedStatus
- (instancetype)initWithStatus:(int32_t)status __attribute__((swift_name("init(status:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshStateDisconnectedStatusUnknown *)doCopyStatus:(int32_t)status __attribute__((swift_name("doCopy(status:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t status __attribute__((swift_name("status")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.DisconnectedStatusUnknownDevice")))
@interface CnmeshStateDisconnectedStatusUnknownDevice : CnmeshStateDisconnectedStatus
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)unknownDevice __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshStateDisconnectedStatusUnknownDevice *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("State.Disconnecting")))
@interface CnmeshStateDisconnecting : CnmeshState
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)disconnecting __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshStateDisconnecting *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WriteType")))
@interface CnmeshWriteType : CnmeshKotlinEnum<CnmeshWriteType *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) CnmeshWriteType *withresponse __attribute__((swift_name("withresponse")));
@property (class, readonly) CnmeshWriteType *withoutresponse __attribute__((swift_name("withoutresponse")));
+ (CnmeshKotlinArray<CnmeshWriteType *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HexBuilder")))
@interface CnmeshHexBuilder : CnmeshBase
@property BOOL lowerCase __attribute__((swift_name("lowerCase")));
@property NSString *separator __attribute__((swift_name("separator")));
@end;

__attribute__((swift_name("LogEngine")))
@protocol CnmeshLogEngine
@required
- (void)assertThrowable:(CnmeshKotlinThrowable * _Nullable)throwable tag:(NSString *)tag message:(NSString *)message __attribute__((swift_name("assert(throwable:tag:message:)")));
- (void)debugThrowable:(CnmeshKotlinThrowable * _Nullable)throwable tag:(NSString *)tag message:(NSString *)message __attribute__((swift_name("debug(throwable:tag:message:)")));
- (void)errorThrowable:(CnmeshKotlinThrowable * _Nullable)throwable tag:(NSString *)tag message:(NSString *)message __attribute__((swift_name("error(throwable:tag:message:)")));
- (void)infoThrowable:(CnmeshKotlinThrowable * _Nullable)throwable tag:(NSString *)tag message:(NSString *)message __attribute__((swift_name("info(throwable:tag:message:)")));
- (void)verboseThrowable:(CnmeshKotlinThrowable * _Nullable)throwable tag:(NSString *)tag message:(NSString *)message __attribute__((swift_name("verbose(throwable:tag:message:)")));
- (void)warnThrowable:(CnmeshKotlinThrowable * _Nullable)throwable tag:(NSString *)tag message:(NSString *)message __attribute__((swift_name("warn(throwable:tag:message:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Logging_")))
@interface CnmeshLogging_ : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property id<CnmeshLogging_DataProcessor> data __attribute__((swift_name("data")));
@property id<CnmeshLogEngine> engine __attribute__((swift_name("engine")));
@property CnmeshLogging_Format *format __attribute__((swift_name("format")));
@property NSString * _Nullable identifier __attribute__((swift_name("identifier")));
@property CnmeshLogging_Level *level __attribute__((swift_name("level")));
@end;

__attribute__((swift_name("Logging_DataProcessor")))
@protocol CnmeshLogging_DataProcessor
@required
- (NSString *)processData:(CnmeshKotlinByteArray *)data __attribute__((swift_name("process(data:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Logging_.Format")))
@interface CnmeshLogging_Format : CnmeshKotlinEnum<CnmeshLogging_Format *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) CnmeshLogging_Format *compact __attribute__((swift_name("compact")));
@property (class, readonly) CnmeshLogging_Format *multiline __attribute__((swift_name("multiline")));
+ (CnmeshKotlinArray<CnmeshLogging_Format *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Logging_.Level")))
@interface CnmeshLogging_Level : CnmeshKotlinEnum<CnmeshLogging_Level *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) CnmeshLogging_Level *warnings __attribute__((swift_name("warnings")));
@property (class, readonly) CnmeshLogging_Level *events __attribute__((swift_name("events")));
@property (class, readonly) CnmeshLogging_Level *data __attribute__((swift_name("data")));
+ (CnmeshKotlinArray<CnmeshLogging_Level *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SystemLogEngine")))
@interface CnmeshSystemLogEngine : CnmeshBase <CnmeshLogEngine>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)systemLogEngine __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshSystemLogEngine *shared __attribute__((swift_name("shared")));
- (void)assertThrowable:(CnmeshKotlinThrowable * _Nullable)throwable tag:(NSString *)tag message:(NSString *)message __attribute__((swift_name("assert(throwable:tag:message:)")));
- (void)debugThrowable:(CnmeshKotlinThrowable * _Nullable)throwable tag:(NSString *)tag message:(NSString *)message __attribute__((swift_name("debug(throwable:tag:message:)")));
- (void)errorThrowable:(CnmeshKotlinThrowable * _Nullable)throwable tag:(NSString *)tag message:(NSString *)message __attribute__((swift_name("error(throwable:tag:message:)")));
- (void)infoThrowable:(CnmeshKotlinThrowable * _Nullable)throwable tag:(NSString *)tag message:(NSString *)message __attribute__((swift_name("info(throwable:tag:message:)")));
- (void)verboseThrowable:(CnmeshKotlinThrowable * _Nullable)throwable tag:(NSString *)tag message:(NSString *)message __attribute__((swift_name("verbose(throwable:tag:message:)")));
- (void)warnThrowable:(CnmeshKotlinThrowable * _Nullable)throwable tag:(NSString *)tag message:(NSString *)message __attribute__((swift_name("warn(throwable:tag:message:)")));
@end;

@interface CnmeshHttpClientConfig (Extensions)
- (void)JsonBlock:(void (^)(CnmeshJsonPluginConfig *))block __attribute__((swift_name("Json(block:)"))) __attribute__((deprecated("Please use ContentNegotiation plugin: https://ktor.io/docs/migrating-2.html#serialization-client")));
- (void)LoggingBlock:(void (^)(CnmeshLoggingConfig *))block __attribute__((swift_name("Logging(block:)")));
- (void)BrowserUserAgent __attribute__((swift_name("BrowserUserAgent()")));
- (void)CharsetsBlock:(void (^)(CnmeshHttpPlainTextConfig *))block __attribute__((swift_name("Charsets(block:)")));
- (void)CurlUserAgent __attribute__((swift_name("CurlUserAgent()")));
- (void)HttpResponseValidatorBlock:(void (^)(CnmeshHttpCallValidatorConfig *))block __attribute__((swift_name("HttpResponseValidator(block:)")));
- (void)addDefaultResponseValidation __attribute__((swift_name("addDefaultResponseValidation()")));
- (void)defaultRequestBlock:(void (^)(CnmeshDefaultRequestDefaultRequestBuilder *))block __attribute__((swift_name("defaultRequest(block:)")));
- (void)WebSocketsConfig:(void (^)(CnmeshWebSocketsConfig *))config __attribute__((swift_name("WebSockets(config:)")));
- (void)ResponseObserverBlock:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("ResponseObserver(block:)")));
@end;

@interface CnmeshLoggerCompanion (Extensions)
@property (readonly) id<CnmeshLogger> DEFAULT __attribute__((swift_name("DEFAULT")));
@property (readonly) id<CnmeshLogger> EMPTY __attribute__((swift_name("EMPTY")));
@property (readonly) id<CnmeshLogger> SIMPLE __attribute__((swift_name("SIMPLE")));
@end;

@interface CnmeshHttpClientCall (Extensions)

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("body(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveWithCompletionHandler_:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(completionHandler_:)"))) __attribute__((unavailable("Use `body` method instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveInfo:(CnmeshKtor_utilsTypeInfo *)info completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(info:completionHandler:)"))) __attribute__((unavailable("Use `body` method instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)saveWithCompletionHandler:(void (^)(CnmeshHttpClientCall * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("save(completionHandler:)")));
- (CnmeshHttpClientCall *)wrapWithContentContent:(id<CnmeshKtor_ioByteReadChannel>)content __attribute__((swift_name("wrapWithContent(content:)")));
- (CnmeshHttpClientCall *)wrapWithContentContent:(id<CnmeshKtor_ioByteReadChannel>)content shouldCloseOrigin:(BOOL)shouldCloseOrigin __attribute__((swift_name("wrapWithContent(content:shouldCloseOrigin:)"))) __attribute__((unavailable("Parameter [shouldCloseOrigin] is deprecated")));
@end;

@interface CnmeshHttpResponse (Extensions)

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("body(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyTypeInfo:(CnmeshKtor_utilsTypeInfo *)typeInfo completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("body(typeInfo:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveWithCompletionHandler_:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(completionHandler_:)"))) __attribute__((unavailable("Use `body` method instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyAsChannelWithCompletionHandler:(void (^)(id<CnmeshKtor_ioByteReadChannel> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("bodyAsChannel(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyAsTextFallbackCharset:(CnmeshKtor_ioCharset *)fallbackCharset completionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("bodyAsText(fallbackCharset:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)discardRemainingWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("discardRemaining(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readBytesWithCompletionHandler:(void (^)(CnmeshKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readBytes(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readBytesCount:(int32_t)count completionHandler:(void (^)(CnmeshKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readBytes(count:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readTextFallbackCharset:(CnmeshKtor_ioCharset * _Nullable)fallbackCharset completionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readText(fallbackCharset:completionHandler:)"))) __attribute__((unavailable("Use `bodyAsText` method instead")));
@property (readonly) id<CnmeshHttpRequest> request __attribute__((swift_name("request")));
@end;

@interface CnmeshDispatchers (Extensions)
- (CnmeshCoroutineDispatcher *)clientDispatcherThreadCount:(int32_t)threadCount dispatcherName:(NSString *)dispatcherName __attribute__((swift_name("clientDispatcher(threadCount:dispatcherName:)")));
@end;

@interface CnmeshKotlinThrowable (Extensions)
- (CnmeshKotlinThrowable *)unwrapCancellationException __attribute__((swift_name("unwrapCancellationException()")));
@end;

@interface CnmeshKtor_httpOutgoingContent (Extensions)
- (CnmeshKtor_httpOutgoingContent *)wrapHeadersBlock:(id<CnmeshKtor_httpHeaders> (^)(id<CnmeshKtor_httpHeaders>))block __attribute__((swift_name("wrapHeaders(block:)")));
@end;

@interface CnmeshHttpRequestBuilder (Extensions)
- (void)parameterKey:(NSString *)key value:(id _Nullable)value __attribute__((swift_name("parameter(key:value:)")));
- (void)setBodyBody:(id _Nullable)body __attribute__((swift_name("setBody(body:)")));
- (CnmeshHttpRequestBuilder *)takeFromRequest:(id<CnmeshHttpRequest>)request __attribute__((swift_name("takeFrom(request:)")));
- (CnmeshHttpRequestBuilder *)takeFromRequest_:(CnmeshHttpRequestData *)request __attribute__((swift_name("takeFrom(request_:)")));
- (void)urlBlock_:(void (^)(CnmeshKtor_httpURLBuilder *))block __attribute__((swift_name("url(block_:)")));
- (void)urlUrl:(CnmeshKtor_httpUrl *)url __attribute__((swift_name("url(url:)")));
- (void)urlUrlString:(NSString *)urlString __attribute__((swift_name("url(urlString:)")));
- (void)urlScheme:(NSString * _Nullable)scheme host:(NSString * _Nullable)host port:(CnmeshInt * _Nullable)port path:(NSString * _Nullable)path block:(void (^)(CnmeshKtor_httpURLBuilder *))block __attribute__((swift_name("url(scheme:host:port:path:block:)")));
- (void)onDownloadListener:(id<CnmeshKotlinSuspendFunction2> _Nullable)listener __attribute__((swift_name("onDownload(listener:)")));
- (void)onUploadListener:(id<CnmeshKotlinSuspendFunction2> _Nullable)listener __attribute__((swift_name("onUpload(listener:)")));
- (void)retryBlock:(void (^)(CnmeshHttpRequestRetryConfiguration *))block __attribute__((swift_name("retry(block:)")));
- (void)timeoutBlock:(void (^)(CnmeshHttpTimeoutHttpTimeoutCapabilityConfiguration *))block __attribute__((swift_name("timeout(block:)")));
@property NSString *host __attribute__((swift_name("host")));
@property int32_t port __attribute__((swift_name("port")));
@property BOOL expectSuccess __attribute__((swift_name("expectSuccess")));
@end;

@interface CnmeshHttpClient (Extensions)

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)deleteBuilder:(CnmeshHttpRequestBuilder *)builder completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("delete(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)deleteBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("delete(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)deleteUrl:(CnmeshKtor_httpUrl *)url block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("delete(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)deleteUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("delete(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getBuilder:(CnmeshHttpRequestBuilder *)builder completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getUrl:(CnmeshKtor_httpUrl *)url block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)headBuilder:(CnmeshHttpRequestBuilder *)builder completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("head(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)headBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("head(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)headUrl:(CnmeshKtor_httpUrl *)url block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("head(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)headUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("head(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)optionsBuilder:(CnmeshHttpRequestBuilder *)builder completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("options(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)optionsBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("options(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)optionsUrl:(CnmeshKtor_httpUrl *)url block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("options(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)optionsUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("options(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)patchBuilder:(CnmeshHttpRequestBuilder *)builder completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("patch(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)patchBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("patch(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)patchUrl:(CnmeshKtor_httpUrl *)url block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("patch(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)patchUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("patch(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)postBuilder:(CnmeshHttpRequestBuilder *)builder completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("post(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)postBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("post(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)postUrl:(CnmeshKtor_httpUrl *)url block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("post(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)postUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("post(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareDeleteBuilder:(CnmeshHttpRequestBuilder *)builder completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareDelete(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareDeleteBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareDelete(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareDeleteUrl:(CnmeshKtor_httpUrl *)url block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareDelete(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareDeleteUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareDelete(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareGetBuilder:(CnmeshHttpRequestBuilder *)builder completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareGet(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareGetBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareGet(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareGetUrl:(CnmeshKtor_httpUrl *)url block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareGet(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareGetUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareGet(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareHeadBuilder:(CnmeshHttpRequestBuilder *)builder completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareHead(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareHeadBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareHead(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareHeadUrl:(CnmeshKtor_httpUrl *)url block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareHead(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareHeadUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareHead(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareOptionsBuilder:(CnmeshHttpRequestBuilder *)builder completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareOptions(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareOptionsBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareOptions(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareOptionsUrl:(CnmeshKtor_httpUrl *)url block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareOptions(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareOptionsUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareOptions(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePatchBuilder:(CnmeshHttpRequestBuilder *)builder completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePatch(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePatchBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePatch(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePatchUrl:(CnmeshKtor_httpUrl *)url block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePatch(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePatchUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePatch(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePostBuilder:(CnmeshHttpRequestBuilder *)builder completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePost(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePostBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePost(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePostUrl:(CnmeshKtor_httpUrl *)url block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePost(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePostUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePost(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePutBuilder:(CnmeshHttpRequestBuilder *)builder completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePut(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePutBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePut(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePutUrl:(CnmeshKtor_httpUrl *)url block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePut(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePutUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePut(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareRequestBuilder:(CnmeshHttpRequestBuilder *)builder completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareRequest(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareRequestBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareRequest(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareRequestUrl:(CnmeshKtor_httpUrl *)url block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareRequest(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareRequestUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareRequest(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)putBuilder:(CnmeshHttpRequestBuilder *)builder completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("put(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)putBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("put(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)putUrl:(CnmeshKtor_httpUrl *)url block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("put(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)putUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("put(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)requestBuilder:(CnmeshHttpRequestBuilder *)builder completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("request(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)requestBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("request(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)requestUrl:(CnmeshKtor_httpUrl *)url block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("request(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)requestUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("request(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareFormFormParameters:(id<CnmeshKtor_httpParameters>)formParameters encodeInQuery:(BOOL)encodeInQuery block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareForm(formParameters:encodeInQuery:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareFormUrl:(NSString *)url formParameters:(id<CnmeshKtor_httpParameters>)formParameters encodeInQuery:(BOOL)encodeInQuery block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareForm(url:formParameters:encodeInQuery:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareFormWithBinaryDataUrl:(NSString *)url formData:(NSArray<CnmeshKtor_httpPartData *> *)formData block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareFormWithBinaryData(url:formData:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareFormWithBinaryDataFormData:(NSArray<CnmeshKtor_httpPartData *> *)formData block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareFormWithBinaryData(formData:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)submitFormFormParameters:(id<CnmeshKtor_httpParameters>)formParameters encodeInQuery:(BOOL)encodeInQuery block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("submitForm(formParameters:encodeInQuery:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)submitFormUrl:(NSString *)url formParameters:(id<CnmeshKtor_httpParameters>)formParameters encodeInQuery:(BOOL)encodeInQuery block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("submitForm(url:formParameters:encodeInQuery:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)submitFormWithBinaryDataUrl:(NSString *)url formData:(NSArray<CnmeshKtor_httpPartData *> *)formData block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("submitFormWithBinaryData(url:formData:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)submitFormWithBinaryDataFormData:(NSArray<CnmeshKtor_httpPartData *> *)formData block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("submitFormWithBinaryData(formData:block:completionHandler:)")));
- (void)defaultTransformers __attribute__((swift_name("defaultTransformers()")));
- (id)pluginPlugin:(id<CnmeshHttpClientPlugin>)plugin __attribute__((swift_name("plugin(plugin:)")));
- (id _Nullable)pluginOrNullPlugin:(id<CnmeshHttpClientPlugin>)plugin __attribute__((swift_name("pluginOrNull(plugin:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketRequest:(void (^)(CnmeshHttpRequestBuilder *))request block:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("webSocket(request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketMethod:(CnmeshKtor_httpHttpMethod *)method host:(NSString * _Nullable)host port:(CnmeshInt * _Nullable)port path:(NSString * _Nullable)path request:(void (^)(CnmeshHttpRequestBuilder *))request block:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("webSocket(method:host:port:path:request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketUrlString:(NSString *)urlString request:(void (^)(CnmeshHttpRequestBuilder *))request block:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("webSocket(urlString:request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketSessionBlock:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshDefaultClientWebSocketSession * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("webSocketSession(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketSessionMethod:(CnmeshKtor_httpHttpMethod *)method host:(NSString * _Nullable)host port:(CnmeshInt * _Nullable)port path:(NSString * _Nullable)path block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshDefaultClientWebSocketSession * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("webSocketSession(method:host:port:path:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketSessionUrlString:(NSString *)urlString block:(void (^)(CnmeshHttpRequestBuilder *))block completionHandler:(void (^)(CnmeshDefaultClientWebSocketSession * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("webSocketSession(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)wsRequest:(void (^)(CnmeshHttpRequestBuilder *))request block:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("ws(request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)wsMethod:(CnmeshKtor_httpHttpMethod *)method host:(NSString * _Nullable)host port:(CnmeshInt * _Nullable)port path:(NSString * _Nullable)path request:(void (^)(CnmeshHttpRequestBuilder *))request block:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("ws(method:host:port:path:request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)wsUrlString:(NSString *)urlString request:(void (^)(CnmeshHttpRequestBuilder *))request block:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("ws(urlString:request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)wssRequest:(void (^)(CnmeshHttpRequestBuilder *))request block:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("wss(request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)wssMethod:(CnmeshKtor_httpHttpMethod *)method host:(NSString * _Nullable)host port:(CnmeshInt * _Nullable)port path:(NSString * _Nullable)path request:(void (^)(CnmeshHttpRequestBuilder *))request block:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("wss(method:host:port:path:request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)wssUrlString:(NSString *)urlString request:(void (^)(CnmeshHttpRequestBuilder *))request block:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("wss(urlString:request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)cookiesUrl:(CnmeshKtor_httpUrl *)url completionHandler:(void (^)(NSArray<CnmeshKtor_httpCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("cookies(url:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)cookiesUrlString:(NSString *)urlString completionHandler:(void (^)(NSArray<CnmeshKtor_httpCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("cookies(urlString:completionHandler:)")));
@end;

@interface CnmeshHttpRequestBuilderCompanion (Extensions)
- (CnmeshHttpRequestBuilder *)invokeBlock:(void (^)(CnmeshKtor_httpURLBuilder *))block __attribute__((swift_name("invoke(block:)")));
- (CnmeshHttpRequestBuilder *)invokeScheme:(NSString * _Nullable)scheme host:(NSString * _Nullable)host port:(CnmeshInt * _Nullable)port path:(NSString * _Nullable)path block:(void (^)(CnmeshKtor_httpURLBuilder *))block __attribute__((swift_name("invoke(scheme:host:port:path:block:)")));
@end;

@interface CnmeshHttpRequestData (Extensions)
- (BOOL)isUpgradeRequest __attribute__((swift_name("isUpgradeRequest()")));
@end;

@interface CnmeshFormBuilder (Extensions)
- (void)appendKey:(NSString *)key headers:(id<CnmeshKtor_httpHeaders>)headers size:(CnmeshLong * _Nullable)size bodyBuilder:(void (^)(CnmeshKtor_ioBytePacketBuilder *))bodyBuilder __attribute__((swift_name("append(key:headers:size:bodyBuilder:)")));
- (void)appendKey:(NSString *)key filename:(NSString *)filename contentType:(CnmeshKtor_httpContentType * _Nullable)contentType size:(CnmeshLong * _Nullable)size bodyBuilder:(void (^)(CnmeshKtor_ioBytePacketBuilder *))bodyBuilder __attribute__((swift_name("append(key:filename:contentType:size:bodyBuilder:)")));
@end;

@interface CnmeshHttpStatement (Extensions)

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(completionHandler:)"))) __attribute__((unavailable("Use `body` method instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveBlock:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(block:completionHandler:)"))) __attribute__((unavailable("Use `body` method instead")));
@end;

@interface CnmeshProxyConfig (Extensions)
- (CnmeshKtor_utilsNetworkAddress *)resolveAddress __attribute__((swift_name("resolveAddress()")));
@property (readonly) CnmeshProxyType *type __attribute__((swift_name("type")));
@end;

@interface CnmeshProxyBuilder (Extensions)
- (CnmeshProxyConfig *)httpUrlString:(NSString *)urlString __attribute__((swift_name("http(urlString:)")));
@end;

@interface CnmeshDefaultClientWebSocketSession (Extensions)

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveDeserializedWithCompletionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("receiveDeserialized(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendSerializedData:(id)data completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("sendSerialized(data:completionHandler:)")));
@property (readonly) id<CnmeshKtor_serializationWebsocketContentConverter> _Nullable converter __attribute__((swift_name("converter")));
@end;

@interface CnmeshCoroutineDispatcher (Extensions)

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeBlock:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(block:completionHandler:)")));
@end;

@interface CnmeshSharingStartedCompanion (Extensions)
- (id<CnmeshSharingStarted>)WhileSubscribedStopTimeout:(int64_t)stopTimeout replayExpiration:(int64_t)replayExpiration __attribute__((swift_name("WhileSubscribed(stopTimeout:replayExpiration:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinArray")))
@interface CnmeshKotlinArray<T> : CnmeshBase
+ (instancetype)arrayWithSize:(int32_t)size init:(T _Nullable (^)(CnmeshInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (T _Nullable)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (id<CnmeshKotlinIterator>)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(T _Nullable)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

@interface CnmeshKotlinArray (Extensions)
- (id<CnmeshFlow>)asFlow __attribute__((swift_name("asFlow()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinIntArray")))
@interface CnmeshKotlinIntArray : CnmeshBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(CnmeshInt *(^)(CnmeshInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (int32_t)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (CnmeshKotlinIntIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(int32_t)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

@interface CnmeshKotlinIntArray (Extensions)
- (id<CnmeshFlow>)asFlow __attribute__((swift_name("asFlow()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLongArray")))
@interface CnmeshKotlinLongArray : CnmeshBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(CnmeshLong *(^)(CnmeshInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (int64_t)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (CnmeshKotlinLongIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(int64_t)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

@interface CnmeshKotlinLongArray (Extensions)
- (id<CnmeshFlow>)asFlow __attribute__((swift_name("asFlow()")));
@end;

__attribute__((swift_name("KotlinIntProgression")))
@interface CnmeshKotlinIntProgression : CnmeshBase <CnmeshKotlinIterable>
@property (class, readonly, getter=companion) CnmeshKotlinIntProgressionCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (CnmeshKotlinIntIterator *)iterator __attribute__((swift_name("iterator()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t first __attribute__((swift_name("first")));
@property (readonly) int32_t last __attribute__((swift_name("last")));
@property (readonly) int32_t step __attribute__((swift_name("step")));
@end;

__attribute__((swift_name("KotlinClosedRange")))
@protocol CnmeshKotlinClosedRange
@required
- (BOOL)containsValue:(id)value __attribute__((swift_name("contains(value:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
@property (readonly) id endInclusive __attribute__((swift_name("endInclusive")));
@property (readonly, getter=start_) id start __attribute__((swift_name("start")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinIntRange")))
@interface CnmeshKotlinIntRange : CnmeshKotlinIntProgression <CnmeshKotlinClosedRange>
- (instancetype)initWithStart:(int32_t)start endInclusive:(int32_t)endInclusive __attribute__((swift_name("init(start:endInclusive:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshKotlinIntRangeCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)containsValue:(CnmeshInt *)value __attribute__((swift_name("contains(value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshInt *endInclusive __attribute__((swift_name("endInclusive")));
@property (readonly, getter=start_) CnmeshInt *start __attribute__((swift_name("start")));
@end;

@interface CnmeshKotlinIntRange (Extensions)
- (id<CnmeshFlow>)asFlow __attribute__((swift_name("asFlow()")));
@end;

__attribute__((swift_name("KotlinLongProgression")))
@interface CnmeshKotlinLongProgression : CnmeshBase <CnmeshKotlinIterable>
@property (class, readonly, getter=companion) CnmeshKotlinLongProgressionCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (CnmeshKotlinLongIterator *)iterator __attribute__((swift_name("iterator()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t first __attribute__((swift_name("first")));
@property (readonly) int64_t last __attribute__((swift_name("last")));
@property (readonly) int64_t step __attribute__((swift_name("step")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLongRange")))
@interface CnmeshKotlinLongRange : CnmeshKotlinLongProgression <CnmeshKotlinClosedRange>
- (instancetype)initWithStart:(int64_t)start endInclusive:(int64_t)endInclusive __attribute__((swift_name("init(start:endInclusive:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshKotlinLongRangeCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)containsValue:(CnmeshLong *)value __attribute__((swift_name("contains(value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshLong *endInclusive __attribute__((swift_name("endInclusive")));
@property (readonly, getter=start_) CnmeshLong *start __attribute__((swift_name("start")));
@end;

@interface CnmeshKotlinLongRange (Extensions)
- (id<CnmeshFlow>)asFlow __attribute__((swift_name("asFlow()")));
@end;

@interface CnmeshUuid (Extensions)
@property (readonly) CnmeshKotlinByteArray *bytes __attribute__((swift_name("bytes")));
@property (readonly) CnmeshKotlinByteArray *uuid __attribute__((swift_name("uuid"))) __attribute__((deprecated("Use uuidFrom() instead. This will be removed in the next release.")));
@property (readonly) int32_t variant __attribute__((swift_name("variant")));
@property (readonly) int32_t version __attribute__((swift_name("version")));
@end;

@interface CnmeshBeanDefinition (Extensions)
- (void)bind __attribute__((swift_name("bind()")));
- (void)bindsClasses:(NSArray<id<CnmeshKotlinKClass>> *)classes __attribute__((swift_name("binds(classes:)")));
- (void)createdAtStart __attribute__((swift_name("createdAtStart()")));
- (void)named __attribute__((swift_name("named()")));
- (void)namedName:(NSString *)name __attribute__((swift_name("named(name:)")));
- (void)onCloseOnClose:(void (^)(id _Nullable))onClose __attribute__((swift_name("onClose(onClose:)")));
@end;

@interface CnmeshModule (Extensions)
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor:(id _Nullable (^)(void))constructor __attribute__((swift_name("factoryOf(constructor:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor:(id _Nullable (^)(void))constructor options:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("factoryOf(constructor:options:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor_:(id _Nullable (^)(id _Nullable))constructor __attribute__((swift_name("factoryOf(constructor_:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor:(id _Nullable (^)(id _Nullable))constructor options_:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("factoryOf(constructor:options_:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor__:(id _Nullable (^)(id _Nullable, id _Nullable))constructor __attribute__((swift_name("factoryOf(constructor__:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable))constructor options__:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("factoryOf(constructor:options__:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor___:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("factoryOf(constructor___:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable))constructor options___:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("factoryOf(constructor:options___:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor____:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("factoryOf(constructor____:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options____:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("factoryOf(constructor:options____:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor_____:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("factoryOf(constructor_____:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options_____:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("factoryOf(constructor:options_____:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor______:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("factoryOf(constructor______:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options______:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("factoryOf(constructor:options______:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor_______:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("factoryOf(constructor_______:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options_______:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("factoryOf(constructor:options_______:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor________:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("factoryOf(constructor________:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options________:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("factoryOf(constructor:options________:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor_________:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("factoryOf(constructor_________:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options_________:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("factoryOf(constructor:options_________:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor__________:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("factoryOf(constructor__________:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)factoryOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options__________:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("factoryOf(constructor:options__________:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)setupInstanceFactory:(CnmeshInstanceFactory<id> *)factory options:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("setupInstance(factory:options:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor:(id _Nullable (^)(void))constructor __attribute__((swift_name("singleOf(constructor:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor:(id _Nullable (^)(void))constructor options:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("singleOf(constructor:options:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor_:(id _Nullable (^)(id _Nullable))constructor __attribute__((swift_name("singleOf(constructor_:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor:(id _Nullable (^)(id _Nullable))constructor options_:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("singleOf(constructor:options_:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor__:(id _Nullable (^)(id _Nullable, id _Nullable))constructor __attribute__((swift_name("singleOf(constructor__:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable))constructor options__:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("singleOf(constructor:options__:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor___:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("singleOf(constructor___:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable))constructor options___:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("singleOf(constructor:options___:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor____:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("singleOf(constructor____:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options____:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("singleOf(constructor:options____:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor_____:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("singleOf(constructor_____:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options_____:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("singleOf(constructor:options_____:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor______:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("singleOf(constructor______:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options______:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("singleOf(constructor:options______:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor_______:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("singleOf(constructor_______:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options_______:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("singleOf(constructor:options_______:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor________:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("singleOf(constructor________:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options________:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("singleOf(constructor:options________:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor_________:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("singleOf(constructor_________:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options_________:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("singleOf(constructor:options_________:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor__________:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("singleOf(constructor__________:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)singleOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options__________:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("singleOf(constructor:options__________:)")));
@end;

@interface CnmeshScope (Extensions)
- (id _Nullable)doNewConstructor:(id _Nullable (^)(void))constructor __attribute__((swift_name("doNew(constructor:)")));
- (id _Nullable)doNewConstructor_:(id _Nullable (^)(id _Nullable))constructor __attribute__((swift_name("doNew(constructor_:)")));
- (id _Nullable)doNewConstructor__:(id _Nullable (^)(id _Nullable, id _Nullable))constructor __attribute__((swift_name("doNew(constructor__:)")));
- (id _Nullable)doNewConstructor___:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("doNew(constructor___:)")));
- (id _Nullable)doNewConstructor____:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("doNew(constructor____:)")));
- (id _Nullable)doNewConstructor_____:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("doNew(constructor_____:)")));
- (id _Nullable)doNewConstructor______:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("doNew(constructor______:)")));
- (id _Nullable)doNewConstructor_______:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("doNew(constructor_______:)")));
- (id _Nullable)doNewConstructor________:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("doNew(constructor________:)")));
- (id _Nullable)doNewConstructor_________:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("doNew(constructor_________:)")));
- (id _Nullable)doNewConstructor__________:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("doNew(constructor__________:)")));
@end;

@interface CnmeshScopeDSL (Extensions)
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor:(id _Nullable (^)(void))constructor __attribute__((swift_name("scopedOf(constructor:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor:(id _Nullable (^)(void))constructor options:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("scopedOf(constructor:options:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor_:(id _Nullable (^)(id _Nullable))constructor __attribute__((swift_name("scopedOf(constructor_:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor:(id _Nullable (^)(id _Nullable))constructor options_:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("scopedOf(constructor:options_:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor__:(id _Nullable (^)(id _Nullable, id _Nullable))constructor __attribute__((swift_name("scopedOf(constructor__:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable))constructor options__:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("scopedOf(constructor:options__:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor___:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("scopedOf(constructor___:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable))constructor options___:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("scopedOf(constructor:options___:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor____:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("scopedOf(constructor____:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options____:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("scopedOf(constructor:options____:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor_____:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("scopedOf(constructor_____:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options_____:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("scopedOf(constructor:options_____:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor______:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("scopedOf(constructor______:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options______:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("scopedOf(constructor:options______:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor_______:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("scopedOf(constructor_______:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options_______:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("scopedOf(constructor:options_______:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor________:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("scopedOf(constructor________:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options________:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("scopedOf(constructor:options________:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor_________:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("scopedOf(constructor_________:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options_________:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("scopedOf(constructor:options_________:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor__________:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor __attribute__((swift_name("scopedOf(constructor__________:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)scopedOfConstructor:(id _Nullable (^)(id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable, id _Nullable))constructor options__________:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("scopedOf(constructor:options__________:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinPair")))
@interface CnmeshKotlinPair<__covariant A, __covariant B> : CnmeshBase
- (instancetype)initWithFirst:(A _Nullable)first second:(B _Nullable)second __attribute__((swift_name("init(first:second:)"))) __attribute__((objc_designated_initializer));
- (A _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (B _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKotlinPair<A, B> *)doCopyFirst:(A _Nullable)first second:(B _Nullable)second __attribute__((swift_name("doCopy(first:second:)")));
- (BOOL)equalsOther:(id _Nullable)other __attribute__((swift_name("equals(other:)")));
- (int32_t)hashCode __attribute__((swift_name("hashCode()")));
- (NSString *)toString __attribute__((swift_name("toString()")));
@property (readonly) A _Nullable first __attribute__((swift_name("first")));
@property (readonly) B _Nullable second __attribute__((swift_name("second")));
@end;

@interface CnmeshKotlinPair (Extensions)
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)withOptionsOptions:(void (^)(CnmeshBeanDefinition<id> *))options __attribute__((swift_name("withOptions(options:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)bind __attribute__((swift_name("bind()")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)bindClazz:(id<CnmeshKotlinKClass>)clazz __attribute__((swift_name("bind(clazz:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)bindsClasses:(CnmeshKotlinArray<id<CnmeshKotlinKClass>> *)classes __attribute__((swift_name("binds(classes:)")));
- (CnmeshKotlinPair<CnmeshModule *, CnmeshInstanceFactory<id> *> *)onCloseOnClose:(void (^)(id _Nullable))onClose __attribute__((swift_name("onClose(onClose:)")));
@end;

@interface CnmeshKotlinEnum (Extensions)
@property (readonly) id<CnmeshQualifier> qualifier __attribute__((swift_name("qualifier")));
@end;

@interface CnmeshInstant (Extensions)
- (int32_t)daysUntilOther:(CnmeshInstant *)other timeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("daysUntil(other:timeZone:)")));
- (CnmeshInstant *)minusValue:(int32_t)value unit:(CnmeshDateTimeUnit *)unit timeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("minus(value:unit:timeZone:)")));
- (CnmeshInstant *)minusValue:(int32_t)value unit:(CnmeshDateTimeUnitTimeBased *)unit __attribute__((swift_name("minus(value:unit:)")));
- (CnmeshInstant *)minusValue:(int64_t)value unit:(CnmeshDateTimeUnit *)unit timeZone_:(CnmeshTimeZone *)timeZone __attribute__((swift_name("minus(value:unit:timeZone_:)")));
- (CnmeshInstant *)minusValue:(int64_t)value unit_:(CnmeshDateTimeUnitTimeBased *)unit __attribute__((swift_name("minus(value:unit_:)")));
- (CnmeshInstant *)minusPeriod:(CnmeshDateTimePeriod *)period timeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("minus(period:timeZone:)")));
- (CnmeshInstant *)minusUnit:(CnmeshDateTimeUnit *)unit timeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("minus(unit:timeZone:)")));
- (CnmeshInstant *)minusUnit:(CnmeshDateTimeUnitTimeBased *)unit __attribute__((swift_name("minus(unit:)")));
- (int64_t)minusOther:(CnmeshInstant *)other unit:(CnmeshDateTimeUnit *)unit timeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("minus(other:unit:timeZone:)")));
- (int64_t)minusOther:(CnmeshInstant *)other unit:(CnmeshDateTimeUnitTimeBased *)unit __attribute__((swift_name("minus(other:unit:)")));
- (CnmeshDateTimePeriod *)minusOther:(CnmeshInstant *)other timeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("minus(other:timeZone:)")));
- (int32_t)monthsUntilOther:(CnmeshInstant *)other timeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("monthsUntil(other:timeZone:)")));
- (CnmeshUtcOffset *)offsetInTimeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("offsetIn(timeZone:)")));
- (CnmeshDateTimePeriod *)periodUntilOther:(CnmeshInstant *)other timeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("periodUntil(other:timeZone:)")));
- (CnmeshInstant *)plusValue:(int32_t)value unit:(CnmeshDateTimeUnit *)unit timeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("plus(value:unit:timeZone:)")));
- (CnmeshInstant *)plusValue:(int32_t)value unit:(CnmeshDateTimeUnitTimeBased *)unit __attribute__((swift_name("plus(value:unit:)")));
- (CnmeshInstant *)plusValue:(int64_t)value unit:(CnmeshDateTimeUnit *)unit timeZone_:(CnmeshTimeZone *)timeZone __attribute__((swift_name("plus(value:unit:timeZone_:)")));
- (CnmeshInstant *)plusValue:(int64_t)value unit_:(CnmeshDateTimeUnitTimeBased *)unit __attribute__((swift_name("plus(value:unit_:)")));
- (CnmeshInstant *)plusPeriod:(CnmeshDateTimePeriod *)period timeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("plus(period:timeZone:)")));
- (CnmeshInstant *)plusUnit:(CnmeshDateTimeUnit *)unit timeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("plus(unit:timeZone:)")));
- (CnmeshInstant *)plusUnit:(CnmeshDateTimeUnitTimeBased *)unit __attribute__((swift_name("plus(unit:)")));
- (CnmeshLocalDateTime *)toLocalDateTimeTimeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("toLocalDateTime(timeZone:)")));
- (NSDate *)toNSDate __attribute__((swift_name("toNSDate()")));
- (int64_t)untilOther:(CnmeshInstant *)other unit:(CnmeshDateTimeUnit *)unit timeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("until(other:unit:timeZone:)")));
- (int64_t)untilOther:(CnmeshInstant *)other unit:(CnmeshDateTimeUnitTimeBased *)unit __attribute__((swift_name("until(other:unit:)")));
- (int32_t)yearsUntilOther:(CnmeshInstant *)other timeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("yearsUntil(other:timeZone:)")));
@property (readonly) BOOL isDistantFuture __attribute__((swift_name("isDistantFuture")));
@property (readonly) BOOL isDistantPast __attribute__((swift_name("isDistantPast")));
@end;

@interface CnmeshDayOfWeek (Extensions)
@property (readonly) int32_t isoDayNumber __attribute__((swift_name("isoDayNumber")));
@end;

@interface CnmeshMonth (Extensions)
@property (readonly) int32_t number __attribute__((swift_name("number")));
@end;

@interface CnmeshUtcOffset (Extensions)
- (CnmeshFixedOffsetTimeZone *)asTimeZone __attribute__((swift_name("asTimeZone()")));
@end;

@interface CnmeshLocalDate (Extensions)
- (CnmeshInstant *)atStartOfDayInTimeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("atStartOfDayIn(timeZone:)")));
- (CnmeshLocalDateTime *)atTimeHour:(int32_t)hour minute:(int32_t)minute second:(int32_t)second nanosecond:(int32_t)nanosecond __attribute__((swift_name("atTime(hour:minute:second:nanosecond:)")));
- (int32_t)daysUntilOther:(CnmeshLocalDate *)other __attribute__((swift_name("daysUntil(other:)")));
- (CnmeshLocalDate *)minusValue:(int32_t)value unit:(CnmeshDateTimeUnitDateBased *)unit __attribute__((swift_name("minus(value:unit:)")));
- (CnmeshLocalDate *)minusValue:(int64_t)value unit_:(CnmeshDateTimeUnitDateBased *)unit __attribute__((swift_name("minus(value:unit_:)")));
- (CnmeshLocalDate *)minusPeriod:(CnmeshDatePeriod *)period __attribute__((swift_name("minus(period:)")));
- (CnmeshLocalDate *)minusUnit:(CnmeshDateTimeUnitDateBased *)unit __attribute__((swift_name("minus(unit:)")));
- (CnmeshDatePeriod *)minusOther:(CnmeshLocalDate *)other __attribute__((swift_name("minus(other:)")));
- (int32_t)monthsUntilOther:(CnmeshLocalDate *)other __attribute__((swift_name("monthsUntil(other:)")));
- (CnmeshDatePeriod *)periodUntilOther:(CnmeshLocalDate *)other __attribute__((swift_name("periodUntil(other:)")));
- (CnmeshLocalDate *)plusValue:(int32_t)value unit:(CnmeshDateTimeUnitDateBased *)unit __attribute__((swift_name("plus(value:unit:)")));
- (CnmeshLocalDate *)plusValue:(int64_t)value unit_:(CnmeshDateTimeUnitDateBased *)unit __attribute__((swift_name("plus(value:unit_:)")));
- (CnmeshLocalDate *)plusPeriod:(CnmeshDatePeriod *)period __attribute__((swift_name("plus(period:)")));
- (CnmeshLocalDate *)plusUnit:(CnmeshDateTimeUnitDateBased *)unit __attribute__((swift_name("plus(unit:)")));
- (NSDateComponents *)toNSDateComponents __attribute__((swift_name("toNSDateComponents()")));
- (int32_t)untilOther:(CnmeshLocalDate *)other unit:(CnmeshDateTimeUnitDateBased *)unit __attribute__((swift_name("until(other:unit:)")));
- (int32_t)yearsUntilOther:(CnmeshLocalDate *)other __attribute__((swift_name("yearsUntil(other:)")));
@end;

@interface CnmeshTimeZone (Extensions)
- (CnmeshUtcOffset *)offsetAtInstant:(CnmeshInstant *)instant __attribute__((swift_name("offsetAt(instant:)")));
- (NSTimeZone *)toNSTimeZone __attribute__((swift_name("toNSTimeZone()")));
@end;

@interface CnmeshDatePeriod (Extensions)
- (CnmeshDatePeriod *)plusOther:(CnmeshDatePeriod *)other __attribute__((swift_name("plus(other:)")));
@end;

@interface CnmeshDateTimePeriod (Extensions)
- (CnmeshDateTimePeriod *)plusOther_:(CnmeshDateTimePeriod *)other __attribute__((swift_name("plus(other_:)")));
@end;

@interface CnmeshLocalDateTime (Extensions)
- (CnmeshInstant *)toInstantTimeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("toInstant(timeZone:)")));
- (CnmeshInstant *)toInstantOffset:(CnmeshUtcOffset *)offset __attribute__((swift_name("toInstant(offset:)")));
- (NSDateComponents *)toNSDateComponents __attribute__((swift_name("toNSDateComponents()")));
@end;

@interface CnmeshJsonPrimitive (Extensions)
@property (readonly) BOOL boolean __attribute__((swift_name("boolean")));
@property (readonly) CnmeshBoolean * _Nullable booleanOrNull __attribute__((swift_name("booleanOrNull")));
@property (readonly) NSString * _Nullable contentOrNull __attribute__((swift_name("contentOrNull")));
@property (readonly, getter=double) double double_ __attribute__((swift_name("double_")));
@property (readonly) CnmeshDouble * _Nullable doubleOrNull __attribute__((swift_name("doubleOrNull")));
@property (readonly, getter=float) float float_ __attribute__((swift_name("float_")));
@property (readonly) CnmeshFloat * _Nullable floatOrNull __attribute__((swift_name("floatOrNull")));
@property (readonly, getter=int) int32_t int_ __attribute__((swift_name("int_")));
@property (readonly) CnmeshInt * _Nullable intOrNull __attribute__((swift_name("intOrNull")));
@property (readonly, getter=long) int64_t long_ __attribute__((swift_name("long_")));
@property (readonly) CnmeshLong * _Nullable longOrNull __attribute__((swift_name("longOrNull")));
@end;

@interface CnmeshJsonElement (Extensions)
@property (readonly) NSArray<CnmeshJsonElement *> *jsonArray __attribute__((swift_name("jsonArray")));
@property (readonly) CnmeshJsonNull *jsonNull __attribute__((swift_name("jsonNull")));
@property (readonly) NSDictionary<NSString *, CnmeshJsonElement *> *jsonObject __attribute__((swift_name("jsonObject")));
@property (readonly) CnmeshJsonPrimitive *jsonPrimitive __attribute__((swift_name("jsonPrimitive")));
@end;

@interface CnmeshJsonArrayBuilder (Extensions)
- (BOOL)addValue:(CnmeshBoolean * _Nullable)value __attribute__((swift_name("add(value:)")));
- (BOOL)addValue_:(id _Nullable)value __attribute__((swift_name("add(value_:)")));
- (BOOL)addValue__:(NSString * _Nullable)value __attribute__((swift_name("add(value__:)")));
- (BOOL)addJsonArrayBuilderAction:(void (^)(CnmeshJsonArrayBuilder *))builderAction __attribute__((swift_name("addJsonArray(builderAction:)")));
- (BOOL)addJsonObjectBuilderAction:(void (^)(CnmeshJsonObjectBuilder *))builderAction __attribute__((swift_name("addJsonObject(builderAction:)")));
@end;

@interface CnmeshJson (Extensions)
- (id _Nullable)decodeFromJsonElementJson:(CnmeshJsonElement *)json __attribute__((swift_name("decodeFromJsonElement(json:)")));
- (CnmeshJsonElement *)encodeToJsonElementValue:(id _Nullable)value __attribute__((swift_name("encodeToJsonElement(value:)")));
@end;

@interface CnmeshJsonObjectBuilder (Extensions)
- (CnmeshJsonElement * _Nullable)putKey:(NSString *)key value:(CnmeshBoolean * _Nullable)value __attribute__((swift_name("put(key:value:)")));
- (CnmeshJsonElement * _Nullable)putKey:(NSString *)key value_:(id _Nullable)value __attribute__((swift_name("put(key:value_:)")));
- (CnmeshJsonElement * _Nullable)putKey:(NSString *)key value__:(NSString * _Nullable)value __attribute__((swift_name("put(key:value__:)")));
- (CnmeshJsonElement * _Nullable)putJsonArrayKey:(NSString *)key builderAction:(void (^)(CnmeshJsonArrayBuilder *))builderAction __attribute__((swift_name("putJsonArray(key:builderAction:)")));
- (CnmeshJsonElement * _Nullable)putJsonObjectKey:(NSString *)key builderAction:(void (^)(CnmeshJsonObjectBuilder *))builderAction __attribute__((swift_name("putJsonObject(key:builderAction:)")));
@end;

@interface CnmeshNotificationInfo (Extensions)
- (CnmeshMeshDevice *)toMeshDevice __attribute__((swift_name("toMeshDevice()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinByteArray")))
@interface CnmeshKotlinByteArray : CnmeshBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(CnmeshByte *(^)(CnmeshInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (int8_t)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (CnmeshKotlinByteIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(int8_t)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

@interface CnmeshKotlinByteArray (Extensions)
- (NSString *)bytesToHex __attribute__((swift_name("bytesToHex()")));
@end;

@interface CnmeshAdvertisement (Extensions)
- (CnmeshMeshDeviceAdvertisement * _Nullable)toGatewayMeshAdvertisement __attribute__((swift_name("toGatewayMeshAdvertisement()")));
- (CnmeshMeshDeviceAdvertisement * _Nullable)toMeshAdvertisement __attribute__((swift_name("toMeshAdvertisement()")));
@end;

@interface CnmeshPreferenceMeshData (Extensions)
- (CnmeshMeshData *)toMeshData __attribute__((swift_name("toMeshData()")));
@end;

@interface CnmeshPreferenceDevice (Extensions)
- (CnmeshMeshDevice *)toMeshDevice __attribute__((swift_name("toMeshDevice()")));
@end;

@interface CnmeshPreferenceGroup (Extensions)
- (CnmeshMeshGroup *)toMeshGroup __attribute__((swift_name("toMeshGroup()")));
@end;

@interface CnmeshMeshDevice (Extensions)
- (CnmeshPreferenceDevice *)toPreferenceDevice __attribute__((swift_name("toPreferenceDevice()")));
@end;

@interface CnmeshMeshGroup (Extensions)
- (CnmeshPreferenceGroup *)toPreferenceGroup __attribute__((swift_name("toPreferenceGroup()")));
@end;

@interface CnmeshMeshData (Extensions)
- (CnmeshPreferenceMeshData *)toPreferenceMeshData __attribute__((swift_name("toPreferenceMeshData()")));
- (BOOL)checkInitializationStatus __attribute__((swift_name("checkInitializationStatus()")));
@end;

@interface CnmeshMeshDeviceAdvertisement (Extensions)
- (CnmeshMeshDevice *)toMeshDevice __attribute__((swift_name("toMeshDevice()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultPosixKt")))
@interface CnmeshDefaultPosixKt : CnmeshBase
+ (id<CnmeshJsonSerializer>)defaultSerializer __attribute__((swift_name("defaultSerializer()")));
@property (class, readonly) NSMutableArray<id<CnmeshJsonSerializer>> *serializers __attribute__((swift_name("serializers")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientKt")))
@interface CnmeshHttpClientKt : CnmeshBase
+ (CnmeshHttpClient *)HttpClientBlock:(void (^)(CnmeshHttpClientConfig<id> *))block __attribute__((swift_name("HttpClient(block:)")));
+ (CnmeshHttpClient *)HttpClientEngine:(id<CnmeshHttpClientEngine>)engine block:(void (^)(CnmeshHttpClientConfig<id> *))block __attribute__((swift_name("HttpClient(engine:block:)")));
+ (CnmeshHttpClient *)HttpClientEngineFactory:(id<CnmeshHttpClientEngineFactory>)engineFactory block:(void (^)(CnmeshHttpClientConfig<CnmeshHttpClientEngineConfig *> *))block __attribute__((swift_name("HttpClient(engineFactory:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CIOKt")))
@interface CnmeshCIOKt : CnmeshBase
@property (class, readonly) int32_t DEFAULT_HTTP_BUFFER_SIZE __attribute__((swift_name("DEFAULT_HTTP_BUFFER_SIZE")));
@property (class, readonly) int32_t DEFAULT_HTTP_POOL_SIZE __attribute__((swift_name("DEFAULT_HTTP_POOL_SIZE")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClientEventsKt")))
@interface CnmeshClientEventsKt : CnmeshBase
@property (class, readonly) CnmeshKtor_eventsEventDefinition<CnmeshHttpRequestBuilder *> *HttpRequestCreated __attribute__((swift_name("HttpRequestCreated")));
@property (class, readonly) CnmeshKtor_eventsEventDefinition<CnmeshHttpRequestBuilder *> *HttpRequestIsReadyForSending __attribute__((swift_name("HttpRequestIsReadyForSending")));
@property (class, readonly) CnmeshKtor_eventsEventDefinition<CnmeshHttpResponse *> *HttpResponseCancelled __attribute__((swift_name("HttpResponseCancelled")));
@property (class, readonly) CnmeshKtor_eventsEventDefinition<CnmeshHttpResponseReceiveFail *> *HttpResponseReceiveFailed __attribute__((swift_name("HttpResponseReceiveFailed")));
@property (class, readonly) CnmeshKtor_eventsEventDefinition<CnmeshHttpResponse *> *HttpResponseReceived __attribute__((swift_name("HttpResponseReceived")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadersKt")))
@interface CnmeshHeadersKt : CnmeshBase
+ (id<CnmeshKtor_httpHeaders>)buildHeadersBlock:(void (^)(CnmeshKtor_httpHeadersBuilder *))block __attribute__((swift_name("buildHeaders(block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeoutExceptionsCommonKt")))
@interface CnmeshTimeoutExceptionsCommonKt : CnmeshBase
+ (id<CnmeshKtor_ioByteReadChannel>)mapEngineExceptions:(id<CnmeshCoroutineScope>)receiver input:(id<CnmeshKtor_ioByteReadChannel>)input request:(CnmeshHttpRequestData *)request __attribute__((swift_name("mapEngineExceptions(_:input:request:)")));
+ (id<CnmeshKtor_ioByteWriteChannel>)mapEngineExceptions:(id<CnmeshCoroutineScope>)receiver output:(id<CnmeshKtor_ioByteWriteChannel>)output request:(CnmeshHttpRequestData *)request __attribute__((swift_name("mapEngineExceptions(_:output:request:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BuildersKt")))
@interface CnmeshBuildersKt : CnmeshBase
+ (CnmeshHttpRequestBuilder *)requestBlock:(void (^)(CnmeshHttpRequestBuilder *))block __attribute__((swift_name("request(block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UtilsKt")))
@interface CnmeshUtilsKt : CnmeshBase
+ (void)accept:(id<CnmeshKtor_httpHttpMessageBuilder>)receiver contentType:(CnmeshKtor_httpContentType *)contentType __attribute__((swift_name("accept(_:contentType:)")));
+ (void)basicAuth:(id<CnmeshKtor_httpHttpMessageBuilder>)receiver username:(NSString *)username password:(NSString *)password __attribute__((swift_name("basicAuth(_:username:password:)")));
+ (void)bearerAuth:(id<CnmeshKtor_httpHttpMessageBuilder>)receiver token:(NSString *)token __attribute__((swift_name("bearerAuth(_:token:)")));
+ (void)cookie:(id<CnmeshKtor_httpHttpMessageBuilder>)receiver name:(NSString *)name value:(NSString *)value maxAge:(int32_t)maxAge expires:(CnmeshKtor_utilsGMTDate * _Nullable)expires domain:(NSString * _Nullable)domain path:(NSString * _Nullable)path secure:(BOOL)secure httpOnly:(BOOL)httpOnly extensions:(NSDictionary<NSString *, id> *)extensions __attribute__((swift_name("cookie(_:name:value:maxAge:expires:domain:path:secure:httpOnly:extensions:)")));
+ (void)header:(id<CnmeshKtor_httpHttpMessageBuilder>)receiver key:(NSString *)key value:(id _Nullable)value __attribute__((swift_name("header(_:key:value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestKt")))
@interface CnmeshHttpRequestKt : CnmeshBase
+ (CnmeshKtor_httpHeadersBuilder *)headers:(id<CnmeshKtor_httpHttpMessageBuilder>)receiver block:(void (^)(CnmeshKtor_httpHeadersBuilder *))block __attribute__((swift_name("headers(_:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FormDslKt")))
@interface CnmeshFormDslKt : CnmeshBase
+ (NSArray<CnmeshKtor_httpPartData *> *)formDataBlock:(void (^)(CnmeshFormBuilder *))block __attribute__((swift_name("formData(block:)")));
+ (NSArray<CnmeshKtor_httpPartData *> *)formDataValues:(CnmeshKotlinArray<CnmeshFormPart<id> *> *)values __attribute__((swift_name("formData(values:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientEngineCapabilityKt")))
@interface CnmeshHttpClientEngineCapabilityKt : CnmeshBase
@property (class, readonly) NSSet<CnmeshHttpTimeoutPlugin *> *DEFAULT_CAPABILITIES __attribute__((swift_name("DEFAULT_CAPABILITIES")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UtilsKt_")))
@interface CnmeshUtilsKt_ : CnmeshBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)callContextWithCompletionHandler:(void (^)(id<CnmeshKotlinCoroutineContext> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("callContext(completionHandler:)")));
+ (void)mergeHeadersRequestHeaders:(id<CnmeshKtor_httpHeaders>)requestHeaders content:(CnmeshKtor_httpOutgoingContent *)content block:(void (^)(NSString *, NSString *))block __attribute__((swift_name("mergeHeaders(requestHeaders:content:block:)")));
@property (class, readonly) NSString *KTOR_DEFAULT_USER_AGENT __attribute__((swift_name("KTOR_DEFAULT_USER_AGENT")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientEngineKt")))
@interface CnmeshHttpClientEngineKt : CnmeshBase
+ (id<CnmeshHttpClientEngineFactory>)config:(id<CnmeshHttpClientEngineFactory>)receiver nested:(void (^)(CnmeshHttpClientEngineConfig *))nested __attribute__((swift_name("config(_:nested:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpTimeoutKt")))
@interface CnmeshHttpTimeoutKt : CnmeshBase
+ (CnmeshConnectTimeoutException *)ConnectTimeoutExceptionRequest:(CnmeshHttpRequestData *)request cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("ConnectTimeoutException(request:cause:)")));
+ (CnmeshConnectTimeoutException *)ConnectTimeoutExceptionUrl:(NSString *)url timeout:(CnmeshLong * _Nullable)timeout cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("ConnectTimeoutException(url:timeout:cause:)")));
+ (CnmeshSocketTimeoutException *)SocketTimeoutExceptionRequest:(CnmeshHttpRequestData *)request cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("SocketTimeoutException(request:cause:)")));
+ (int32_t)convertLongTimeoutToIntWithInfiniteAsZeroTimeout:(int64_t)timeout __attribute__((swift_name("convertLongTimeoutToIntWithInfiniteAsZero(timeout:)")));
+ (int64_t)convertLongTimeoutToLongWithInfiniteAsZeroTimeout:(int64_t)timeout __attribute__((swift_name("convertLongTimeoutToLongWithInfiniteAsZero(timeout:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CookiesStorageKt")))
@interface CnmeshCookiesStorageKt : CnmeshBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)addCookie:(id<CnmeshCookiesStorage>)receiver urlString:(NSString *)urlString cookie:(CnmeshKtor_httpCookie *)cookie completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("addCookie(_:urlString:cookie:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCookiesKt")))
@interface CnmeshHttpCookiesKt : CnmeshBase
+ (CnmeshKtor_httpCookie * _Nullable)get:(NSArray<CnmeshKtor_httpCookie *> *)receiver name:(NSString *)name __attribute__((swift_name("get(_:name:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonSupportKt")))
@interface CnmeshJsonSupportKt : CnmeshBase
+ (void)json:(id<CnmeshKtor_serializationConfiguration>)receiver json:(CnmeshJson *)json contentType:(CnmeshKtor_httpContentType *)contentType __attribute__((swift_name("json(_:json:contentType:)")));
@property (class, readonly) CnmeshJson *DefaultJson __attribute__((swift_name("DefaultJson")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JobKt")))
@interface CnmeshJobKt : CnmeshBase
+ (BOOL)isActive:(id<CnmeshKotlinCoroutineContext>)receiver __attribute__((swift_name("isActive(_:)")));
+ (id<CnmeshJob>)job:(id<CnmeshKotlinCoroutineContext>)receiver __attribute__((swift_name("job(_:)")));
+ (id<CnmeshCompletableJob>)JobParent:(id<CnmeshJob> _Nullable)parent __attribute__((swift_name("Job(parent:)")));
+ (void)cancel:(id<CnmeshKotlinCoroutineContext>)receiver cause:(CnmeshKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(_:cause:)")));
+ (void)cancel:(id<CnmeshJob>)receiver message:(NSString *)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancel(_:message:cause:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)cancelAndJoin:(id<CnmeshJob>)receiver completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("cancelAndJoin(_:completionHandler:)")));
+ (void)cancelChildren:(id<CnmeshKotlinCoroutineContext>)receiver cause:(CnmeshKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancelChildren(_:cause:)")));
+ (void)cancelChildren:(id<CnmeshJob>)receiver cause_:(CnmeshKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancelChildren(_:cause_:)")));
+ (void)ensureActive:(id<CnmeshKotlinCoroutineContext>)receiver __attribute__((swift_name("ensureActive(_:)")));
+ (void)ensureActive_:(id<CnmeshJob>)receiver __attribute__((swift_name("ensureActive(__:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineScopeKt")))
@interface CnmeshCoroutineScopeKt : CnmeshBase
+ (BOOL)isActive:(id<CnmeshCoroutineScope>)receiver __attribute__((swift_name("isActive(_:)")));
+ (id<CnmeshCoroutineScope>)CoroutineScopeContext:(id<CnmeshKotlinCoroutineContext>)context __attribute__((swift_name("CoroutineScope(context:)")));
+ (id<CnmeshCoroutineScope>)MainScope __attribute__((swift_name("MainScope()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)coroutineScopeBlock:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("coroutineScope(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)currentCoroutineContextWithCompletionHandler:(void (^)(id<CnmeshKotlinCoroutineContext> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("currentCoroutineContext(completionHandler:)")));
+ (void)cancel:(id<CnmeshCoroutineScope>)receiver message:(NSString *)message cause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancel(_:message:cause:)")));
+ (void)cancel:(id<CnmeshCoroutineScope>)receiver cause:(CnmeshKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(_:cause:)")));
+ (void)ensureActive:(id<CnmeshCoroutineScope>)receiver __attribute__((swift_name("ensureActive(_:)")));
+ (id<CnmeshCoroutineScope>)plus:(id<CnmeshCoroutineScope>)receiver context:(id<CnmeshKotlinCoroutineContext>)context __attribute__((swift_name("plus(_:context:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CompletableDeferredKt")))
@interface CnmeshCompletableDeferredKt : CnmeshBase
+ (id<CnmeshCompletableDeferred>)CompletableDeferredValue:(id _Nullable)value __attribute__((swift_name("CompletableDeferred(value:)")));
+ (id<CnmeshCompletableDeferred>)CompletableDeferredParent:(id<CnmeshJob> _Nullable)parent __attribute__((swift_name("CompletableDeferred(parent:)")));
+ (BOOL)completeWith:(id<CnmeshCompletableDeferred>)receiver result:(id _Nullable)result __attribute__((swift_name("completeWith(_:result:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineExceptionHandlerKt")))
@interface CnmeshCoroutineExceptionHandlerKt : CnmeshBase
+ (id<CnmeshCoroutineExceptionHandler>)CoroutineExceptionHandlerHandler:(void (^)(id<CnmeshKotlinCoroutineContext>, CnmeshKotlinThrowable *))handler __attribute__((swift_name("CoroutineExceptionHandler(handler:)")));
+ (void)handleCoroutineExceptionContext:(id<CnmeshKotlinCoroutineContext>)context exception:(CnmeshKotlinThrowable *)exception __attribute__((swift_name("handleCoroutineException(context:exception:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RunnableKt")))
@interface CnmeshRunnableKt : CnmeshBase
+ (id<CnmeshRunnable>)RunnableBlock:(void (^)(void))block __attribute__((swift_name("Runnable(block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SupervisorKt")))
@interface CnmeshSupervisorKt : CnmeshBase
+ (id<CnmeshCompletableJob>)SupervisorJobParent:(id<CnmeshJob> _Nullable)parent __attribute__((swift_name("SupervisorJob(parent:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)supervisorScopeBlock:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("supervisorScope(block:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AwaitKt")))
@interface CnmeshAwaitKt : CnmeshBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)awaitAllDeferreds:(CnmeshKotlinArray<id<CnmeshDeferred>> *)deferreds completionHandler:(void (^)(NSArray<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("awaitAll(deferreds:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)joinAllJobs:(CnmeshKotlinArray<id<CnmeshJob>> *)jobs completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("joinAll(jobs:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)awaitAll:(id)receiver completionHandler:(void (^)(NSArray<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("awaitAll(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)joinAll:(id)receiver completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("joinAll(_:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DelayKt")))
@interface CnmeshDelayKt : CnmeshBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)awaitCancellationWithCompletionHandler:(void (^)(CnmeshKotlinNothing * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("awaitCancellation(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)delayTimeMillis:(int64_t)timeMillis completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("delay(timeMillis:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)delayDuration:(int64_t)duration completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("delay(duration:completionHandler:)")));
+ (id<CnmeshFlow>)debounce:(id<CnmeshFlow>)receiver timeoutMillis:(CnmeshLong *(^)(id _Nullable))timeoutMillis __attribute__((swift_name("debounce(_:timeoutMillis:)")));
+ (id<CnmeshFlow>)debounce:(id<CnmeshFlow>)receiver timeout:(id (^)(id _Nullable))timeout __attribute__((swift_name("debounce(_:timeout:)")));
+ (id<CnmeshFlow>)debounce:(id<CnmeshFlow>)receiver timeoutMillis_:(int64_t)timeoutMillis __attribute__((swift_name("debounce(_:timeoutMillis_:)")));
+ (id<CnmeshFlow>)debounce:(id<CnmeshFlow>)receiver timeout_:(int64_t)timeout __attribute__((swift_name("debounce(_:timeout_:)")));
+ (id<CnmeshFlow>)sample:(id<CnmeshFlow>)receiver periodMillis:(int64_t)periodMillis __attribute__((swift_name("sample(_:periodMillis:)")));
+ (id<CnmeshFlow>)sample:(id<CnmeshFlow>)receiver period:(int64_t)period __attribute__((swift_name("sample(_:period:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MultithreadedDispatchersKt")))
@interface CnmeshMultithreadedDispatchersKt : CnmeshBase
+ (CnmeshCloseableCoroutineDispatcher *)doNewFixedThreadPoolContextNThreads:(int32_t)nThreads name:(NSString *)name __attribute__((swift_name("doNewFixedThreadPoolContext(nThreads:name:)")));
+ (CnmeshCloseableCoroutineDispatcher *)doNewSingleThreadContextName:(NSString *)name __attribute__((swift_name("doNewSingleThreadContext(name:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BuildersKt_")))
@interface CnmeshBuildersKt_ : CnmeshBase
+ (id _Nullable)runBlockingContext:(id<CnmeshKotlinCoroutineContext>)context block:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("runBlocking(context:block:)")));
+ (id<CnmeshFlow>)callbackFlowBlock:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("callbackFlow(block:)")));
+ (id<CnmeshFlow>)channelFlowBlock:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("channelFlow(block:)")));
+ (id<CnmeshFlow>)emptyFlow __attribute__((swift_name("emptyFlow()")));
+ (id<CnmeshFlow>)flowBlock:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("flow(block:)")));
+ (id<CnmeshFlow>)flowOfValue:(id _Nullable)value __attribute__((swift_name("flowOf(value:)")));
+ (id<CnmeshFlow>)flowOfElements:(CnmeshKotlinArray<id> *)elements __attribute__((swift_name("flowOf(elements:)")));
+ (id<CnmeshFlow>)asFlow:(id _Nullable (^)(void))receiver __attribute__((swift_name("asFlow(_:)")));
+ (id<CnmeshFlow>)asFlow_:(id)receiver __attribute__((swift_name("asFlow(__:)")));
+ (id<CnmeshFlow>)asFlow__:(id<CnmeshKotlinIterator>)receiver __attribute__((swift_name("asFlow(___:)")));
+ (id<CnmeshFlow>)asFlow___:(id<CnmeshKotlinSequence>)receiver __attribute__((swift_name("asFlow(____:)")));
+ (id<CnmeshFlow>)asFlow____:(id<CnmeshKotlinSuspendFunction0>)receiver __attribute__((swift_name("asFlow(_____:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CancellableContinuationKt")))
@interface CnmeshCancellableContinuationKt : CnmeshBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)suspendCancellableCoroutineBlock:(void (^)(id<CnmeshCancellableContinuation>))block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("suspendCancellableCoroutine(block:completionHandler:)")));
+ (void)disposeOnCancellation:(id<CnmeshCancellableContinuation>)receiver handle:(id<CnmeshDisposableHandle>)handle __attribute__((swift_name("disposeOnCancellation(_:handle:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Builders_commonKt")))
@interface CnmeshBuilders_commonKt : CnmeshBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withContextContext:(id<CnmeshKotlinCoroutineContext>)context block:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("withContext(context:block:completionHandler:)")));
+ (id<CnmeshDeferred>)async:(id<CnmeshCoroutineScope>)receiver context:(id<CnmeshKotlinCoroutineContext>)context start:(CnmeshCoroutineStart *)start block:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("async(_:context:start:block:)")));
+ (id<CnmeshJob>)launch:(id<CnmeshCoroutineScope>)receiver context:(id<CnmeshKotlinCoroutineContext>)context start:(CnmeshCoroutineStart *)start block:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("launch(_:context:start:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeoutKt")))
@interface CnmeshTimeoutKt : CnmeshBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withTimeoutTimeMillis:(int64_t)timeMillis block:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("withTimeout(timeMillis:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withTimeoutTimeout:(int64_t)timeout block:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("withTimeout(timeout:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withTimeoutOrNullTimeMillis:(int64_t)timeMillis block:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("withTimeoutOrNull(timeMillis:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withTimeoutOrNullTimeout:(int64_t)timeout block:(id<CnmeshKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("withTimeoutOrNull(timeout:block:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("YieldKt")))
@interface CnmeshYieldKt : CnmeshBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)yieldWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("yield(completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineContextKt")))
@interface CnmeshCoroutineContextKt : CnmeshBase
+ (id<CnmeshKotlinCoroutineContext>)doNewCoroutineContext:(id<CnmeshKotlinCoroutineContext>)receiver addedContext:(id<CnmeshKotlinCoroutineContext>)addedContext __attribute__((swift_name("doNewCoroutineContext(_:addedContext:)")));
+ (id<CnmeshKotlinCoroutineContext>)doNewCoroutineContext:(id<CnmeshCoroutineScope>)receiver context:(id<CnmeshKotlinCoroutineContext>)context __attribute__((swift_name("doNewCoroutineContext(_:context:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CancellableKt")))
@interface CnmeshCancellableKt : CnmeshBase
+ (void)startCoroutineCancellable:(id<CnmeshKotlinSuspendFunction0>)receiver completion:(id<CnmeshKotlinContinuation>)completion __attribute__((swift_name("startCoroutineCancellable(_:completion:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BroadcastChannelKt")))
@interface CnmeshBroadcastChannelKt : CnmeshBase
+ (id<CnmeshBroadcastChannel>)BroadcastChannelCapacity:(int32_t)capacity __attribute__((swift_name("BroadcastChannel(capacity:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelKt")))
@interface CnmeshChannelKt : CnmeshBase
+ (id<CnmeshChannel>)ChannelCapacity:(int32_t)capacity onBufferOverflow:(CnmeshBufferOverflow *)onBufferOverflow onUndeliveredElement:(void (^ _Nullable)(id _Nullable))onUndeliveredElement __attribute__((swift_name("Channel(capacity:onBufferOverflow:onUndeliveredElement:)")));
+ (id _Nullable)getOrElse:(id _Nullable)receiver onFailure:(id _Nullable (^)(CnmeshKotlinThrowable * _Nullable))onFailure __attribute__((swift_name("getOrElse(_:onFailure:)")));
+ (id _Nullable)onClosed:(id _Nullable)receiver action:(void (^)(CnmeshKotlinThrowable * _Nullable))action __attribute__((swift_name("onClosed(_:action:)")));
+ (id _Nullable)onFailure:(id _Nullable)receiver action:(void (^)(CnmeshKotlinThrowable * _Nullable))action __attribute__((swift_name("onFailure(_:action:)")));
+ (id _Nullable)onSuccess:(id _Nullable)receiver action:(void (^)(id _Nullable))action __attribute__((swift_name("onSuccess(_:action:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProduceKt")))
@interface CnmeshProduceKt : CnmeshBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)awaitClose:(id<CnmeshProducerScope>)receiver block:(void (^)(void))block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("awaitClose(_:block:completionHandler:)")));
+ (id<CnmeshReceiveChannel>)produce:(id<CnmeshCoroutineScope>)receiver context:(id<CnmeshKotlinCoroutineContext>)context capacity:(int32_t)capacity start:(CnmeshCoroutineStart *)start onCompletion:(void (^ _Nullable)(CnmeshKotlinThrowable * _Nullable))onCompletion block:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("produce(_:context:capacity:start:onCompletion:block:)")));
+ (id<CnmeshReceiveChannel>)produce:(id<CnmeshCoroutineScope>)receiver context:(id<CnmeshKotlinCoroutineContext>)context capacity:(int32_t)capacity block:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("produce(_:context:capacity:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BroadcastKt")))
@interface CnmeshBroadcastKt : CnmeshBase
+ (id<CnmeshBroadcastChannel>)broadcast:(id<CnmeshCoroutineScope>)receiver context:(id<CnmeshKotlinCoroutineContext>)context capacity:(int32_t)capacity start:(CnmeshCoroutineStart *)start onCompletion:(void (^ _Nullable)(CnmeshKotlinThrowable * _Nullable))onCompletion block:(id<CnmeshKotlinSuspendFunction1>)block __attribute__((swift_name("broadcast(_:context:capacity:start:onCompletion:block:)")));
+ (id<CnmeshBroadcastChannel>)broadcast:(id<CnmeshReceiveChannel>)receiver capacity:(int32_t)capacity start:(CnmeshCoroutineStart *)start __attribute__((swift_name("broadcast(_:capacity:start:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Channels_commonKt")))
@interface CnmeshChannels_commonKt : CnmeshBase
+ (id _Nullable)consume:(id<CnmeshBroadcastChannel>)receiver block:(id _Nullable (^)(id<CnmeshReceiveChannel>))block __attribute__((swift_name("consume(_:block:)")));
+ (id _Nullable)consume:(id<CnmeshReceiveChannel>)receiver block_:(id _Nullable (^)(id<CnmeshReceiveChannel>))block __attribute__((swift_name("consume(_:block_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)consumeEach:(id<CnmeshBroadcastChannel>)receiver action:(void (^)(id _Nullable))action completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("consumeEach(_:action:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)consumeEach:(id<CnmeshReceiveChannel>)receiver action:(void (^)(id _Nullable))action completionHandler_:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("consumeEach(_:action:completionHandler_:)")));
+ (id<CnmeshSelectClause1>)onReceiveOrNull:(id<CnmeshReceiveChannel>)receiver __attribute__((swift_name("onReceiveOrNull(_:)"))) __attribute__((unavailable("Deprecated in the favour of 'onReceiveCatching'")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)receiveOrNull:(id<CnmeshReceiveChannel>)receiver completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receiveOrNull(_:completionHandler:)"))) __attribute__((unavailable("Deprecated in the favour of 'receiveCatching'")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toList:(id<CnmeshReceiveChannel>)receiver completionHandler:(void (^)(NSArray<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toList(_:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelsKt")))
@interface CnmeshChannelsKt : CnmeshBase
+ (void)sendBlocking:(id<CnmeshSendChannel>)receiver element:(id _Nullable)element __attribute__((swift_name("sendBlocking(_:element:)"))) __attribute__((unavailable("Deprecated in the favour of 'trySendBlocking'. Consider handling the result of 'trySendBlocking' explicitly and rethrow exception if necessary")));
+ (id _Nullable)trySendBlocking:(id<CnmeshSendChannel>)receiver element:(id _Nullable)element __attribute__((swift_name("trySendBlocking(_:element:)")));
+ (id<CnmeshFlow>)asFlow:(id<CnmeshBroadcastChannel>)receiver __attribute__((swift_name("asFlow(_:)"))) __attribute__((deprecated("'BroadcastChannel' is obsolete and all corresponding operators are deprecated in the favour of StateFlow and SharedFlow")));
+ (id<CnmeshFlow>)consumeAsFlow:(id<CnmeshReceiveChannel>)receiver __attribute__((swift_name("consumeAsFlow(_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)emitAll:(id<CnmeshFlowCollector>)receiver channel:(id<CnmeshReceiveChannel>)channel completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("emitAll(_:channel:completionHandler:)")));
+ (id<CnmeshReceiveChannel>)produceIn:(id<CnmeshFlow>)receiver scope:(id<CnmeshCoroutineScope>)scope __attribute__((swift_name("produceIn(_:scope:)")));
+ (id<CnmeshFlow>)receiveAsFlow:(id<CnmeshReceiveChannel>)receiver __attribute__((swift_name("receiveAsFlow(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MergeKt")))
@interface CnmeshMergeKt : CnmeshBase
+ (id<CnmeshFlow>)mergeFlows:(CnmeshKotlinArray<id<CnmeshFlow>> *)flows __attribute__((swift_name("merge(flows:)")));
+ (id<CnmeshFlow>)flatMapConcat:(id<CnmeshFlow>)receiver transform:(id<CnmeshKotlinSuspendFunction1>)transform __attribute__((swift_name("flatMapConcat(_:transform:)")));
+ (id<CnmeshFlow>)flatMapLatest:(id<CnmeshFlow>)receiver transform:(id<CnmeshKotlinSuspendFunction1>)transform __attribute__((swift_name("flatMapLatest(_:transform:)")));
+ (id<CnmeshFlow>)flatMapMerge:(id<CnmeshFlow>)receiver concurrency:(int32_t)concurrency transform:(id<CnmeshKotlinSuspendFunction1>)transform __attribute__((swift_name("flatMapMerge(_:concurrency:transform:)")));
+ (id<CnmeshFlow>)flattenConcat:(id<CnmeshFlow>)receiver __attribute__((swift_name("flattenConcat(_:)")));
+ (id<CnmeshFlow>)flattenMerge:(id<CnmeshFlow>)receiver concurrency:(int32_t)concurrency __attribute__((swift_name("flattenMerge(_:concurrency:)")));
+ (id<CnmeshFlow>)mapLatest:(id<CnmeshFlow>)receiver transform:(id<CnmeshKotlinSuspendFunction1>)transform __attribute__((swift_name("mapLatest(_:transform:)")));
+ (id<CnmeshFlow>)merge:(id)receiver __attribute__((swift_name("merge(_:)")));
+ (id<CnmeshFlow>)transformLatest:(id<CnmeshFlow>)receiver transform:(id<CnmeshKotlinSuspendFunction2>)transform __attribute__((swift_name("transformLatest(_:transform:)")));
@property (class, readonly) int32_t DEFAULT_CONCURRENCY __attribute__((swift_name("DEFAULT_CONCURRENCY")));
@property (class, readonly) NSString *DEFAULT_CONCURRENCY_PROPERTY_NAME __attribute__((swift_name("DEFAULT_CONCURRENCY_PROPERTY_NAME")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LintKt")))
@interface CnmeshLintKt : CnmeshBase
+ (id<CnmeshKotlinCoroutineContext>)coroutineContext:(id<CnmeshFlowCollector>)receiver __attribute__((swift_name("coroutineContext(_:)"))) __attribute__((unavailable("coroutineContext is resolved into the property of outer CoroutineScope which is likely to be an error.Use currentCoroutineContext() instead or specify the receiver of coroutineContext explicitly")));
+ (BOOL)isActive:(id<CnmeshFlowCollector>)receiver __attribute__((swift_name("isActive(_:)"))) __attribute__((unavailable("isActive is resolved into the extension of outer CoroutineScope which is likely to be an error.Use currentCoroutineContext().isActive or cancellable() operator instead or specify the receiver of isActive explicitly. Additionally, flow {} builder emissions are cancellable by default.")));
+ (void)cancel:(id<CnmeshFlowCollector>)receiver cause:(CnmeshKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(_:cause:)"))) __attribute__((unavailable("cancel() is resolved into the extension of outer CoroutineScope which is likely to be an error.Use currentCoroutineContext().cancel() instead or specify the receiver of cancel() explicitly")));
+ (id<CnmeshFlow>)cancellable:(id<CnmeshSharedFlow>)receiver __attribute__((swift_name("cancellable(_:)"))) __attribute__((unavailable("Applying 'cancellable' to a SharedFlow has no effect. See the SharedFlow documentation on Operator Fusion.")));
+ (id<CnmeshFlow>)catch:(id<CnmeshSharedFlow>)receiver action:(id<CnmeshKotlinSuspendFunction2>)action __attribute__((swift_name("catch(_:action:)"))) __attribute__((deprecated("SharedFlow never completes, so this operator typically has not effect, it can only catch exceptions from 'onSubscribe' operator")));
+ (id<CnmeshFlow>)conflate:(id<CnmeshStateFlow>)receiver __attribute__((swift_name("conflate(_:)"))) __attribute__((unavailable("Applying 'conflate' to StateFlow has no effect. See the StateFlow documentation on Operator Fusion.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)count:(id<CnmeshSharedFlow>)receiver completionHandler:(void (^)(CnmeshInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("count(_:completionHandler:)"))) __attribute__((deprecated("SharedFlow never completes, so this terminal operation never completes.")));
+ (id<CnmeshFlow>)distinctUntilChanged:(id<CnmeshStateFlow>)receiver __attribute__((swift_name("distinctUntilChanged(_:)"))) __attribute__((unavailable("Applying 'distinctUntilChanged' to StateFlow has no effect. See the StateFlow documentation on Operator Fusion.")));
+ (id<CnmeshFlow>)flowOn:(id<CnmeshSharedFlow>)receiver context:(id<CnmeshKotlinCoroutineContext>)context __attribute__((swift_name("flowOn(_:context:)"))) __attribute__((unavailable("Applying 'flowOn' to SharedFlow has no effect. See the SharedFlow documentation on Operator Fusion.")));
+ (id<CnmeshFlow>)retry:(id<CnmeshSharedFlow>)receiver retries:(int64_t)retries predicate:(id<CnmeshKotlinSuspendFunction1>)predicate __attribute__((swift_name("retry(_:retries:predicate:)"))) __attribute__((deprecated("SharedFlow never completes, so this operator has no effect.")));
+ (id<CnmeshFlow>)retryWhen:(id<CnmeshSharedFlow>)receiver predicate:(id<CnmeshKotlinSuspendFunction3>)predicate __attribute__((swift_name("retryWhen(_:predicate:)"))) __attribute__((deprecated("SharedFlow never completes, so this operator has no effect.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toList:(id<CnmeshSharedFlow>)receiver completionHandler:(void (^)(NSArray<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toList(_:completionHandler:)"))) __attribute__((deprecated("SharedFlow never completes, so this terminal operation never completes.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toSet:(id<CnmeshSharedFlow>)receiver completionHandler:(void (^)(NSSet<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toSet(_:completionHandler:)"))) __attribute__((deprecated("SharedFlow never completes, so this terminal operation never completes.")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SharedFlowKt")))
@interface CnmeshSharedFlowKt : CnmeshBase
+ (id<CnmeshMutableSharedFlow>)MutableSharedFlowReplay:(int32_t)replay extraBufferCapacity:(int32_t)extraBufferCapacity onBufferOverflow:(CnmeshBufferOverflow *)onBufferOverflow __attribute__((swift_name("MutableSharedFlow(replay:extraBufferCapacity:onBufferOverflow:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StateFlowKt")))
@interface CnmeshStateFlowKt : CnmeshBase
+ (id<CnmeshMutableStateFlow>)MutableStateFlowValue:(id _Nullable)value __attribute__((swift_name("MutableStateFlow(value:)")));
+ (id _Nullable)getAndUpdate:(id<CnmeshMutableStateFlow>)receiver function:(id _Nullable (^)(id _Nullable))function __attribute__((swift_name("getAndUpdate(_:function:)")));
+ (void)update:(id<CnmeshMutableStateFlow>)receiver function:(id _Nullable (^)(id _Nullable))function __attribute__((swift_name("update(_:function:)")));
+ (id _Nullable)updateAndGet:(id<CnmeshMutableStateFlow>)receiver function:(id _Nullable (^)(id _Nullable))function __attribute__((swift_name("updateAndGet(_:function:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ZipKt")))
@interface CnmeshZipKt : CnmeshBase
+ (id<CnmeshFlow>)combineFlows:(CnmeshKotlinArray<id<CnmeshFlow>> *)flows transform:(id<CnmeshKotlinSuspendFunction1>)transform __attribute__((swift_name("combine(flows:transform:)")));
+ (id<CnmeshFlow>)combineFlows:(id)flows transform_:(id<CnmeshKotlinSuspendFunction1>)transform __attribute__((swift_name("combine(flows:transform_:)")));
+ (id<CnmeshFlow>)combineFlow:(id<CnmeshFlow>)flow flow2:(id<CnmeshFlow>)flow2 flow3:(id<CnmeshFlow>)flow3 flow4:(id<CnmeshFlow>)flow4 flow5:(id<CnmeshFlow>)flow5 transform:(id<CnmeshKotlinSuspendFunction5>)transform __attribute__((swift_name("combine(flow:flow2:flow3:flow4:flow5:transform:)")));
+ (id<CnmeshFlow>)combineFlow:(id<CnmeshFlow>)flow flow2:(id<CnmeshFlow>)flow2 flow3:(id<CnmeshFlow>)flow3 flow4:(id<CnmeshFlow>)flow4 transform:(id<CnmeshKotlinSuspendFunction4>)transform __attribute__((swift_name("combine(flow:flow2:flow3:flow4:transform:)")));
+ (id<CnmeshFlow>)combineFlow:(id<CnmeshFlow>)flow flow2:(id<CnmeshFlow>)flow2 flow3:(id<CnmeshFlow>)flow3 transform:(id<CnmeshKotlinSuspendFunction3>)transform __attribute__((swift_name("combine(flow:flow2:flow3:transform:)")));
+ (id<CnmeshFlow>)combineFlow:(id<CnmeshFlow>)flow flow2:(id<CnmeshFlow>)flow2 transform:(id<CnmeshKotlinSuspendFunction2>)transform __attribute__((swift_name("combine(flow:flow2:transform:)")));
+ (id<CnmeshFlow>)combineTransformFlows:(CnmeshKotlinArray<id<CnmeshFlow>> *)flows transform:(id<CnmeshKotlinSuspendFunction2>)transform __attribute__((swift_name("combineTransform(flows:transform:)")));
+ (id<CnmeshFlow>)combineTransformFlows:(id)flows transform_:(id<CnmeshKotlinSuspendFunction2>)transform __attribute__((swift_name("combineTransform(flows:transform_:)")));
+ (id<CnmeshFlow>)combineTransformFlow:(id<CnmeshFlow>)flow flow2:(id<CnmeshFlow>)flow2 flow3:(id<CnmeshFlow>)flow3 flow4:(id<CnmeshFlow>)flow4 flow5:(id<CnmeshFlow>)flow5 transform:(id<CnmeshKotlinSuspendFunction6>)transform __attribute__((swift_name("combineTransform(flow:flow2:flow3:flow4:flow5:transform:)")));
+ (id<CnmeshFlow>)combineTransformFlow:(id<CnmeshFlow>)flow flow2:(id<CnmeshFlow>)flow2 flow3:(id<CnmeshFlow>)flow3 flow4:(id<CnmeshFlow>)flow4 transform:(id<CnmeshKotlinSuspendFunction5>)transform __attribute__((swift_name("combineTransform(flow:flow2:flow3:flow4:transform:)")));
+ (id<CnmeshFlow>)combineTransformFlow:(id<CnmeshFlow>)flow flow2:(id<CnmeshFlow>)flow2 flow3:(id<CnmeshFlow>)flow3 transform:(id<CnmeshKotlinSuspendFunction4>)transform __attribute__((swift_name("combineTransform(flow:flow2:flow3:transform:)")));
+ (id<CnmeshFlow>)combineTransformFlow:(id<CnmeshFlow>)flow flow2:(id<CnmeshFlow>)flow2 transform:(id<CnmeshKotlinSuspendFunction3>)transform __attribute__((swift_name("combineTransform(flow:flow2:transform:)")));
+ (id<CnmeshFlow>)combine:(id<CnmeshFlow>)receiver flow:(id<CnmeshFlow>)flow transform:(id<CnmeshKotlinSuspendFunction2>)transform __attribute__((swift_name("combine(_:flow:transform:)")));
+ (id<CnmeshFlow>)combineTransform:(id<CnmeshFlow>)receiver flow:(id<CnmeshFlow>)flow transform:(id<CnmeshKotlinSuspendFunction3>)transform __attribute__((swift_name("combineTransform(_:flow:transform:)")));
+ (id<CnmeshFlow>)zip:(id<CnmeshFlow>)receiver other:(id<CnmeshFlow>)other transform:(id<CnmeshKotlinSuspendFunction2>)transform __attribute__((swift_name("zip(_:other:transform:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ShareKt")))
@interface CnmeshShareKt : CnmeshBase
+ (id<CnmeshSharedFlow>)asSharedFlow:(id<CnmeshMutableSharedFlow>)receiver __attribute__((swift_name("asSharedFlow(_:)")));
+ (id<CnmeshStateFlow>)asStateFlow:(id<CnmeshMutableStateFlow>)receiver __attribute__((swift_name("asStateFlow(_:)")));
+ (id<CnmeshSharedFlow>)onSubscription:(id<CnmeshSharedFlow>)receiver action:(id<CnmeshKotlinSuspendFunction1>)action __attribute__((swift_name("onSubscription(_:action:)")));
+ (id<CnmeshSharedFlow>)shareIn:(id<CnmeshFlow>)receiver scope:(id<CnmeshCoroutineScope>)scope started:(id<CnmeshSharingStarted>)started replay:(int32_t)replay __attribute__((swift_name("shareIn(_:scope:started:replay:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)stateIn:(id<CnmeshFlow>)receiver scope:(id<CnmeshCoroutineScope>)scope completionHandler:(void (^)(id<CnmeshStateFlow> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("stateIn(_:scope:completionHandler:)")));
+ (id<CnmeshStateFlow>)stateIn:(id<CnmeshFlow>)receiver scope:(id<CnmeshCoroutineScope>)scope started:(id<CnmeshSharingStarted>)started initialValue:(id _Nullable)initialValue __attribute__((swift_name("stateIn(_:scope:started:initialValue:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContextKt")))
@interface CnmeshContextKt : CnmeshBase
+ (id<CnmeshFlow>)buffer:(id<CnmeshFlow>)receiver capacity:(int32_t)capacity onBufferOverflow:(CnmeshBufferOverflow *)onBufferOverflow __attribute__((swift_name("buffer(_:capacity:onBufferOverflow:)")));
+ (id<CnmeshFlow>)cancellable:(id<CnmeshFlow>)receiver __attribute__((swift_name("cancellable(_:)")));
+ (id<CnmeshFlow>)conflate:(id<CnmeshFlow>)receiver __attribute__((swift_name("conflate(_:)")));
+ (id<CnmeshFlow>)flowOn:(id<CnmeshFlow>)receiver context:(id<CnmeshKotlinCoroutineContext>)context __attribute__((swift_name("flowOn(_:context:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MigrationKt")))
@interface CnmeshMigrationKt : CnmeshBase
+ (id<CnmeshFlow>)cache:(id<CnmeshFlow>)receiver __attribute__((swift_name("cache(_:)"))) __attribute__((unavailable("Flow analogue of 'cache()' is 'shareIn' with unlimited replay and 'started = SharingStared.Lazily' argument'")));
+ (id<CnmeshFlow>)combineLatest:(id<CnmeshFlow>)receiver other:(id<CnmeshFlow>)other other2:(id<CnmeshFlow>)other2 other3:(id<CnmeshFlow>)other3 other4:(id<CnmeshFlow>)other4 transform:(id<CnmeshKotlinSuspendFunction5>)transform __attribute__((swift_name("combineLatest(_:other:other2:other3:other4:transform:)"))) __attribute__((unavailable("Flow analogue of 'combineLatest' is 'combine'")));
+ (id<CnmeshFlow>)combineLatest:(id<CnmeshFlow>)receiver other:(id<CnmeshFlow>)other other2:(id<CnmeshFlow>)other2 other3:(id<CnmeshFlow>)other3 transform:(id<CnmeshKotlinSuspendFunction4>)transform __attribute__((swift_name("combineLatest(_:other:other2:other3:transform:)"))) __attribute__((unavailable("Flow analogue of 'combineLatest' is 'combine'")));
+ (id<CnmeshFlow>)combineLatest:(id<CnmeshFlow>)receiver other:(id<CnmeshFlow>)other other2:(id<CnmeshFlow>)other2 transform:(id<CnmeshKotlinSuspendFunction3>)transform __attribute__((swift_name("combineLatest(_:other:other2:transform:)"))) __attribute__((unavailable("Flow analogue of 'combineLatest' is 'combine'")));
+ (id<CnmeshFlow>)combineLatest:(id<CnmeshFlow>)receiver other:(id<CnmeshFlow>)other transform:(id<CnmeshKotlinSuspendFunction2>)transform __attribute__((swift_name("combineLatest(_:other:transform:)"))) __attribute__((unavailable("Flow analogue of 'combineLatest' is 'combine'")));
+ (id<CnmeshFlow>)compose:(id<CnmeshFlow>)receiver transformer:(id<CnmeshFlow> (^)(id<CnmeshFlow>))transformer __attribute__((swift_name("compose(_:transformer:)"))) __attribute__((unavailable("Flow analogue of 'compose' is 'let'")));
+ (id<CnmeshFlow>)concatMap:(id<CnmeshFlow>)receiver mapper:(id<CnmeshFlow> (^)(id _Nullable))mapper __attribute__((swift_name("concatMap(_:mapper:)"))) __attribute__((unavailable("Flow analogue of 'concatMap' is 'flatMapConcat'")));
+ (id<CnmeshFlow>)concatWith:(id<CnmeshFlow>)receiver value:(id _Nullable)value __attribute__((swift_name("concatWith(_:value:)"))) __attribute__((unavailable("Flow analogue of 'concatWith' is 'onCompletion'. Use 'onCompletion { emit(value) }'")));
+ (id<CnmeshFlow>)concatWith:(id<CnmeshFlow>)receiver other:(id<CnmeshFlow>)other __attribute__((swift_name("concatWith(_:other:)"))) __attribute__((unavailable("Flow analogue of 'concatWith' is 'onCompletion'. Use 'onCompletion { if (it == null) emitAll(other) }'")));
+ (id<CnmeshFlow>)delayEach:(id<CnmeshFlow>)receiver timeMillis:(int64_t)timeMillis __attribute__((swift_name("delayEach(_:timeMillis:)"))) __attribute__((unavailable("Use 'onEach { delay(timeMillis) }'")));
+ (id<CnmeshFlow>)delayFlow:(id<CnmeshFlow>)receiver timeMillis:(int64_t)timeMillis __attribute__((swift_name("delayFlow(_:timeMillis:)"))) __attribute__((unavailable("Use 'onStart { delay(timeMillis) }'")));
+ (id<CnmeshFlow>)flatMap:(id<CnmeshFlow>)receiver mapper:(id<CnmeshKotlinSuspendFunction1>)mapper __attribute__((swift_name("flatMap(_:mapper:)"))) __attribute__((unavailable("Flow analogue is 'flatMapConcat'")));
+ (id<CnmeshFlow>)flatten:(id<CnmeshFlow>)receiver __attribute__((swift_name("flatten(_:)"))) __attribute__((unavailable("Flow analogue of 'flatten' is 'flattenConcat'")));
+ (void)forEach:(id<CnmeshFlow>)receiver action:(id<CnmeshKotlinSuspendFunction1>)action __attribute__((swift_name("forEach(_:action:)"))) __attribute__((unavailable("Flow analogue of 'forEach' is 'collect'")));
+ (id<CnmeshFlow>)merge:(id<CnmeshFlow>)receiver __attribute__((swift_name("merge(_:)"))) __attribute__((unavailable("Flow analogue of 'merge' is 'flattenConcat'")));
+ (id<CnmeshFlow>)observeOn:(id<CnmeshFlow>)receiver context:(id<CnmeshKotlinCoroutineContext>)context __attribute__((swift_name("observeOn(_:context:)"))) __attribute__((unavailable("Collect flow in the desired context instead")));
+ (id<CnmeshFlow>)onErrorResume:(id<CnmeshFlow>)receiver fallback:(id<CnmeshFlow>)fallback __attribute__((swift_name("onErrorResume(_:fallback:)"))) __attribute__((unavailable("Flow analogue of 'onErrorXxx' is 'catch'. Use 'catch { emitAll(fallback) }'")));
+ (id<CnmeshFlow>)onErrorResumeNext:(id<CnmeshFlow>)receiver fallback:(id<CnmeshFlow>)fallback __attribute__((swift_name("onErrorResumeNext(_:fallback:)"))) __attribute__((unavailable("Flow analogue of 'onErrorXxx' is 'catch'. Use 'catch { emitAll(fallback) }'")));
+ (id<CnmeshFlow>)onErrorReturn:(id<CnmeshFlow>)receiver fallback:(id _Nullable)fallback __attribute__((swift_name("onErrorReturn(_:fallback:)"))) __attribute__((unavailable("Flow analogue of 'onErrorXxx' is 'catch'. Use 'catch { emit(fallback) }'")));
+ (id<CnmeshFlow>)onErrorReturn:(id<CnmeshFlow>)receiver fallback:(id _Nullable)fallback predicate:(CnmeshBoolean *(^)(CnmeshKotlinThrowable *))predicate __attribute__((swift_name("onErrorReturn(_:fallback:predicate:)"))) __attribute__((unavailable("Flow analogue of 'onErrorXxx' is 'catch'. Use 'catch { e -> if (predicate(e)) emit(fallback) else throw e }'")));
+ (id<CnmeshFlow>)publish:(id<CnmeshFlow>)receiver __attribute__((swift_name("publish(_:)"))) __attribute__((unavailable("Flow analogue of 'publish()' is 'shareIn'. \npublish().connect() is the default strategy (no extra call is needed), \npublish().autoConnect() translates to 'started = SharingStared.Lazily' argument, \npublish().refCount() translates to 'started = SharingStared.WhileSubscribed()' argument.")));
+ (id<CnmeshFlow>)publish:(id<CnmeshFlow>)receiver bufferSize:(int32_t)bufferSize __attribute__((swift_name("publish(_:bufferSize:)"))) __attribute__((unavailable("Flow analogue of 'publish(bufferSize)' is 'buffer' followed by 'shareIn'. \npublish().connect() is the default strategy (no extra call is needed), \npublish().autoConnect() translates to 'started = SharingStared.Lazily' argument, \npublish().refCount() translates to 'started = SharingStared.WhileSubscribed()' argument.")));
+ (id<CnmeshFlow>)publishOn:(id<CnmeshFlow>)receiver context:(id<CnmeshKotlinCoroutineContext>)context __attribute__((swift_name("publishOn(_:context:)"))) __attribute__((unavailable("Collect flow in the desired context instead")));
+ (id<CnmeshFlow>)replay:(id<CnmeshFlow>)receiver __attribute__((swift_name("replay(_:)"))) __attribute__((unavailable("Flow analogue of 'replay()' is 'shareIn' with unlimited replay. \nreplay().connect() is the default strategy (no extra call is needed), \nreplay().autoConnect() translates to 'started = SharingStared.Lazily' argument, \nreplay().refCount() translates to 'started = SharingStared.WhileSubscribed()' argument.")));
+ (id<CnmeshFlow>)replay:(id<CnmeshFlow>)receiver bufferSize:(int32_t)bufferSize __attribute__((swift_name("replay(_:bufferSize:)"))) __attribute__((unavailable("Flow analogue of 'replay(bufferSize)' is 'shareIn' with the specified replay parameter. \nreplay().connect() is the default strategy (no extra call is needed), \nreplay().autoConnect() translates to 'started = SharingStared.Lazily' argument, \nreplay().refCount() translates to 'started = SharingStared.WhileSubscribed()' argument.")));
+ (id<CnmeshFlow>)scanFold:(id<CnmeshFlow>)receiver initial:(id _Nullable)initial operation:(id<CnmeshKotlinSuspendFunction2>)operation __attribute__((swift_name("scanFold(_:initial:operation:)"))) __attribute__((unavailable("Flow has less verbose 'scan' shortcut")));
+ (id<CnmeshFlow>)scanReduce:(id<CnmeshFlow>)receiver operation:(id<CnmeshKotlinSuspendFunction2>)operation __attribute__((swift_name("scanReduce(_:operation:)"))) __attribute__((unavailable("'scanReduce' was renamed to 'runningReduce' to be consistent with Kotlin standard library")));
+ (id<CnmeshFlow>)skip:(id<CnmeshFlow>)receiver count:(int32_t)count __attribute__((swift_name("skip(_:count:)"))) __attribute__((unavailable("Flow analogue of 'skip' is 'drop'")));
+ (id<CnmeshFlow>)startWith:(id<CnmeshFlow>)receiver value:(id _Nullable)value __attribute__((swift_name("startWith(_:value:)"))) __attribute__((unavailable("Flow analogue of 'startWith' is 'onStart'. Use 'onStart { emit(value) }'")));
+ (id<CnmeshFlow>)startWith:(id<CnmeshFlow>)receiver other:(id<CnmeshFlow>)other __attribute__((swift_name("startWith(_:other:)"))) __attribute__((unavailable("Flow analogue of 'startWith' is 'onStart'. Use 'onStart { emitAll(other) }'")));
+ (void)subscribe:(id<CnmeshFlow>)receiver __attribute__((swift_name("subscribe(_:)"))) __attribute__((unavailable("Use 'launchIn' with 'onEach', 'onCompletion' and 'catch' instead")));
+ (void)subscribe:(id<CnmeshFlow>)receiver onEach:(id<CnmeshKotlinSuspendFunction1>)onEach __attribute__((swift_name("subscribe(_:onEach:)"))) __attribute__((unavailable("Use 'launchIn' with 'onEach', 'onCompletion' and 'catch' instead")));
+ (void)subscribe:(id<CnmeshFlow>)receiver onEach:(id<CnmeshKotlinSuspendFunction1>)onEach onError:(id<CnmeshKotlinSuspendFunction1>)onError __attribute__((swift_name("subscribe(_:onEach:onError:)"))) __attribute__((unavailable("Use 'launchIn' with 'onEach', 'onCompletion' and 'catch' instead")));
+ (id<CnmeshFlow>)subscribeOn:(id<CnmeshFlow>)receiver context:(id<CnmeshKotlinCoroutineContext>)context __attribute__((swift_name("subscribeOn(_:context:)"))) __attribute__((unavailable("Use 'flowOn' instead")));
+ (id<CnmeshFlow>)switchMap:(id<CnmeshFlow>)receiver transform:(id<CnmeshKotlinSuspendFunction1>)transform __attribute__((swift_name("switchMap(_:transform:)"))) __attribute__((unavailable("Flow analogues of 'switchMap' are 'transformLatest', 'flatMapLatest' and 'mapLatest'")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ErrorsKt")))
@interface CnmeshErrorsKt : CnmeshBase
+ (id<CnmeshFlow>)catch:(id<CnmeshFlow>)receiver action:(id<CnmeshKotlinSuspendFunction2>)action __attribute__((swift_name("catch(_:action:)")));
+ (id<CnmeshFlow>)retry:(id<CnmeshFlow>)receiver retries:(int64_t)retries predicate:(id<CnmeshKotlinSuspendFunction1>)predicate __attribute__((swift_name("retry(_:retries:predicate:)")));
+ (id<CnmeshFlow>)retryWhen:(id<CnmeshFlow>)receiver predicate:(id<CnmeshKotlinSuspendFunction3>)predicate __attribute__((swift_name("retryWhen(_:predicate:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CollectKt")))
@interface CnmeshCollectKt : CnmeshBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)collect:(id<CnmeshFlow>)receiver completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)collectIndexed:(id<CnmeshFlow>)receiver action:(id<CnmeshKotlinSuspendFunction2>)action completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collectIndexed(_:action:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)collectLatest:(id<CnmeshFlow>)receiver action:(id<CnmeshKotlinSuspendFunction1>)action completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collectLatest(_:action:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)emitAll:(id<CnmeshFlowCollector>)receiver flow:(id<CnmeshFlow>)flow completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("emitAll(_:flow:completionHandler:)")));
+ (id<CnmeshJob>)launchIn:(id<CnmeshFlow>)receiver scope:(id<CnmeshCoroutineScope>)scope __attribute__((swift_name("launchIn(_:scope:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CountKt")))
@interface CnmeshCountKt : CnmeshBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)count:(id<CnmeshFlow>)receiver completionHandler:(void (^)(CnmeshInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("count(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)count:(id<CnmeshFlow>)receiver predicate:(id<CnmeshKotlinSuspendFunction1>)predicate completionHandler:(void (^)(CnmeshInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("count(_:predicate:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistinctKt")))
@interface CnmeshDistinctKt : CnmeshBase
+ (id<CnmeshFlow>)distinctUntilChanged:(id<CnmeshFlow>)receiver __attribute__((swift_name("distinctUntilChanged(_:)")));
+ (id<CnmeshFlow>)distinctUntilChanged:(id<CnmeshFlow>)receiver areEquivalent:(CnmeshBoolean *(^)(id _Nullable, id _Nullable))areEquivalent __attribute__((swift_name("distinctUntilChanged(_:areEquivalent:)")));
+ (id<CnmeshFlow>)distinctUntilChangedBy:(id<CnmeshFlow>)receiver keySelector:(id _Nullable (^)(id _Nullable))keySelector __attribute__((swift_name("distinctUntilChangedBy(_:keySelector:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LimitKt")))
@interface CnmeshLimitKt : CnmeshBase
+ (id<CnmeshFlow>)drop:(id<CnmeshFlow>)receiver count:(int32_t)count __attribute__((swift_name("drop(_:count:)")));
+ (id<CnmeshFlow>)dropWhile:(id<CnmeshFlow>)receiver predicate:(id<CnmeshKotlinSuspendFunction1>)predicate __attribute__((swift_name("dropWhile(_:predicate:)")));
+ (id<CnmeshFlow>)take:(id<CnmeshFlow>)receiver count:(int32_t)count __attribute__((swift_name("take(_:count:)")));
+ (id<CnmeshFlow>)takeWhile:(id<CnmeshFlow>)receiver predicate:(id<CnmeshKotlinSuspendFunction1>)predicate __attribute__((swift_name("takeWhile(_:predicate:)")));
+ (id<CnmeshFlow>)transformWhile:(id<CnmeshFlow>)receiver transform:(id<CnmeshKotlinSuspendFunction2>)transform __attribute__((swift_name("transformWhile(_:transform:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TransformKt")))
@interface CnmeshTransformKt : CnmeshBase
+ (id<CnmeshFlow>)filter:(id<CnmeshFlow>)receiver predicate:(id<CnmeshKotlinSuspendFunction1>)predicate __attribute__((swift_name("filter(_:predicate:)")));
+ (id<CnmeshFlow>)filterIsInstance:(id<CnmeshFlow>)receiver __attribute__((swift_name("filterIsInstance(_:)")));
+ (id<CnmeshFlow>)filterNot:(id<CnmeshFlow>)receiver predicate:(id<CnmeshKotlinSuspendFunction1>)predicate __attribute__((swift_name("filterNot(_:predicate:)")));
+ (id<CnmeshFlow>)filterNotNull:(id<CnmeshFlow>)receiver __attribute__((swift_name("filterNotNull(_:)")));
+ (id<CnmeshFlow>)map:(id<CnmeshFlow>)receiver transform:(id<CnmeshKotlinSuspendFunction1>)transform __attribute__((swift_name("map(_:transform:)")));
+ (id<CnmeshFlow>)mapNotNull:(id<CnmeshFlow>)receiver transform:(id<CnmeshKotlinSuspendFunction1>)transform __attribute__((swift_name("mapNotNull(_:transform:)")));
+ (id<CnmeshFlow>)onEach:(id<CnmeshFlow>)receiver action:(id<CnmeshKotlinSuspendFunction1>)action __attribute__((swift_name("onEach(_:action:)")));
+ (id<CnmeshFlow>)runningFold:(id<CnmeshFlow>)receiver initial:(id _Nullable)initial operation:(id<CnmeshKotlinSuspendFunction2>)operation __attribute__((swift_name("runningFold(_:initial:operation:)")));
+ (id<CnmeshFlow>)runningReduce:(id<CnmeshFlow>)receiver operation:(id<CnmeshKotlinSuspendFunction2>)operation __attribute__((swift_name("runningReduce(_:operation:)")));
+ (id<CnmeshFlow>)scan:(id<CnmeshFlow>)receiver initial:(id _Nullable)initial operation:(id<CnmeshKotlinSuspendFunction2>)operation __attribute__((swift_name("scan(_:initial:operation:)")));
+ (id<CnmeshFlow>)withIndex:(id<CnmeshFlow>)receiver __attribute__((swift_name("withIndex(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ReduceKt")))
@interface CnmeshReduceKt : CnmeshBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)first:(id<CnmeshFlow>)receiver completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("first(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)first:(id<CnmeshFlow>)receiver predicate:(id<CnmeshKotlinSuspendFunction1>)predicate completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("first(_:predicate:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)firstOrNull:(id<CnmeshFlow>)receiver completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("firstOrNull(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)firstOrNull:(id<CnmeshFlow>)receiver predicate:(id<CnmeshKotlinSuspendFunction1>)predicate completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("firstOrNull(_:predicate:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)fold:(id<CnmeshFlow>)receiver initial:(id _Nullable)initial operation:(id<CnmeshKotlinSuspendFunction2>)operation completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("fold(_:initial:operation:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)last:(id<CnmeshFlow>)receiver completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("last(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)lastOrNull:(id<CnmeshFlow>)receiver completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("lastOrNull(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)reduce:(id<CnmeshFlow>)receiver operation:(id<CnmeshKotlinSuspendFunction2>)operation completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("reduce(_:operation:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)single:(id<CnmeshFlow>)receiver completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("single(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)singleOrNull:(id<CnmeshFlow>)receiver completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("singleOrNull(_:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EmittersKt")))
@interface CnmeshEmittersKt : CnmeshBase
+ (id<CnmeshFlow>)onCompletion:(id<CnmeshFlow>)receiver action:(id<CnmeshKotlinSuspendFunction2>)action __attribute__((swift_name("onCompletion(_:action:)")));
+ (id<CnmeshFlow>)onEmpty:(id<CnmeshFlow>)receiver action:(id<CnmeshKotlinSuspendFunction1>)action __attribute__((swift_name("onEmpty(_:action:)")));
+ (id<CnmeshFlow>)onStart:(id<CnmeshFlow>)receiver action:(id<CnmeshKotlinSuspendFunction1>)action __attribute__((swift_name("onStart(_:action:)")));
+ (id<CnmeshFlow>)transform:(id<CnmeshFlow>)receiver transform:(id<CnmeshKotlinSuspendFunction2>)transform __attribute__((swift_name("transform(_:transform:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CollectionKt")))
@interface CnmeshCollectionKt : CnmeshBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toCollection:(id<CnmeshFlow>)receiver destination:(id)destination completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toCollection(_:destination:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toList:(id<CnmeshFlow>)receiver destination:(NSMutableArray<id> *)destination completionHandler:(void (^)(NSArray<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toList(_:destination:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toSet:(id<CnmeshFlow>)receiver destination:(CnmeshMutableSet<id> *)destination completionHandler:(void (^)(NSSet<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toSet(_:destination:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SelectKt")))
@interface CnmeshSelectKt : CnmeshBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)selectBuilder:(void (^)(id<CnmeshSelectBuilder>))builder completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("select(builder:completionHandler:)")));
+ (void)onTimeout:(id<CnmeshSelectBuilder>)receiver timeout:(int64_t)timeout block:(id<CnmeshKotlinSuspendFunction0>)block __attribute__((swift_name("onTimeout(_:timeout:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SelectUnbiasedKt")))
@interface CnmeshSelectUnbiasedKt : CnmeshBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)selectUnbiasedBuilder:(void (^)(id<CnmeshSelectBuilder>))builder completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("selectUnbiased(builder:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WhileSelectKt")))
@interface CnmeshWhileSelectKt : CnmeshBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)whileSelectBuilder:(void (^)(id<CnmeshSelectBuilder>))builder completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("whileSelect(builder:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SynchronizedKt")))
@interface CnmeshSynchronizedKt : CnmeshBase
+ (id _Nullable)synchronizedLock:(CnmeshAtomicfuSynchronizedObject *)lock block:(id _Nullable (^)(void))block __attribute__((swift_name("synchronized(lock:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DispatchedContinuationKt")))
@interface CnmeshDispatchedContinuationKt : CnmeshBase
+ (void)resumeCancellableWith:(id<CnmeshKotlinContinuation>)receiver result:(id _Nullable)result onCancellation:(void (^ _Nullable)(CnmeshKotlinThrowable *))onCancellation __attribute__((swift_name("resumeCancellableWith(_:result:onCancellation:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MutexKt")))
@interface CnmeshMutexKt : CnmeshBase
+ (id<CnmeshMutex>)MutexLocked:(BOOL)locked __attribute__((swift_name("Mutex(locked:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withLock:(id<CnmeshMutex>)receiver owner:(id _Nullable)owner action:(id _Nullable (^)(void))action completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("withLock(_:owner:action:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SemaphoreKt")))
@interface CnmeshSemaphoreKt : CnmeshBase
+ (id<CnmeshSemaphore>)SemaphorePermits:(int32_t)permits acquiredPermits:(int32_t)acquiredPermits __attribute__((swift_name("Semaphore(permits:acquiredPermits:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withPermit:(id<CnmeshSemaphore>)receiver action:(id _Nullable (^)(void))action completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("withPermit(_:action:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UuidKt")))
@interface CnmeshUuidKt : CnmeshBase
+ (CnmeshUuid *)nameBasedUuidOfNamespace:(CnmeshUuid *)namespace_ name:(NSString *)name hasher:(id<CnmeshUuidHasher>)hasher __attribute__((swift_name("nameBasedUuidOf(namespace:name:hasher:)")));
+ (CnmeshUuid *)uuid4 __attribute__((swift_name("uuid4()")));
+ (CnmeshUuid *)uuidFromString:(NSString *)string __attribute__((swift_name("uuidFrom(string:)")));
+ (CnmeshUuid *)uuidOfBytes:(CnmeshKotlinByteArray *)bytes __attribute__((swift_name("uuidOf(bytes:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NamebasedKt")))
@interface CnmeshNamebasedKt : CnmeshBase
+ (CnmeshUuid *)uuid3OfNamespace:(CnmeshUuid *)namespace_ name:(NSString *)name __attribute__((swift_name("uuid3Of(namespace:name:)")));
+ (CnmeshUuid *)uuid5OfNamespace:(CnmeshUuid *)namespace_ name:(NSString *)name __attribute__((swift_name("uuid5Of(namespace:name:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FunctionsKt")))
@interface CnmeshFunctionsKt : CnmeshBase
+ (NSMutableArray<id> *)sharedMutableListOf __attribute__((swift_name("sharedMutableListOf()")));
+ (NSMutableArray<id> *)sharedMutableListOfItems:(CnmeshKotlinArray<id> *)items __attribute__((swift_name("sharedMutableListOf(items:)")));
+ (CnmeshMutableDictionary<id, id> *)sharedMutableMapOf __attribute__((swift_name("sharedMutableMapOf()")));
+ (CnmeshMutableDictionary<id, id> *)sharedMutableMapOfItems:(CnmeshKotlinArray<CnmeshKotlinPair<id, id> *> *)items __attribute__((swift_name("sharedMutableMapOf(items:)")));
+ (CnmeshMutableSet<id> *)sharedMutableSetOf __attribute__((swift_name("sharedMutableSetOf()")));
+ (CnmeshMutableSet<id> *)sharedMutableSetOfItems:(CnmeshKotlinArray<id> *)items __attribute__((swift_name("sharedMutableSetOf(items:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultContextExtKt")))
@interface CnmeshDefaultContextExtKt : CnmeshBase
+ (void)loadKoinModulesModules:(NSArray<CnmeshModule *> *)modules __attribute__((swift_name("loadKoinModules(modules:)")));
+ (void)loadKoinModulesModule:(CnmeshModule *)module __attribute__((swift_name("loadKoinModules(module:)")));
+ (CnmeshKoinApplication *)startKoinKoinApplication:(CnmeshKoinApplication *)koinApplication __attribute__((swift_name("startKoin(koinApplication:)")));
+ (CnmeshKoinApplication *)startKoinAppDeclaration:(void (^)(CnmeshKoinApplication *))appDeclaration __attribute__((swift_name("startKoin(appDeclaration:)")));
+ (void)stopKoin __attribute__((swift_name("stopKoin()")));
+ (void)unloadKoinModulesModules:(NSArray<CnmeshModule *> *)modules __attribute__((swift_name("unloadKoinModules(modules:)")));
+ (void)unloadKoinModulesModule:(CnmeshModule *)module __attribute__((swift_name("unloadKoinModules(module:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinScopeComponentKt")))
@interface CnmeshKoinScopeComponentKt : CnmeshBase
+ (CnmeshScope *)createScope:(id<CnmeshKoinScopeComponent>)receiver source:(id _Nullable)source __attribute__((swift_name("createScope(_:source:)")));
+ (id<CnmeshKotlinLazy>)getOrCreateScope:(id<CnmeshKoinScopeComponent>)receiver __attribute__((swift_name("getOrCreateScope(_:)")));
+ (NSString *)getScopeId:(id)receiver __attribute__((swift_name("getScopeId(_:)")));
+ (CnmeshTypeQualifier *)getScopeName:(id)receiver __attribute__((swift_name("getScopeName(_:)")));
+ (CnmeshScope * _Nullable)getScopeOrNull:(id<CnmeshKoinScopeComponent>)receiver __attribute__((swift_name("getScopeOrNull(_:)")));
+ (id<CnmeshKotlinLazy>)doNewScope:(id<CnmeshKoinScopeComponent>)receiver __attribute__((swift_name("doNewScope(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinComponentKt")))
@interface CnmeshKoinComponentKt : CnmeshBase
+ (id)get:(id<CnmeshKoinComponent>)receiver qualifier:(id<CnmeshQualifier> _Nullable)qualifier parameters:(CnmeshParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("get(_:qualifier:parameters:)")));
+ (id<CnmeshKotlinLazy>)inject:(id<CnmeshKoinComponent>)receiver qualifier:(id<CnmeshQualifier> _Nullable)qualifier mode:(CnmeshKotlinLazyThreadSafetyMode *)mode parameters:(CnmeshParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("inject(_:qualifier:mode:parameters:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ModuleKt")))
@interface CnmeshModuleKt : CnmeshBase
+ (CnmeshFactoryInstanceFactory<id> *)_factoryInstanceFactoryQualifier:(id<CnmeshQualifier> _Nullable)qualifier definition:(id _Nullable (^)(CnmeshScope *, CnmeshParametersHolder *))definition scopeQualifier:(id<CnmeshQualifier>)scopeQualifier __attribute__((swift_name("_factoryInstanceFactory(qualifier:definition:scopeQualifier:)")));
+ (CnmeshScopedInstanceFactory<id> *)_scopedInstanceFactoryQualifier:(id<CnmeshQualifier> _Nullable)qualifier definition:(id _Nullable (^)(CnmeshScope *, CnmeshParametersHolder *))definition scopeQualifier:(id<CnmeshQualifier>)scopeQualifier __attribute__((swift_name("_scopedInstanceFactory(qualifier:definition:scopeQualifier:)")));
+ (CnmeshSingleInstanceFactory<id> *)_singleInstanceFactoryQualifier:(id<CnmeshQualifier> _Nullable)qualifier definition:(id _Nullable (^)(CnmeshScope *, CnmeshParametersHolder *))definition scopeQualifier:(id<CnmeshQualifier>)scopeQualifier __attribute__((swift_name("_singleInstanceFactory(qualifier:definition:scopeQualifier:)")));
+ (NSArray<CnmeshModule *> *)plus:(NSArray<CnmeshModule *> *)receiver module:(CnmeshModule *)module __attribute__((swift_name("plus(_:module:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("QualifierKt")))
@interface CnmeshQualifierKt : CnmeshBase
+ (CnmeshTypeQualifier *)_q __attribute__((swift_name("_q()")));
+ (CnmeshStringQualifier *)_qName:(NSString *)name __attribute__((swift_name("_q(name:)")));
+ (CnmeshTypeQualifier *)named __attribute__((swift_name("named()")));
+ (id<CnmeshQualifier>)namedEnum:(CnmeshKotlinEnum<CnmeshKotlinEnum *> *)enum_ __attribute__((swift_name("named(enum:)")));
+ (CnmeshStringQualifier *)namedName:(NSString *)name __attribute__((swift_name("named(name:)")));
+ (CnmeshTypeQualifier *)qualifier __attribute__((swift_name("qualifier()")));
+ (id<CnmeshQualifier>)qualifierEnum:(CnmeshKotlinEnum<CnmeshKotlinEnum *> *)enum_ __attribute__((swift_name("qualifier(enum:)")));
+ (CnmeshStringQualifier *)qualifierName:(NSString *)name __attribute__((swift_name("qualifier(name:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeasureKt")))
@interface CnmeshMeasureKt : CnmeshBase
+ (double)measureDurationCode:(void (^)(void))code __attribute__((swift_name("measureDuration(code:)")));
+ (CnmeshKotlinPair<id, CnmeshDouble *> *)measureDurationForResultCode:(id _Nullable (^)(void))code __attribute__((swift_name("measureDurationForResult(code:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BeanDefinitionKt")))
@interface CnmeshBeanDefinitionKt : CnmeshBase
+ (CnmeshBeanDefinition<id> *)_createDefinitionKind:(CnmeshKind *)kind qualifier:(id<CnmeshQualifier> _Nullable)qualifier definition:(id _Nullable (^)(CnmeshScope *, CnmeshParametersHolder *))definition secondaryTypes:(NSArray<id<CnmeshKotlinKClass>> *)secondaryTypes scopeQualifier:(id<CnmeshQualifier>)scopeQualifier __attribute__((swift_name("_createDefinition(kind:qualifier:definition:secondaryTypes:scopeQualifier:)")));
+ (NSString *)indexKeyClazz:(id<CnmeshKotlinKClass>)clazz typeQualifier:(id<CnmeshQualifier> _Nullable)typeQualifier scopeQualifier:(id<CnmeshQualifier>)scopeQualifier __attribute__((swift_name("indexKey(clazz:typeQualifier:scopeQualifier:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LoggerKt")))
@interface CnmeshLoggerKt : CnmeshBase
@property (class, readonly) NSString *KOIN_TAG __attribute__((swift_name("KOIN_TAG")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParametersHolderKt")))
@interface CnmeshParametersHolderKt : CnmeshBase
+ (CnmeshParametersHolder *)emptyParametersHolder __attribute__((swift_name("emptyParametersHolder()")));
+ (CnmeshParametersHolder *)parametersOfParameters:(CnmeshKotlinArray<id> *)parameters __attribute__((swift_name("parametersOf(parameters:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainThreadSafetyKt")))
@interface CnmeshMainThreadSafetyKt : CnmeshBase
@property (class, readonly) BOOL isMainThread __attribute__((swift_name("isMainThread")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinApplicationKt")))
@interface CnmeshKoinApplicationKt : CnmeshBase
+ (CnmeshKoinApplication *)koinApplicationAppDeclaration:(void (^ _Nullable)(CnmeshKoinApplication *))appDeclaration __attribute__((swift_name("koinApplication(appDeclaration:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ModuleDSLKt")))
@interface CnmeshModuleDSLKt : CnmeshBase
+ (CnmeshModule *)moduleCreatedAtStart:(BOOL)createdAtStart override:(BOOL)override moduleDeclaration:(void (^)(CnmeshModule *))moduleDeclaration __attribute__((swift_name("module(createdAtStart:override:moduleDeclaration:)"))) __attribute__((deprecated("'override' parameter is not used anymore. See 'allowOverride' in KoinApplication")));
+ (CnmeshModule *)moduleCreatedAtStart:(BOOL)createdAtStart moduleDeclaration:(void (^)(CnmeshModule *))moduleDeclaration __attribute__((swift_name("module(createdAtStart:moduleDeclaration:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StringExtKt")))
@interface CnmeshStringExtKt : CnmeshBase
+ (NSString *)clearQuotes:(NSString *)receiver __attribute__((swift_name("clearQuotes(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KClassExtKt")))
@interface CnmeshKClassExtKt : CnmeshBase
+ (NSString *)getFullName:(id<CnmeshKotlinKClass>)receiver __attribute__((swift_name("getFullName(_:)")));
+ (NSString *)saveCache:(id<CnmeshKotlinKClass>)receiver __attribute__((swift_name("saveCache(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InjectPropertyKt")))
@interface CnmeshInjectPropertyKt : CnmeshBase
+ (void)inject:(id _Nullable (^)(void))receiver __attribute__((swift_name("inject(_:)")));
+ (void)inject:(id _Nullable (^)(void))receiver koin:(CnmeshKoin *)koin __attribute__((swift_name("inject(_:koin:)")));
+ (void)inject:(id _Nullable (^)(void))receiver scope:(CnmeshScope *)scope __attribute__((swift_name("inject(_:scope:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NoArgKt")))
@interface CnmeshNoArgKt : CnmeshBase
+ (id<CnmeshMultiplatform_settingsSettings>)Settings __attribute__((swift_name("Settings()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimePeriodKt")))
@interface CnmeshDateTimePeriodKt : CnmeshBase
+ (CnmeshDateTimePeriod *)DateTimePeriodYears:(int32_t)years months:(int32_t)months days:(int32_t)days hours:(int32_t)hours minutes:(int32_t)minutes seconds:(int32_t)seconds nanoseconds:(int64_t)nanoseconds __attribute__((swift_name("DateTimePeriod(years:months:days:hours:minutes:seconds:nanoseconds:)")));
+ (CnmeshDatePeriod *)toDatePeriod:(NSString *)receiver __attribute__((swift_name("toDatePeriod(_:)")));
+ (CnmeshDateTimePeriod *)toDateTimePeriod:(NSString *)receiver __attribute__((swift_name("toDateTimePeriod(_:)")));
+ (CnmeshDateTimePeriod *)toDateTimePeriod_:(int64_t)receiver __attribute__((swift_name("toDateTimePeriod(__:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DayOfWeekKt")))
@interface CnmeshDayOfWeekKt : CnmeshBase
+ (CnmeshDayOfWeek *)DayOfWeekIsoDayNumber:(int32_t)isoDayNumber __attribute__((swift_name("DayOfWeek(isoDayNumber:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MonthKt")))
@interface CnmeshMonthKt : CnmeshBase
+ (CnmeshMonth *)MonthNumber:(int32_t)number __attribute__((swift_name("Month(number:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UtcOffsetKt")))
@interface CnmeshUtcOffsetKt : CnmeshBase
+ (CnmeshUtcOffset *)UtcOffset __attribute__((swift_name("UtcOffset()"))) __attribute__((unavailable("Use UtcOffset.ZERO instead")));
+ (CnmeshUtcOffset *)UtcOffsetHours:(CnmeshInt * _Nullable)hours minutes:(CnmeshInt * _Nullable)minutes seconds:(CnmeshInt * _Nullable)seconds __attribute__((swift_name("UtcOffset(hours:minutes:seconds:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClockKt")))
@interface CnmeshClockKt : CnmeshBase
+ (id<CnmeshKotlinTimeSource>)asTimeSource:(id<CnmeshClock>)receiver __attribute__((swift_name("asTimeSource(_:)")));
+ (CnmeshLocalDate *)todayAt:(id<CnmeshClock>)receiver timeZone:(CnmeshTimeZone *)timeZone __attribute__((swift_name("todayAt(_:timeZone:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InstantKt")))
@interface CnmeshInstantKt : CnmeshBase
+ (CnmeshInstant *)toInstant:(NSString *)receiver __attribute__((swift_name("toInstant(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConvertersKt")))
@interface CnmeshConvertersKt : CnmeshBase
+ (CnmeshInstant *)toKotlinInstant:(NSDate *)receiver __attribute__((swift_name("toKotlinInstant(_:)")));
+ (CnmeshTimeZone *)toKotlinTimeZone:(NSTimeZone *)receiver __attribute__((swift_name("toKotlinTimeZone(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDateKt")))
@interface CnmeshLocalDateKt : CnmeshBase
+ (CnmeshLocalDate *)toLocalDate:(NSString *)receiver __attribute__((swift_name("toLocalDate(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDateTimeKt")))
@interface CnmeshLocalDateTimeKt : CnmeshBase
+ (CnmeshLocalDateTime *)toLocalDateTime:(NSString *)receiver __attribute__((swift_name("toLocalDateTime(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonKt")))
@interface CnmeshJsonKt : CnmeshBase
+ (CnmeshJson *)JsonFrom:(CnmeshJson *)from builderAction:(void (^)(CnmeshJsonBuilder *))builderAction __attribute__((swift_name("Json(from:builderAction:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonElementKt")))
@interface CnmeshJsonElementKt : CnmeshBase
+ (CnmeshJsonPrimitive *)JsonPrimitiveValue:(CnmeshBoolean * _Nullable)value __attribute__((swift_name("JsonPrimitive(value:)")));
+ (CnmeshJsonPrimitive *)JsonPrimitiveValue_:(id _Nullable)value __attribute__((swift_name("JsonPrimitive(value_:)")));
+ (CnmeshJsonPrimitive *)JsonPrimitiveValue__:(NSString * _Nullable)value __attribute__((swift_name("JsonPrimitive(value__:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonElementBuildersKt")))
@interface CnmeshJsonElementBuildersKt : CnmeshBase
+ (NSArray<CnmeshJsonElement *> *)buildJsonArrayBuilderAction:(void (^)(CnmeshJsonArrayBuilder *))builderAction __attribute__((swift_name("buildJsonArray(builderAction:)")));
+ (NSDictionary<NSString *, CnmeshJsonElement *> *)buildJsonObjectBuilderAction:(void (^)(CnmeshJsonObjectBuilder *))builderAction __attribute__((swift_name("buildJsonObject(builderAction:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CNMeshSDKKt")))
@interface CnmeshCNMeshSDKKt : CnmeshBase
+ (void)initializeMeshSDK __attribute__((swift_name("initializeMeshSDK()")));
+ (void)initializeMeshSDKMeshData:(CnmeshMeshData * _Nullable)meshData __attribute__((swift_name("initializeMeshSDK(meshData:)")));
+ (void)initializeMeshSDKMeshData:(CnmeshMeshData * _Nullable)meshData appDeclaration:(void (^)(CnmeshKoinApplication *))appDeclaration __attribute__((swift_name("initializeMeshSDK(meshData:appDeclaration:)")));
+ (void)initializeMeshSDKProvisionMeshName:(NSString * _Nullable)provisionMeshName provisionMeshPassword:(NSString * _Nullable)provisionMeshPassword __attribute__((swift_name("initializeMeshSDK(provisionMeshName:provisionMeshPassword:)")));
+ (void)initializeMeshSDKAppDeclaration:(void (^)(CnmeshKoinApplication *))appDeclaration __attribute__((swift_name("initializeMeshSDK(appDeclaration:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DataStateKt")))
@interface CnmeshDataStateKt : CnmeshBase
+ (CnmeshGenericMessageInfoBuilder *)getErrorType:(NSString *)type message:(NSString *)message __attribute__((swift_name("getError(type:message:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FlowHelperKt")))
@interface CnmeshFlowHelperKt : CnmeshBase
+ (CnmeshCommonFlow<id> *)asCommonFlow:(id<CnmeshFlow>)receiver __attribute__((swift_name("asCommonFlow(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineScopeKt_")))
@interface CnmeshCoroutineScopeKt_ : CnmeshBase
+ (CnmeshKotlinUnit * _Nullable)cancelChildren:(id<CnmeshCoroutineScope>)receiver __attribute__((swift_name("cancelChildren(_:)")));
+ (id<CnmeshCoroutineScope>)childScope:(id<CnmeshCoroutineScope>)receiver __attribute__((swift_name("childScope(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FirmwareKt")))
@interface CnmeshFirmwareKt : CnmeshBase
+ (CnmeshKotlinByteArray *)toOtaArray:(NSData *)receiver __attribute__((swift_name("toOtaArray(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinKt")))
@interface CnmeshKoinKt : CnmeshBase
+ (CnmeshModule *)commonModuleMeshData:(CnmeshMeshData * _Nullable)meshData __attribute__((swift_name("commonModule(meshData:)")));
+ (CnmeshKoinApplication *)doInitKoinMeshData:(CnmeshMeshData * _Nullable)meshData appDeclaration:(void (^)(CnmeshKoinApplication *))appDeclaration __attribute__((swift_name("doInitKoin(meshData:appDeclaration:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ActualKt")))
@interface CnmeshActualKt : CnmeshBase
+ (CnmeshModule *)platformModule __attribute__((swift_name("platformModule()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshDeviceScannerImplKt")))
@interface CnmeshMeshDeviceScannerImplKt : CnmeshBase
+ (NSString *)hexToAsciiHexStr:(NSString *)hexStr __attribute__((swift_name("hexToAscii(hexStr:)")));
+ (NSString * _Nullable)extractMacAddressForGateway:(NSString *)receiver __attribute__((swift_name("extractMacAddressForGateway(_:)")));
+ (int32_t)getChipType:(NSString * _Nullable)receiver __attribute__((swift_name("getChipType(_:)")));
+ (int32_t)getCompanyIdentifier:(NSString * _Nullable)receiver __attribute__((swift_name("getCompanyIdentifier(_:)")));
+ (NSString *)getFirmwareVersion:(NSString * _Nullable)receiver __attribute__((swift_name("getFirmwareVersion(_:)")));
+ (NSString *)getMacAddress:(NSString *)receiver __attribute__((swift_name("getMacAddress(_:)")));
+ (int32_t)getMeshAddress:(NSString * _Nullable)receiver __attribute__((swift_name("getMeshAddress(_:)")));
+ (int32_t)getProductId:(NSString * _Nullable)receiver __attribute__((swift_name("getProductId(_:)")));
+ (int32_t)getRelayCounter:(NSString * _Nullable)receiver __attribute__((swift_name("getRelayCounter(_:)")));
+ (int32_t)getStatus:(NSString * _Nullable)receiver __attribute__((swift_name("getStatus(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PreferenceKt")))
@interface CnmeshPreferenceKt : CnmeshBase
+ (NSArray<CnmeshMeshDevice *> *)toMeshDeviceList:(NSArray<CnmeshPreferenceDevice *> *)receiver __attribute__((swift_name("toMeshDeviceList(_:)")));
+ (NSArray<CnmeshMeshGroup *> *)toMeshGroupList:(NSArray<CnmeshPreferenceGroup *> *)receiver __attribute__((swift_name("toMeshGroupList(_:)")));
+ (NSArray<CnmeshPreferenceDevice *> *)toPreferenceDeviceList:(NSArray<CnmeshMeshDevice *> *)receiver __attribute__((swift_name("toPreferenceDeviceList(_:)")));
+ (NSArray<CnmeshPreferenceGroup *> *)toPreferenceGroupList:(NSArray<CnmeshMeshGroup *> *)receiver __attribute__((swift_name("toPreferenceGroupList(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LoggerKt_")))
@interface CnmeshLoggerKt_ : CnmeshBase
+ (void)printLogDClassName:(NSString * _Nullable)className message:(NSString *)message __attribute__((swift_name("printLogD(className:message:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshDeviceKt")))
@interface CnmeshMeshDeviceKt : CnmeshBase
@property (class, readonly) int32_t OFF __attribute__((swift_name("OFF")));
@property (class, readonly) int32_t OFFLINE __attribute__((swift_name("OFFLINE")));
@property (class, readonly) int32_t ON __attribute__((swift_name("ON")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeshDeviceAdvertisementKt")))
@interface CnmeshMeshDeviceAdvertisementKt : CnmeshBase
+ (NSArray<CnmeshMeshDevice *> *)toMeshDeviceList:(NSArray<CnmeshMeshDeviceAdvertisement *> *)receiver __attribute__((swift_name("toMeshDeviceList(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProfileKt")))
@interface CnmeshProfileKt : CnmeshBase
+ (BOOL)broadcast:(int32_t)receiver __attribute__((swift_name("broadcast(_:)")));
+ (BOOL)extendedProperties:(int32_t)receiver __attribute__((swift_name("extendedProperties(_:)")));
+ (BOOL)indicate:(int32_t)receiver __attribute__((swift_name("indicate(_:)")));
+ (BOOL)notify:(int32_t)receiver __attribute__((swift_name("notify(_:)")));
+ (BOOL)read:(int32_t)receiver __attribute__((swift_name("read(_:)")));
+ (BOOL)signedWrite:(int32_t)receiver __attribute__((swift_name("signedWrite(_:)")));
+ (BOOL)write:(int32_t)receiver __attribute__((swift_name("write(_:)")));
+ (BOOL)writeWithoutResponse:(int32_t)receiver __attribute__((swift_name("writeWithoutResponse(_:)")));
+ (id<CnmeshCharacteristic>)characteristicOfService:(NSString *)service characteristic:(NSString *)characteristic __attribute__((swift_name("characteristicOf(service:characteristic:)")));
+ (id<CnmeshDescriptor>)descriptorOfService:(NSString *)service characteristic:(NSString *)characteristic descriptor:(NSString *)descriptor __attribute__((swift_name("descriptorOf(service:characteristic:descriptor:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IdentifierKt")))
@interface CnmeshIdentifierKt : CnmeshBase
+ (CnmeshUuid *)identifier:(id<CnmeshPeripheral>)receiver __attribute__((swift_name("identifier(_:)")));
+ (CnmeshUuid *)toIdentifier:(NSString *)receiver __attribute__((swift_name("toIdentifier(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ScannerKt")))
@interface CnmeshScannerKt : CnmeshBase
+ (id<CnmeshScanner>)ScannerBuilderAction:(void (^)(CnmeshScannerBuilder *))builderAction __attribute__((swift_name("Scanner(builderAction:)")));
+ (id<CnmeshScanner>)ScannerServices:(NSArray<CnmeshUuid *> * _Nullable)services __attribute__((swift_name("Scanner(services:)"))) __attribute__((unavailable("Replaced with ScannerBuilder DSL")));
+ (id<CnmeshScanner>)ScannerFilters:(NSArray<CnmeshFilter *> * _Nullable)filters __attribute__((swift_name("Scanner(filters:)"))) __attribute__((unavailable("Replaced with ScannerBuilder DSL")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PeripheralKt")))
@interface CnmeshPeripheralKt : CnmeshBase
+ (id<CnmeshPeripheral>)peripheral:(id<CnmeshCoroutineScope>)receiver advertisement:(CnmeshAdvertisement *)advertisement builderAction:(void (^)(CnmeshPeripheralBuilder *))builderAction __attribute__((swift_name("peripheral(_:advertisement:builderAction:)")));
+ (id<CnmeshPeripheral>)peripheral:(id<CnmeshCoroutineScope>)receiver identifier:(CnmeshUuid *)identifier builderAction:(void (^)(CnmeshPeripheralBuilder *))builderAction __attribute__((swift_name("peripheral(_:identifier:builderAction:)")));
+ (id<CnmeshPeripheral>)peripheral:(id<CnmeshCoroutineScope>)receiver cbPeripheral:(CBPeripheral *)cbPeripheral builderAction:(void (^)(CnmeshPeripheralBuilder *))builderAction __attribute__((swift_name("peripheral(_:cbPeripheral:builderAction:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HexKt")))
@interface CnmeshHexKt : CnmeshBase
+ (id<CnmeshLogging_DataProcessor>)HexInit:(void (^)(CnmeshHexBuilder *))init __attribute__((swift_name("Hex(init:)")));
@property (class, readonly) id<CnmeshLogging_DataProcessor> Hex __attribute__((swift_name("Hex")));
@end;

__attribute__((swift_name("Ktor_httpHeaderValueWithParameters")))
@interface CnmeshKtor_httpHeaderValueWithParameters : CnmeshBase
- (instancetype)initWithContent:(NSString *)content parameters:(NSArray<CnmeshKtor_httpHeaderValueParam *> *)parameters __attribute__((swift_name("init(content:parameters:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshKtor_httpHeaderValueWithParametersCompanion *companion __attribute__((swift_name("companion")));
- (NSString * _Nullable)parameterName:(NSString *)name __attribute__((swift_name("parameter(name:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *content __attribute__((swift_name("content")));
@property (readonly) NSArray<CnmeshKtor_httpHeaderValueParam *> *parameters __attribute__((swift_name("parameters")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpContentType")))
@interface CnmeshKtor_httpContentType : CnmeshKtor_httpHeaderValueWithParameters
- (instancetype)initWithContentType:(NSString *)contentType contentSubtype:(NSString *)contentSubtype parameters:(NSArray<CnmeshKtor_httpHeaderValueParam *> *)parameters __attribute__((swift_name("init(contentType:contentSubtype:parameters:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithContent:(NSString *)content parameters:(NSArray<CnmeshKtor_httpHeaderValueParam *> *)parameters __attribute__((swift_name("init(content:parameters:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) CnmeshKtor_httpContentTypeCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)matchPattern:(CnmeshKtor_httpContentType *)pattern __attribute__((swift_name("match(pattern:)")));
- (BOOL)matchPattern_:(NSString *)pattern __attribute__((swift_name("match(pattern_:)")));
- (CnmeshKtor_httpContentType *)withParameterName:(NSString *)name value:(NSString *)value __attribute__((swift_name("withParameter(name:value:)")));
- (CnmeshKtor_httpContentType *)withoutParameters __attribute__((swift_name("withoutParameters()")));
@property (readonly) NSString *contentSubtype __attribute__((swift_name("contentSubtype")));
@property (readonly) NSString *contentType __attribute__((swift_name("contentType")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsAttributeKey")))
@interface CnmeshKtor_utilsAttributeKey<T> : CnmeshBase
- (instancetype)initWithName:(NSString *)name __attribute__((swift_name("init(name:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsTypeInfo")))
@interface CnmeshKtor_utilsTypeInfo : CnmeshBase
- (instancetype)initWithType:(id<CnmeshKotlinKClass>)type reifiedType:(id<CnmeshKotlinKType>)reifiedType kotlinType:(id<CnmeshKotlinKType> _Nullable)kotlinType __attribute__((swift_name("init(type:reifiedType:kotlinType:)"))) __attribute__((objc_designated_initializer));
- (id<CnmeshKotlinKClass>)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (id<CnmeshKotlinKType>)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (id<CnmeshKotlinKType> _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKtor_utilsTypeInfo *)doCopyType:(id<CnmeshKotlinKClass>)type reifiedType:(id<CnmeshKotlinKType>)reifiedType kotlinType:(id<CnmeshKotlinKType> _Nullable)kotlinType __attribute__((swift_name("doCopy(type:reifiedType:kotlinType:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<CnmeshKotlinKType> _Nullable kotlinType __attribute__((swift_name("kotlinType")));
@property (readonly) id<CnmeshKotlinKType> reifiedType __attribute__((swift_name("reifiedType")));
@property (readonly) id<CnmeshKotlinKClass> type __attribute__((swift_name("type")));
@end;

__attribute__((swift_name("Ktor_ioInput")))
@interface CnmeshKtor_ioInput : CnmeshBase <CnmeshKtor_ioCloseable>
- (instancetype)initWithHead:(CnmeshKtor_ioChunkBuffer *)head remaining:(int64_t)remaining pool:(id<CnmeshKtor_ioObjectPool>)pool __attribute__((swift_name("init(head:remaining:pool:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshKtor_ioInputCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)canRead __attribute__((swift_name("canRead()")));
- (void)close __attribute__((swift_name("close()")));
- (void)closeSource __attribute__((swift_name("closeSource()")));
- (int32_t)discardN:(int32_t)n __attribute__((swift_name("discard(n:)")));
- (int64_t)discardN_:(int64_t)n __attribute__((swift_name("discard(n_:)")));
- (void)discardExactN:(int32_t)n __attribute__((swift_name("discardExact(n:)")));
- (CnmeshKtor_ioChunkBuffer * _Nullable)fill __attribute__((swift_name("fill()")));
- (int32_t)fillDestination:(CnmeshKtor_ioMemory *)destination offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("fill(destination:offset:length:)")));
- (BOOL)hasBytesN:(int32_t)n __attribute__((swift_name("hasBytes(n:)")));
- (void)markNoMoreChunksAvailable __attribute__((swift_name("markNoMoreChunksAvailable()")));
- (int64_t)peekToDestination:(CnmeshKtor_ioMemory *)destination destinationOffset:(int64_t)destinationOffset offset:(int64_t)offset min:(int64_t)min max:(int64_t)max __attribute__((swift_name("peekTo(destination:destinationOffset:offset:min:max:)")));
- (int32_t)peekToBuffer:(CnmeshKtor_ioChunkBuffer *)buffer __attribute__((swift_name("peekTo(buffer:)")));
- (int8_t)readByte __attribute__((swift_name("readByte()")));
- (NSString *)readTextMin:(int32_t)min max:(int32_t)max __attribute__((swift_name("readText(min:max:)")));
- (int32_t)readTextOut:(id<CnmeshKotlinAppendable>)out min:(int32_t)min max:(int32_t)max __attribute__((swift_name("readText(out:min:max:)")));
- (NSString *)readTextExactExactCharacters:(int32_t)exactCharacters __attribute__((swift_name("readTextExact(exactCharacters:)")));
- (void)readTextExactOut:(id<CnmeshKotlinAppendable>)out exactCharacters:(int32_t)exactCharacters __attribute__((swift_name("readTextExact(out:exactCharacters:)")));
- (void)release_ __attribute__((swift_name("release()")));
- (int32_t)tryPeek __attribute__((swift_name("tryPeek()")));
@property (readonly) BOOL endOfInput __attribute__((swift_name("endOfInput")));
@property (readonly) id<CnmeshKtor_ioObjectPool> pool __attribute__((swift_name("pool")));
@property (readonly) int64_t remaining __attribute__((swift_name("remaining")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinEnumCompanion")))
@interface CnmeshKotlinEnumCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKotlinEnumCompanion *shared __attribute__((swift_name("shared")));
@end;

__attribute__((swift_name("Ktor_serializationContentConverter")))
@protocol CnmeshKtor_serializationContentConverter
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)deserializeCharset:(CnmeshKtor_ioCharset *)charset typeInfo:(CnmeshKtor_utilsTypeInfo *)typeInfo content:(id<CnmeshKtor_ioByteReadChannel>)content completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("deserialize(charset:typeInfo:content:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)serializeContentType:(CnmeshKtor_httpContentType *)contentType charset:(CnmeshKtor_ioCharset *)charset typeInfo:(CnmeshKtor_utilsTypeInfo *)typeInfo value:(id)value completionHandler:(void (^)(CnmeshKtor_httpOutgoingContent * _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("serialize(contentType:charset:typeInfo:value:completionHandler:)")));
@end;

__attribute__((swift_name("Ktor_utilsAttributes")))
@protocol CnmeshKtor_utilsAttributes
@required
- (id)computeIfAbsentKey:(CnmeshKtor_utilsAttributeKey<id> *)key block:(id (^)(void))block __attribute__((swift_name("computeIfAbsent(key:block:)")));
- (BOOL)containsKey:(CnmeshKtor_utilsAttributeKey<id> *)key __attribute__((swift_name("contains(key:)")));
- (id)getKey_:(CnmeshKtor_utilsAttributeKey<id> *)key __attribute__((swift_name("get(key_:)")));
- (id _Nullable)getOrNullKey:(CnmeshKtor_utilsAttributeKey<id> *)key __attribute__((swift_name("getOrNull(key:)")));
- (void)putKey:(CnmeshKtor_utilsAttributeKey<id> *)key value:(id)value __attribute__((swift_name("put(key:value:)")));
- (void)removeKey:(CnmeshKtor_utilsAttributeKey<id> *)key __attribute__((swift_name("remove(key:)")));
- (id)takeKey:(CnmeshKtor_utilsAttributeKey<id> *)key __attribute__((swift_name("take(key:)")));
- (id _Nullable)takeOrNullKey:(CnmeshKtor_utilsAttributeKey<id> *)key __attribute__((swift_name("takeOrNull(key:)")));
@property (readonly) NSArray<CnmeshKtor_utilsAttributeKey<id> *> *allKeys __attribute__((swift_name("allKeys")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_eventsEvents")))
@interface CnmeshKtor_eventsEvents : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)raiseDefinition:(CnmeshKtor_eventsEventDefinition<id> *)definition value:(id _Nullable)value __attribute__((swift_name("raise(definition:value:)")));
- (id<CnmeshDisposableHandle>)subscribeDefinition:(CnmeshKtor_eventsEventDefinition<id> *)definition handler:(void (^)(id _Nullable))handler __attribute__((swift_name("subscribe(definition:handler:)")));
- (void)unsubscribeDefinition:(CnmeshKtor_eventsEventDefinition<id> *)definition handler:(void (^)(id _Nullable))handler __attribute__((swift_name("unsubscribe(definition:handler:)")));
@end;

__attribute__((swift_name("Ktor_ioByteReadChannel")))
@protocol CnmeshKtor_ioByteReadChannel
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitContentWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("awaitContent(completionHandler:)")));
- (BOOL)cancelCause_:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancel(cause_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)discardMax:(int64_t)max completionHandler:(void (^)(CnmeshLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("discard(max:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)peekToDestination:(CnmeshKtor_ioMemory *)destination destinationOffset:(int64_t)destinationOffset offset:(int64_t)offset min:(int64_t)min max:(int64_t)max completionHandler:(void (^)(CnmeshLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("peekTo(destination:destinationOffset:offset:min:max:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(CnmeshKtor_ioChunkBuffer *)dst completionHandler:(void (^)(CnmeshInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(CnmeshKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(CnmeshInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:offset:length:completionHandler:)")));
- (int32_t)readAvailableMin:(int32_t)min block:(void (^)(CnmeshKtor_ioBuffer *))block __attribute__((swift_name("readAvailable(min:block:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(void *)dst offset:(int32_t)offset length:(int32_t)length completionHandler_:(void (^)(CnmeshInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:offset:length:completionHandler_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(void *)dst offset:(int64_t)offset length:(int64_t)length completionHandler__:(void (^)(CnmeshInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:offset:length:completionHandler__:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readBooleanWithCompletionHandler:(void (^)(CnmeshBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readBoolean(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readByteWithCompletionHandler:(void (^)(CnmeshByte * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readByte(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readDoubleWithCompletionHandler:(void (^)(CnmeshDouble * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readDouble(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFloatWithCompletionHandler:(void (^)(CnmeshFloat * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFloat(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(CnmeshKtor_ioChunkBuffer *)dst n:(int32_t)n completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:n:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(CnmeshKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:offset:length:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(void *)dst offset:(int32_t)offset length:(int32_t)length completionHandler_:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:offset:length:completionHandler_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(void *)dst offset:(int64_t)offset length:(int64_t)length completionHandler__:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:offset:length:completionHandler__:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readIntWithCompletionHandler:(void (^)(CnmeshInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readInt(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readLongWithCompletionHandler:(void (^)(CnmeshLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readLong(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readPacketSize:(int32_t)size completionHandler:(void (^)(CnmeshKtor_ioByteReadPacket * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readPacket(size:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readRemainingLimit:(int64_t)limit completionHandler:(void (^)(CnmeshKtor_ioByteReadPacket * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readRemaining(limit:completionHandler:)")));
- (void)readSessionConsumer:(void (^)(id<CnmeshKtor_ioReadSession>))consumer __attribute__((swift_name("readSession(consumer:)"))) __attribute__((deprecated("Use read { } instead.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readShortWithCompletionHandler:(void (^)(CnmeshShort * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readShort(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readSuspendableSessionConsumer:(id<CnmeshKotlinSuspendFunction1>)consumer completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readSuspendableSession(consumer:completionHandler:)"))) __attribute__((deprecated("Use read { } instead.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readUTF8LineLimit:(int32_t)limit completionHandler:(void (^)(NSString * _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("readUTF8Line(limit:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readUTF8LineToOut:(id<CnmeshKotlinAppendable>)out limit:(int32_t)limit completionHandler:(void (^)(CnmeshBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readUTF8LineTo(out:limit:completionHandler:)")));
@property (readonly) int32_t availableForRead __attribute__((swift_name("availableForRead")));
@property (readonly) CnmeshKotlinThrowable * _Nullable closedCause __attribute__((swift_name("closedCause")));
@property (readonly) BOOL isClosedForRead __attribute__((swift_name("isClosedForRead")));
@property (readonly) BOOL isClosedForWrite __attribute__((swift_name("isClosedForWrite")));
@property (readonly) int64_t totalBytesRead __attribute__((swift_name("totalBytesRead")));
@end;

__attribute__((swift_name("KotlinKDeclarationContainer")))
@protocol CnmeshKotlinKDeclarationContainer
@required
@end;

__attribute__((swift_name("KotlinKAnnotatedElement")))
@protocol CnmeshKotlinKAnnotatedElement
@required
@end;

__attribute__((swift_name("KotlinKClassifier")))
@protocol CnmeshKotlinKClassifier
@required
@end;

__attribute__((swift_name("KotlinKClass")))
@protocol CnmeshKotlinKClass <CnmeshKotlinKDeclarationContainer, CnmeshKotlinKAnnotatedElement, CnmeshKotlinKClassifier>
@required
- (BOOL)isInstanceValue:(id _Nullable)value __attribute__((swift_name("isInstance(value:)")));
@property (readonly) NSString * _Nullable qualifiedName __attribute__((swift_name("qualifiedName")));
@property (readonly) NSString * _Nullable simpleName __attribute__((swift_name("simpleName")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpUrl")))
@interface CnmeshKtor_httpUrl : CnmeshBase
@property (class, readonly, getter=companion) CnmeshKtor_httpUrlCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *encodedFragment __attribute__((swift_name("encodedFragment")));
@property (readonly) NSString * _Nullable encodedPassword __attribute__((swift_name("encodedPassword")));
@property (readonly) NSString *encodedPath __attribute__((swift_name("encodedPath")));
@property (readonly) NSString *encodedPathAndQuery __attribute__((swift_name("encodedPathAndQuery")));
@property (readonly) NSString *encodedQuery __attribute__((swift_name("encodedQuery")));
@property (readonly) NSString * _Nullable encodedUser __attribute__((swift_name("encodedUser")));
@property (readonly) NSString *fragment __attribute__((swift_name("fragment")));
@property (readonly) NSString *host __attribute__((swift_name("host")));
@property (readonly) id<CnmeshKtor_httpParameters> parameters __attribute__((swift_name("parameters")));
@property (readonly) NSString * _Nullable password __attribute__((swift_name("password")));
@property (readonly) NSArray<NSString *> *pathSegments __attribute__((swift_name("pathSegments")));
@property (readonly) int32_t port __attribute__((swift_name("port")));
@property (readonly) CnmeshKtor_httpURLProtocol *protocol __attribute__((swift_name("protocol")));
@property (readonly) int32_t specifiedPort __attribute__((swift_name("specifiedPort")));
@property (readonly) BOOL trailingQuery __attribute__((swift_name("trailingQuery")));
@property (readonly) NSString * _Nullable user __attribute__((swift_name("user")));
@end;

__attribute__((swift_name("Ktor_utilsStringValues")))
@protocol CnmeshKtor_utilsStringValues
@required
- (BOOL)containsName:(NSString *)name __attribute__((swift_name("contains(name:)")));
- (BOOL)containsName:(NSString *)name value:(NSString *)value __attribute__((swift_name("contains(name:value:)")));
- (NSSet<id<CnmeshKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (void)forEachBody:(void (^)(NSString *, NSArray<NSString *> *))body __attribute__((swift_name("forEach(body:)")));
- (NSString * _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@end;

__attribute__((swift_name("Ktor_httpHeaders")))
@protocol CnmeshKtor_httpHeaders <CnmeshKtor_utilsStringValues>
@required
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHttpStatusCode")))
@interface CnmeshKtor_httpHttpStatusCode : CnmeshBase
- (instancetype)initWithValue:(int32_t)value description:(NSString *)description __attribute__((swift_name("init(value:description:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshKtor_httpHttpStatusCodeCompanion *companion __attribute__((swift_name("companion")));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString *)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKtor_httpHttpStatusCode *)doCopyValue:(int32_t)value description:(NSString *)description __attribute__((swift_name("doCopy(value:description:)")));
- (CnmeshKtor_httpHttpStatusCode *)descriptionValue:(NSString *)value __attribute__((swift_name("description(value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *description_ __attribute__((swift_name("description_")));
@property (readonly) int32_t value __attribute__((swift_name("value")));
@end;

__attribute__((swift_name("Ktor_ioByteWriteChannel")))
@protocol CnmeshKtor_ioByteWriteChannel
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitFreeSpaceWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("awaitFreeSpace(completionHandler:)")));
- (BOOL)closeCause:(CnmeshKotlinThrowable * _Nullable)cause __attribute__((swift_name("close(cause:)")));
- (void)flush __attribute__((swift_name("flush()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(CnmeshKtor_ioChunkBuffer *)src completionHandler:(void (^)(CnmeshInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(CnmeshKotlinByteArray *)src offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(CnmeshInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:offset:length:completionHandler:)")));
- (int32_t)writeAvailableMin:(int32_t)min block:(void (^)(CnmeshKtor_ioBuffer *))block __attribute__((swift_name("writeAvailable(min:block:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(void *)src offset:(int32_t)offset length:(int32_t)length completionHandler_:(void (^)(CnmeshInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:offset:length:completionHandler_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(void *)src offset:(int64_t)offset length:(int64_t)length completionHandler__:(void (^)(CnmeshInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:offset:length:completionHandler__:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeByteB:(int8_t)b completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeByte(b:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeDoubleD:(double)d completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeDouble(d:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFloatF:(float)f completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFloat(f:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullyMemory:(CnmeshKtor_ioMemory *)memory startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(memory:startIndex:endIndex:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(CnmeshKtor_ioBuffer *)src completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(CnmeshKotlinByteArray *)src offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:offset:length:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(void *)src offset:(int32_t)offset length:(int32_t)length completionHandler_:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:offset:length:completionHandler_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(void *)src offset:(int64_t)offset length:(int64_t)length completionHandler__:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:offset:length:completionHandler__:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeIntI:(int32_t)i completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeInt(i:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeLongL:(int64_t)l completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeLong(l:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writePacketPacket:(CnmeshKtor_ioByteReadPacket *)packet completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writePacket(packet:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeShortS:(int16_t)s completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeShort(s:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeSuspendSessionVisitor:(id<CnmeshKotlinSuspendFunction1>)visitor completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeSuspendSession(visitor:completionHandler:)"))) __attribute__((deprecated("Use write { } instead.")));
@property (readonly) BOOL autoFlush __attribute__((swift_name("autoFlush")));
@property (readonly) int32_t availableForWrite __attribute__((swift_name("availableForWrite")));
@property (readonly) CnmeshKotlinThrowable * _Nullable closedCause __attribute__((swift_name("closedCause")));
@property (readonly) BOOL isClosedForWrite __attribute__((swift_name("isClosedForWrite")));
@property (readonly) int64_t totalBytesWritten __attribute__((swift_name("totalBytesWritten")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHttpMethod")))
@interface CnmeshKtor_httpHttpMethod : CnmeshBase
- (instancetype)initWithValue:(NSString *)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshKtor_httpHttpMethodCompanion *companion __attribute__((swift_name("companion")));
- (NSString *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKtor_httpHttpMethod *)doCopyValue:(NSString *)value __attribute__((swift_name("doCopy(value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((swift_name("Ktor_utilsStringValuesBuilder")))
@protocol CnmeshKtor_utilsStringValuesBuilder
@required
- (void)appendName:(NSString *)name value:(NSString *)value __attribute__((swift_name("append(name:value:)")));
- (void)appendAllStringValues:(id<CnmeshKtor_utilsStringValues>)stringValues __attribute__((swift_name("appendAll(stringValues:)")));
- (void)appendAllName:(NSString *)name values:(id)values __attribute__((swift_name("appendAll(name:values:)")));
- (void)appendMissingStringValues:(id<CnmeshKtor_utilsStringValues>)stringValues __attribute__((swift_name("appendMissing(stringValues:)")));
- (void)appendMissingName:(NSString *)name values:(id)values __attribute__((swift_name("appendMissing(name:values:)")));
- (id<CnmeshKtor_utilsStringValues>)build __attribute__((swift_name("build()")));
- (void)clear __attribute__((swift_name("clear()")));
- (BOOL)containsName:(NSString *)name __attribute__((swift_name("contains(name:)")));
- (BOOL)containsName:(NSString *)name value:(NSString *)value __attribute__((swift_name("contains(name:value:)")));
- (NSSet<id<CnmeshKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (NSString * _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
- (void)removeName:(NSString *)name __attribute__((swift_name("remove(name:)")));
- (BOOL)removeName:(NSString *)name value:(NSString *)value __attribute__((swift_name("remove(name:value:)")));
- (void)removeKeysWithNoEntries __attribute__((swift_name("removeKeysWithNoEntries()")));
- (void)setName:(NSString *)name value:(NSString *)value __attribute__((swift_name("set(name:value:)")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@end;

__attribute__((swift_name("Ktor_utilsStringValuesBuilderImpl")))
@interface CnmeshKtor_utilsStringValuesBuilderImpl : CnmeshBase <CnmeshKtor_utilsStringValuesBuilder>
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName size:(int32_t)size __attribute__((swift_name("init(caseInsensitiveName:size:)"))) __attribute__((objc_designated_initializer));
- (void)appendName:(NSString *)name value:(NSString *)value __attribute__((swift_name("append(name:value:)")));
- (void)appendAllStringValues:(id<CnmeshKtor_utilsStringValues>)stringValues __attribute__((swift_name("appendAll(stringValues:)")));
- (void)appendAllName:(NSString *)name values:(id)values __attribute__((swift_name("appendAll(name:values:)")));
- (void)appendMissingStringValues:(id<CnmeshKtor_utilsStringValues>)stringValues __attribute__((swift_name("appendMissing(stringValues:)")));
- (void)appendMissingName:(NSString *)name values:(id)values __attribute__((swift_name("appendMissing(name:values:)")));
- (id<CnmeshKtor_utilsStringValues>)build __attribute__((swift_name("build()")));
- (void)clear __attribute__((swift_name("clear()")));
- (BOOL)containsName:(NSString *)name __attribute__((swift_name("contains(name:)")));
- (BOOL)containsName:(NSString *)name value:(NSString *)value __attribute__((swift_name("contains(name:value:)")));
- (NSSet<id<CnmeshKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (NSString * _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
- (void)removeName:(NSString *)name __attribute__((swift_name("remove(name:)")));
- (BOOL)removeName:(NSString *)name value:(NSString *)value __attribute__((swift_name("remove(name:value:)")));
- (void)removeKeysWithNoEntries __attribute__((swift_name("removeKeysWithNoEntries()")));
- (void)setName:(NSString *)name value:(NSString *)value __attribute__((swift_name("set(name:value:)")));
- (void)validateNameName:(NSString *)name __attribute__((swift_name("validateName(name:)")));
- (void)validateValueValue:(NSString *)value __attribute__((swift_name("validateValue(value:)")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@property (readonly) CnmeshMutableDictionary<NSString *, NSMutableArray<NSString *> *> *values __attribute__((swift_name("values")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHeadersBuilder")))
@interface CnmeshKtor_httpHeadersBuilder : CnmeshKtor_utilsStringValuesBuilderImpl
- (instancetype)initWithSize:(int32_t)size __attribute__((swift_name("init(size:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName size:(int32_t)size __attribute__((swift_name("init(caseInsensitiveName:size:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (id<CnmeshKtor_httpHeaders>)build __attribute__((swift_name("build()")));
- (void)validateNameName:(NSString *)name __attribute__((swift_name("validateName(name:)")));
- (void)validateValueValue:(NSString *)value __attribute__((swift_name("validateValue(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpURLBuilder")))
@interface CnmeshKtor_httpURLBuilder : CnmeshBase
- (instancetype)initWithProtocol:(CnmeshKtor_httpURLProtocol *)protocol host:(NSString *)host port:(int32_t)port user:(NSString * _Nullable)user password:(NSString * _Nullable)password pathSegments:(NSArray<NSString *> *)pathSegments parameters:(id<CnmeshKtor_httpParameters>)parameters fragment:(NSString *)fragment trailingQuery:(BOOL)trailingQuery __attribute__((swift_name("init(protocol:host:port:user:password:pathSegments:parameters:fragment:trailingQuery:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshKtor_httpURLBuilderCompanion *companion __attribute__((swift_name("companion")));
- (CnmeshKtor_httpUrl *)build __attribute__((swift_name("build()")));
- (NSString *)buildString __attribute__((swift_name("buildString()")));
@property NSString *encodedFragment __attribute__((swift_name("encodedFragment")));
@property id<CnmeshKtor_httpParametersBuilder> encodedParameters __attribute__((swift_name("encodedParameters")));
@property NSString * _Nullable encodedPassword __attribute__((swift_name("encodedPassword")));
@property NSArray<NSString *> *encodedPathSegments __attribute__((swift_name("encodedPathSegments")));
@property NSString * _Nullable encodedUser __attribute__((swift_name("encodedUser")));
@property NSString *fragment __attribute__((swift_name("fragment")));
@property NSString *host __attribute__((swift_name("host")));
@property (readonly) id<CnmeshKtor_httpParametersBuilder> parameters __attribute__((swift_name("parameters")));
@property NSString * _Nullable password __attribute__((swift_name("password")));
@property NSArray<NSString *> *pathSegments __attribute__((swift_name("pathSegments")));
@property int32_t port __attribute__((swift_name("port")));
@property CnmeshKtor_httpURLProtocol *protocol __attribute__((swift_name("protocol")));
@property BOOL trailingQuery __attribute__((swift_name("trailingQuery")));
@property NSString * _Nullable user __attribute__((swift_name("user")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsPipelinePhase")))
@interface CnmeshKtor_utilsPipelinePhase : CnmeshBase
- (instancetype)initWithName:(NSString *)name __attribute__((swift_name("init(name:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@end;

__attribute__((swift_name("KotlinFunction")))
@protocol CnmeshKotlinFunction
@required
@end;

__attribute__((swift_name("KotlinSuspendFunction2")))
@protocol CnmeshKotlinSuspendFunction2 <CnmeshKotlinFunction>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 p2:(id _Nullable)p2 completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:p2:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsGMTDate")))
@interface CnmeshKtor_utilsGMTDate : CnmeshBase <CnmeshKotlinComparable>
@property (class, readonly, getter=companion) CnmeshKtor_utilsGMTDateCompanion *companion __attribute__((swift_name("companion")));
- (int32_t)compareToOther:(CnmeshKtor_utilsGMTDate *)other __attribute__((swift_name("compareTo(other:)")));
- (int32_t)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKtor_utilsWeekDay *)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKtor_utilsMonth *)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component8 __attribute__((swift_name("component8()"))) __attribute__((deprecated("use corresponding property instead")));
- (int64_t)component9 __attribute__((swift_name("component9()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKtor_utilsGMTDate *)doCopySeconds:(int32_t)seconds minutes:(int32_t)minutes hours:(int32_t)hours dayOfWeek:(CnmeshKtor_utilsWeekDay *)dayOfWeek dayOfMonth:(int32_t)dayOfMonth dayOfYear:(int32_t)dayOfYear month:(CnmeshKtor_utilsMonth *)month year:(int32_t)year timestamp:(int64_t)timestamp __attribute__((swift_name("doCopy(seconds:minutes:hours:dayOfWeek:dayOfMonth:dayOfYear:month:year:timestamp:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t dayOfMonth __attribute__((swift_name("dayOfMonth")));
@property (readonly) CnmeshKtor_utilsWeekDay *dayOfWeek __attribute__((swift_name("dayOfWeek")));
@property (readonly) int32_t dayOfYear __attribute__((swift_name("dayOfYear")));
@property (readonly) int32_t hours __attribute__((swift_name("hours")));
@property (readonly) int32_t minutes __attribute__((swift_name("minutes")));
@property (readonly) CnmeshKtor_utilsMonth *month __attribute__((swift_name("month")));
@property (readonly) int32_t seconds __attribute__((swift_name("seconds")));
@property (readonly) int64_t timestamp __attribute__((swift_name("timestamp")));
@property (readonly) int32_t year __attribute__((swift_name("year")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHttpProtocolVersion")))
@interface CnmeshKtor_httpHttpProtocolVersion : CnmeshBase
- (instancetype)initWithName:(NSString *)name major:(int32_t)major minor:(int32_t)minor __attribute__((swift_name("init(name:major:minor:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshKtor_httpHttpProtocolVersionCompanion *companion __attribute__((swift_name("companion")));
- (NSString *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKtor_httpHttpProtocolVersion *)doCopyName:(NSString *)name major:(int32_t)major minor:(int32_t)minor __attribute__((swift_name("doCopy(name:major:minor:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t major __attribute__((swift_name("major")));
@property (readonly) int32_t minor __attribute__((swift_name("minor")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_ioByteReadPacket")))
@interface CnmeshKtor_ioByteReadPacket : CnmeshKtor_ioInput
- (instancetype)initWithHead:(CnmeshKtor_ioChunkBuffer *)head pool:(id<CnmeshKtor_ioObjectPool>)pool __attribute__((swift_name("init(head:pool:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithHead:(CnmeshKtor_ioChunkBuffer *)head remaining:(int64_t)remaining pool:(id<CnmeshKtor_ioObjectPool>)pool __attribute__((swift_name("init(head:remaining:pool:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) CnmeshKtor_ioByteReadPacketCompanion *companion __attribute__((swift_name("companion")));
- (void)closeSource __attribute__((swift_name("closeSource()")));
- (CnmeshKtor_ioByteReadPacket *)doCopy __attribute__((swift_name("doCopy()")));
- (CnmeshKtor_ioChunkBuffer * _Nullable)fill __attribute__((swift_name("fill()")));
- (int32_t)fillDestination:(CnmeshKtor_ioMemory *)destination offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("fill(destination:offset:length:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((swift_name("Ktor_httpParameters")))
@protocol CnmeshKtor_httpParameters <CnmeshKtor_utilsStringValues>
@required
@end;

__attribute__((swift_name("Ktor_httpPartData")))
@interface CnmeshKtor_httpPartData : CnmeshBase
@property (readonly) CnmeshKtor_httpContentDisposition * _Nullable contentDisposition __attribute__((swift_name("contentDisposition")));
@property (readonly) CnmeshKtor_httpContentType * _Nullable contentType __attribute__((swift_name("contentType")));
@property (readonly, getter=dispose_) void (^dispose)(void) __attribute__((swift_name("dispose")));
@property (readonly) id<CnmeshKtor_httpHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@property (readonly) id<CnmeshKtor_httpHeaders> partHeaders __attribute__((swift_name("partHeaders"))) __attribute__((unavailable("Use headers property instead")));
@property (readonly) NSString * _Nullable partName __attribute__((swift_name("partName"))) __attribute__((unavailable("Use name property instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinUnit")))
@interface CnmeshKotlinUnit : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)unit __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKotlinUnit *shared __attribute__((swift_name("shared")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((swift_name("KotlinSuspendFunction1")))
@protocol CnmeshKotlinSuspendFunction1 <CnmeshKotlinFunction>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:completionHandler:)")));
@end;

__attribute__((swift_name("Ktor_utilsConversionService")))
@protocol CnmeshKtor_utilsConversionService
@required
- (id _Nullable)fromValuesValues:(NSArray<NSString *> *)values type:(CnmeshKtor_utilsTypeInfo *)type __attribute__((swift_name("fromValues(values:type:)")));
- (NSArray<NSString *> *)toValuesValue:(id _Nullable)value __attribute__((swift_name("toValues(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsDataConversion")))
@interface CnmeshKtor_utilsDataConversion : CnmeshBase <CnmeshKtor_utilsConversionService>
- (instancetype)initWithConfiguration:(CnmeshKtor_utilsDataConversionConfiguration *)configuration __attribute__((swift_name("init(configuration:)"))) __attribute__((objc_designated_initializer));
- (id _Nullable)fromValuesValues:(NSArray<NSString *> *)values type:(CnmeshKtor_utilsTypeInfo *)type __attribute__((swift_name("fromValues(values:type:)")));
- (NSArray<NSString *> *)toValuesValue:(id _Nullable)value __attribute__((swift_name("toValues(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsDataConversion.Configuration")))
@interface CnmeshKtor_utilsDataConversionConfiguration : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)convertConfigure:(void (^)(CnmeshKtor_utilsDelegatingConversionServiceConfiguration<id> *))configure __attribute__((swift_name("convert(configure:)")));
- (void)convertType:(id<CnmeshKotlinKClass>)type convertor:(id<CnmeshKtor_utilsConversionService>)convertor __attribute__((swift_name("convert(type:convertor:)")));
- (void)convertType:(id<CnmeshKotlinKType>)type configure:(void (^)(CnmeshKtor_utilsDelegatingConversionServiceConfiguration<id> *))configure __attribute__((swift_name("convert(type:configure:)")));
@end;

__attribute__((swift_name("Ktor_ioCharset")))
@interface CnmeshKtor_ioCharset : CnmeshBase
- (instancetype)initWith_name:(NSString *)_name __attribute__((swift_name("init(_name:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshKtor_ioCharsetCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (CnmeshKtor_ioCharsetDecoder *)doNewDecoder __attribute__((swift_name("doNewDecoder()")));
- (CnmeshKtor_ioCharsetEncoder *)doNewEncoder __attribute__((swift_name("doNewEncoder()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((swift_name("Ktor_eventsEventDefinition")))
@interface CnmeshKtor_eventsEventDefinition<T> : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end;

__attribute__((swift_name("KotlinSuspendFunction3")))
@protocol CnmeshKotlinSuspendFunction3 <CnmeshKotlinFunction>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 p2:(id _Nullable)p2 p3:(id _Nullable)p3 completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:p2:p3:completionHandler:)")));
@end;

__attribute__((swift_name("Ktor_websocketsFrame")))
@interface CnmeshKtor_websocketsFrame : CnmeshBase
@property (class, readonly, getter=companion) CnmeshKtor_websocketsFrameCompanion *companion __attribute__((swift_name("companion")));
- (CnmeshKtor_websocketsFrame *)doCopy __attribute__((swift_name("doCopy()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) CnmeshKotlinByteArray *data __attribute__((swift_name("data")));
@property (readonly) id<CnmeshDisposableHandle> disposableHandle __attribute__((swift_name("disposableHandle")));
@property (readonly) BOOL fin __attribute__((swift_name("fin")));
@property (readonly) CnmeshKtor_websocketsFrameType *frameType __attribute__((swift_name("frameType")));
@property (readonly) BOOL rsv1 __attribute__((swift_name("rsv1")));
@property (readonly) BOOL rsv2 __attribute__((swift_name("rsv2")));
@property (readonly) BOOL rsv3 __attribute__((swift_name("rsv3")));
@end;

__attribute__((swift_name("Ktor_websocketsWebSocketExtension")))
@protocol CnmeshKtor_websocketsWebSocketExtension
@required
- (BOOL)clientNegotiationNegotiatedProtocols:(NSArray<CnmeshKtor_websocketsWebSocketExtensionHeader *> *)negotiatedProtocols __attribute__((swift_name("clientNegotiation(negotiatedProtocols:)")));
- (CnmeshKtor_websocketsFrame *)processIncomingFrameFrame:(CnmeshKtor_websocketsFrame *)frame __attribute__((swift_name("processIncomingFrame(frame:)")));
- (CnmeshKtor_websocketsFrame *)processOutgoingFrameFrame:(CnmeshKtor_websocketsFrame *)frame __attribute__((swift_name("processOutgoingFrame(frame:)")));
- (NSArray<CnmeshKtor_websocketsWebSocketExtensionHeader *> *)serverNegotiationRequestedProtocols:(NSArray<CnmeshKtor_websocketsWebSocketExtensionHeader *> *)requestedProtocols __attribute__((swift_name("serverNegotiation(requestedProtocols:)")));
@property (readonly) id<CnmeshKtor_websocketsWebSocketExtensionFactory> factory __attribute__((swift_name("factory")));
@property (readonly) NSArray<CnmeshKtor_websocketsWebSocketExtensionHeader *> *protocols __attribute__((swift_name("protocols")));
@end;

__attribute__((swift_name("Ktor_serializationWebsocketContentConverter")))
@protocol CnmeshKtor_serializationWebsocketContentConverter
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)deserializeCharset:(CnmeshKtor_ioCharset *)charset typeInfo:(CnmeshKtor_utilsTypeInfo *)typeInfo content:(CnmeshKtor_websocketsFrame *)content completionHandler_:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("deserialize(charset:typeInfo:content:completionHandler_:)")));
- (BOOL)isApplicableFrame:(CnmeshKtor_websocketsFrame *)frame __attribute__((swift_name("isApplicable(frame:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)serializeCharset:(CnmeshKtor_ioCharset *)charset typeInfo:(CnmeshKtor_utilsTypeInfo *)typeInfo value:(id)value completionHandler:(void (^)(CnmeshKtor_websocketsFrame * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("serialize(charset:typeInfo:value:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_websocketsWebSocketExtensionsConfig")))
@interface CnmeshKtor_websocketsWebSocketExtensionsConfig : CnmeshBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSArray<id<CnmeshKtor_websocketsWebSocketExtension>> *)build __attribute__((swift_name("build()")));
- (void)installExtension:(id<CnmeshKtor_websocketsWebSocketExtensionFactory>)extension config:(void (^)(id))config __attribute__((swift_name("install(extension:config:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpCookie")))
@interface CnmeshKtor_httpCookie : CnmeshBase
- (instancetype)initWithName:(NSString *)name value:(NSString *)value encoding:(CnmeshKtor_httpCookieEncoding *)encoding maxAge:(int32_t)maxAge expires:(CnmeshKtor_utilsGMTDate * _Nullable)expires domain:(NSString * _Nullable)domain path:(NSString * _Nullable)path secure:(BOOL)secure httpOnly:(BOOL)httpOnly extensions:(NSDictionary<NSString *, id> *)extensions __attribute__((swift_name("init(name:value:encoding:maxAge:expires:domain:path:secure:httpOnly:extensions:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSDictionary<NSString *, id> *)component10 __attribute__((swift_name("component10()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString *)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKtor_httpCookieEncoding *)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKtor_utilsGMTDate * _Nullable)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component6 __attribute__((swift_name("component6()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString * _Nullable)component7 __attribute__((swift_name("component7()"))) __attribute__((deprecated("use corresponding property instead")));
- (BOOL)component8 __attribute__((swift_name("component8()"))) __attribute__((deprecated("use corresponding property instead")));
- (BOOL)component9 __attribute__((swift_name("component9()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKtor_httpCookie *)doCopyName:(NSString *)name value:(NSString *)value encoding:(CnmeshKtor_httpCookieEncoding *)encoding maxAge:(int32_t)maxAge expires:(CnmeshKtor_utilsGMTDate * _Nullable)expires domain:(NSString * _Nullable)domain path:(NSString * _Nullable)path secure:(BOOL)secure httpOnly:(BOOL)httpOnly extensions:(NSDictionary<NSString *, id> *)extensions __attribute__((swift_name("doCopy(name:value:encoding:maxAge:expires:domain:path:secure:httpOnly:extensions:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString * _Nullable domain __attribute__((swift_name("domain")));
@property (readonly) CnmeshKtor_httpCookieEncoding *encoding __attribute__((swift_name("encoding")));
@property (readonly) CnmeshKtor_utilsGMTDate * _Nullable expires __attribute__((swift_name("expires")));
@property (readonly) NSDictionary<NSString *, id> *extensions __attribute__((swift_name("extensions")));
@property (readonly) BOOL httpOnly __attribute__((swift_name("httpOnly")));
@property (readonly) int32_t maxAge __attribute__((swift_name("maxAge")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) NSString * _Nullable path __attribute__((swift_name("path")));
@property (readonly) BOOL secure __attribute__((swift_name("secure")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((swift_name("KotlinSequence")))
@protocol CnmeshKotlinSequence
@required
- (id<CnmeshKotlinIterator>)iterator __attribute__((swift_name("iterator()")));
@end;

__attribute__((swift_name("KotlinSuspendFunction0")))
@protocol CnmeshKotlinSuspendFunction0 <CnmeshKotlinFunction>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicfuSynchronizedObject.LockState")))
@interface CnmeshAtomicfuSynchronizedObjectLockState : CnmeshBase
- (instancetype)initWithStatus:(CnmeshAtomicfuSynchronizedObjectStatus *)status nestedLocks:(int32_t)nestedLocks waiters:(int32_t)waiters ownerThreadId:(void * _Nullable)ownerThreadId mutex:(void * _Nullable)mutex __attribute__((swift_name("init(status:nestedLocks:waiters:ownerThreadId:mutex:)"))) __attribute__((objc_designated_initializer));
@property (readonly) void * _Nullable mutex __attribute__((swift_name("mutex")));
@property (readonly) int32_t nestedLocks __attribute__((swift_name("nestedLocks")));
@property (readonly) void * _Nullable ownerThreadId __attribute__((swift_name("ownerThreadId")));
@property (readonly) CnmeshAtomicfuSynchronizedObjectStatus *status __attribute__((swift_name("status")));
@property (readonly) int32_t waiters __attribute__((swift_name("waiters")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinAtomicReference")))
@interface CnmeshKotlinAtomicReference<T> : CnmeshBase
- (instancetype)initWithValue:(T _Nullable)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer));
- (BOOL)compareAndSetExpected:(T _Nullable)expected new:(T _Nullable)new_ __attribute__((swift_name("compareAndSet(expected:new:)")));
- (T _Nullable)compareAndSwapExpected:(T _Nullable)expected new:(T _Nullable)new_ __attribute__((swift_name("compareAndSwap(expected:new:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property T _Nullable value __attribute__((swift_name("value")));
@end;

__attribute__((swift_name("Stately_isolateStateRunner")))
@protocol CnmeshStately_isolateStateRunner
@required
- (id _Nullable)stateRunBlock:(id _Nullable (^)(void))block __attribute__((swift_name("stateRun(block:)")));
- (void)stop __attribute__((swift_name("stop()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Stately_isolateStateHolder")))
@interface CnmeshStately_isolateStateHolder<__covariant T> : CnmeshBase
- (instancetype)initWithT:(T)t stateRunner:(id<CnmeshStately_isolateStateRunner>)stateRunner __attribute__((swift_name("init(t:stateRunner:)"))) __attribute__((objc_designated_initializer));
- (void)dispose __attribute__((swift_name("dispose()")));
@property (readonly) BOOL isDisposed __attribute__((swift_name("isDisposed")));
@property (readonly) T myState __attribute__((swift_name("myState")));
@property (readonly) BOOL myThread __attribute__((swift_name("myThread")));
@property (readonly) id<CnmeshStately_isolateStateRunner> stateRunner __attribute__((swift_name("stateRunner")));
@end;

__attribute__((swift_name("KotlinLazy")))
@protocol CnmeshKotlinLazy
@required
- (BOOL)isInitialized __attribute__((swift_name("isInitialized()")));
@property (readonly) id _Nullable value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLazyThreadSafetyMode")))
@interface CnmeshKotlinLazyThreadSafetyMode : CnmeshKotlinEnum<CnmeshKotlinLazyThreadSafetyMode *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) CnmeshKotlinLazyThreadSafetyMode *synchronized __attribute__((swift_name("synchronized")));
@property (class, readonly) CnmeshKotlinLazyThreadSafetyMode *publication __attribute__((swift_name("publication")));
@property (class, readonly) CnmeshKotlinLazyThreadSafetyMode *none __attribute__((swift_name("none")));
+ (CnmeshKotlinArray<CnmeshKotlinLazyThreadSafetyMode *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("Kotlinx_serialization_coreSerialDescriptor")))
@protocol CnmeshKotlinx_serialization_coreSerialDescriptor
@required
- (NSArray<id<CnmeshKotlinAnnotation>> *)getElementAnnotationsIndex:(int32_t)index __attribute__((swift_name("getElementAnnotations(index:)")));
- (id<CnmeshKotlinx_serialization_coreSerialDescriptor>)getElementDescriptorIndex:(int32_t)index __attribute__((swift_name("getElementDescriptor(index:)")));
- (int32_t)getElementIndexName:(NSString *)name __attribute__((swift_name("getElementIndex(name:)")));
- (NSString *)getElementNameIndex:(int32_t)index __attribute__((swift_name("getElementName(index:)")));
- (BOOL)isElementOptionalIndex:(int32_t)index __attribute__((swift_name("isElementOptional(index:)")));
@property (readonly) NSArray<id<CnmeshKotlinAnnotation>> *annotations __attribute__((swift_name("annotations")));
@property (readonly) int32_t elementsCount __attribute__((swift_name("elementsCount")));
@property (readonly) BOOL isInline __attribute__((swift_name("isInline")));
@property (readonly) BOOL isNullable __attribute__((swift_name("isNullable")));
@property (readonly) CnmeshKotlinx_serialization_coreSerialKind *kind __attribute__((swift_name("kind")));
@property (readonly) NSString *serialName __attribute__((swift_name("serialName")));
@end;

__attribute__((swift_name("Kotlinx_serialization_coreSerializersModule")))
@interface CnmeshKotlinx_serialization_coreSerializersModule : CnmeshBase
- (void)dumpToCollector:(id<CnmeshKotlinx_serialization_coreSerializersModuleCollector>)collector __attribute__((swift_name("dumpTo(collector:)")));
- (id<CnmeshKotlinx_serialization_coreKSerializer> _Nullable)getContextualKClass:(id<CnmeshKotlinKClass>)kClass typeArgumentsSerializers:(NSArray<id<CnmeshKotlinx_serialization_coreKSerializer>> *)typeArgumentsSerializers __attribute__((swift_name("getContextual(kClass:typeArgumentsSerializers:)")));
- (id<CnmeshKotlinx_serialization_coreSerializationStrategy> _Nullable)getPolymorphicBaseClass:(id<CnmeshKotlinKClass>)baseClass value:(id)value __attribute__((swift_name("getPolymorphic(baseClass:value:)")));
- (id<CnmeshKotlinx_serialization_coreDeserializationStrategy> _Nullable)getPolymorphicBaseClass:(id<CnmeshKotlinKClass>)baseClass serializedClassName:(NSString * _Nullable)serializedClassName __attribute__((swift_name("getPolymorphic(baseClass:serializedClassName:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinNothing")))
@interface CnmeshKotlinNothing : CnmeshBase
@end;

__attribute__((swift_name("Multiplatform_settingsSettings")))
@protocol CnmeshMultiplatform_settingsSettings
@required
- (void)clear __attribute__((swift_name("clear()")));
- (BOOL)getBooleanKey:(NSString *)key defaultValue:(BOOL)defaultValue __attribute__((swift_name("getBoolean(key:defaultValue:)")));
- (CnmeshBoolean * _Nullable)getBooleanOrNullKey:(NSString *)key __attribute__((swift_name("getBooleanOrNull(key:)")));
- (double)getDoubleKey:(NSString *)key defaultValue:(double)defaultValue __attribute__((swift_name("getDouble(key:defaultValue:)")));
- (CnmeshDouble * _Nullable)getDoubleOrNullKey:(NSString *)key __attribute__((swift_name("getDoubleOrNull(key:)")));
- (float)getFloatKey:(NSString *)key defaultValue:(float)defaultValue __attribute__((swift_name("getFloat(key:defaultValue:)")));
- (CnmeshFloat * _Nullable)getFloatOrNullKey:(NSString *)key __attribute__((swift_name("getFloatOrNull(key:)")));
- (int32_t)getIntKey:(NSString *)key defaultValue:(int32_t)defaultValue __attribute__((swift_name("getInt(key:defaultValue:)")));
- (CnmeshInt * _Nullable)getIntOrNullKey:(NSString *)key __attribute__((swift_name("getIntOrNull(key:)")));
- (int64_t)getLongKey:(NSString *)key defaultValue:(int64_t)defaultValue __attribute__((swift_name("getLong(key:defaultValue:)")));
- (CnmeshLong * _Nullable)getLongOrNullKey:(NSString *)key __attribute__((swift_name("getLongOrNull(key:)")));
- (NSString *)getStringKey:(NSString *)key defaultValue:(NSString *)defaultValue __attribute__((swift_name("getString(key:defaultValue:)")));
- (NSString * _Nullable)getStringOrNullKey:(NSString *)key __attribute__((swift_name("getStringOrNull(key:)")));
- (BOOL)hasKeyKey:(NSString *)key __attribute__((swift_name("hasKey(key:)")));
- (void)putBooleanKey:(NSString *)key value:(BOOL)value __attribute__((swift_name("putBoolean(key:value:)")));
- (void)putDoubleKey:(NSString *)key value:(double)value __attribute__((swift_name("putDouble(key:value:)")));
- (void)putFloatKey:(NSString *)key value:(float)value __attribute__((swift_name("putFloat(key:value:)")));
- (void)putIntKey:(NSString *)key value:(int32_t)value __attribute__((swift_name("putInt(key:value:)")));
- (void)putLongKey:(NSString *)key value:(int64_t)value __attribute__((swift_name("putLong(key:value:)")));
- (void)putStringKey:(NSString *)key value:(NSString *)value __attribute__((swift_name("putString(key:value:)")));
- (void)removeKey_:(NSString *)key __attribute__((swift_name("remove(key_:)")));
@property (readonly) NSSet<NSString *> *keys __attribute__((swift_name("keys")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("KotlinAppendable")))
@protocol CnmeshKotlinAppendable
@required
- (id<CnmeshKotlinAppendable>)appendValue:(unichar)value __attribute__((swift_name("append(value:)")));
- (id<CnmeshKotlinAppendable>)appendValue_:(id _Nullable)value __attribute__((swift_name("append(value_:)")));
- (id<CnmeshKotlinAppendable>)appendValue:(id _Nullable)value startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex __attribute__((swift_name("append(value:startIndex:endIndex:)")));
@end;

__attribute__((swift_name("Ktor_ioOutput")))
@interface CnmeshKtor_ioOutput : CnmeshBase <CnmeshKotlinAppendable, CnmeshKtor_ioCloseable>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithPool:(id<CnmeshKtor_ioObjectPool>)pool __attribute__((swift_name("init(pool:)"))) __attribute__((objc_designated_initializer));
- (CnmeshKtor_ioOutput *)appendValue:(unichar)value __attribute__((swift_name("append(value:)")));
- (id<CnmeshKotlinAppendable>)appendCsq:(CnmeshKotlinCharArray *)csq start:(int32_t)start end:(int32_t)end __attribute__((swift_name("append(csq:start:end:)")));
- (CnmeshKtor_ioOutput *)appendValue_:(id _Nullable)value __attribute__((swift_name("append(value_:)")));
- (CnmeshKtor_ioOutput *)appendValue:(id _Nullable)value startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex __attribute__((swift_name("append(value:startIndex:endIndex:)")));
- (void)close __attribute__((swift_name("close()")));
- (void)closeDestination __attribute__((swift_name("closeDestination()")));
- (void)flush __attribute__((swift_name("flush()")));
- (void)flushSource:(CnmeshKtor_ioMemory *)source offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("flush(source:offset:length:)")));
- (void)release_ __attribute__((swift_name("release()")));
- (void)writeByteV:(int8_t)v __attribute__((swift_name("writeByte(v:)")));
- (void)writePacketPacket:(CnmeshKtor_ioByteReadPacket *)packet __attribute__((swift_name("writePacket(packet:)")));
- (void)writePacketP:(CnmeshKtor_ioByteReadPacket *)p n:(int32_t)n __attribute__((swift_name("writePacket(p:n:)")));
- (void)writePacketP:(CnmeshKtor_ioByteReadPacket *)p n_:(int64_t)n __attribute__((swift_name("writePacket(p:n_:)")));
@property (readonly) int32_t _size __attribute__((swift_name("_size")));
@property (readonly) id<CnmeshKtor_ioObjectPool> pool __attribute__((swift_name("pool")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_ioBytePacketBuilder")))
@interface CnmeshKtor_ioBytePacketBuilder : CnmeshKtor_ioOutput
- (instancetype)initWithPool:(id<CnmeshKtor_ioObjectPool>)pool __attribute__((swift_name("init(pool:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (CnmeshKtor_ioBytePacketBuilder *)appendValue:(unichar)value __attribute__((swift_name("append(value:)")));
- (CnmeshKtor_ioBytePacketBuilder *)appendValue_:(id _Nullable)value __attribute__((swift_name("append(value_:)")));
- (CnmeshKtor_ioBytePacketBuilder *)appendValue:(id _Nullable)value startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex __attribute__((swift_name("append(value:startIndex:endIndex:)")));
- (CnmeshKtor_ioByteReadPacket *)build __attribute__((swift_name("build()")));
- (void)closeDestination __attribute__((swift_name("closeDestination()")));
- (void)flushSource:(CnmeshKtor_ioMemory *)source offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("flush(source:offset:length:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) BOOL isNotEmpty __attribute__((swift_name("isNotEmpty")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("Ktor_utilsNetworkAddress")))
@interface CnmeshKtor_utilsNetworkAddress : CnmeshBase
- (instancetype)initWithHostname:(NSString *)hostname port:(int32_t)port explicitAddress:(id _Nullable)explicitAddress __attribute__((swift_name("init(hostname:port:explicitAddress:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property id explicitAddress __attribute__((swift_name("explicitAddress")));
@property (readonly) NSString *hostname __attribute__((swift_name("hostname")));
@property (readonly) int32_t port __attribute__((swift_name("port")));
@end;

__attribute__((swift_name("KotlinIntIterator")))
@interface CnmeshKotlinIntIterator : CnmeshBase <CnmeshKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (CnmeshInt *)next __attribute__((swift_name("next()")));
- (int32_t)nextInt __attribute__((swift_name("nextInt()")));
@end;

__attribute__((swift_name("KotlinLongIterator")))
@interface CnmeshKotlinLongIterator : CnmeshBase <CnmeshKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (CnmeshLong *)next __attribute__((swift_name("next()")));
- (int64_t)nextLong __attribute__((swift_name("nextLong()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinIntProgression.Companion")))
@interface CnmeshKotlinIntProgressionCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKotlinIntProgressionCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshKotlinIntProgression *)fromClosedRangeRangeStart:(int32_t)rangeStart rangeEnd:(int32_t)rangeEnd step:(int32_t)step __attribute__((swift_name("fromClosedRange(rangeStart:rangeEnd:step:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinIntRange.Companion")))
@interface CnmeshKotlinIntRangeCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKotlinIntRangeCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) CnmeshKotlinIntRange *EMPTY __attribute__((swift_name("EMPTY")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLongProgression.Companion")))
@interface CnmeshKotlinLongProgressionCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKotlinLongProgressionCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshKotlinLongProgression *)fromClosedRangeRangeStart:(int64_t)rangeStart rangeEnd:(int64_t)rangeEnd step:(int64_t)step __attribute__((swift_name("fromClosedRange(rangeStart:rangeEnd:step:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLongRange.Companion")))
@interface CnmeshKotlinLongRangeCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKotlinLongRangeCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) CnmeshKotlinLongRange *EMPTY __attribute__((swift_name("EMPTY")));
@end;

__attribute__((swift_name("KotlinByteIterator")))
@interface CnmeshKotlinByteIterator : CnmeshBase <CnmeshKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (CnmeshByte *)next __attribute__((swift_name("next()")));
- (int8_t)nextByte __attribute__((swift_name("nextByte()")));
@end;

__attribute__((swift_name("KotlinSuspendFunction5")))
@protocol CnmeshKotlinSuspendFunction5 <CnmeshKotlinFunction>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 p2:(id _Nullable)p2 p3:(id _Nullable)p3 p4:(id _Nullable)p4 p5:(id _Nullable)p5 completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:p2:p3:p4:p5:completionHandler:)")));
@end;

__attribute__((swift_name("KotlinSuspendFunction4")))
@protocol CnmeshKotlinSuspendFunction4 <CnmeshKotlinFunction>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 p2:(id _Nullable)p2 p3:(id _Nullable)p3 p4:(id _Nullable)p4 completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:p2:p3:p4:completionHandler:)")));
@end;

__attribute__((swift_name("KotlinSuspendFunction6")))
@protocol CnmeshKotlinSuspendFunction6 <CnmeshKotlinFunction>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 p2:(id _Nullable)p2 p3:(id _Nullable)p3 p4:(id _Nullable)p4 p5:(id _Nullable)p5 p6:(id _Nullable)p6 completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:p2:p3:p4:p5:p6:completionHandler:)")));
@end;

__attribute__((swift_name("KotlinTimeSource")))
@protocol CnmeshKotlinTimeSource
@required
- (id<CnmeshKotlinTimeMark>)markNow __attribute__((swift_name("markNow()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHeaderValueParam")))
@interface CnmeshKtor_httpHeaderValueParam : CnmeshBase
- (instancetype)initWithName:(NSString *)name value:(NSString *)value __attribute__((swift_name("init(name:value:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (NSString *)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKtor_httpHeaderValueParam *)doCopyName:(NSString *)name value:(NSString *)value __attribute__((swift_name("doCopy(name:value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHeaderValueWithParameters.Companion")))
@interface CnmeshKtor_httpHeaderValueWithParametersCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_httpHeaderValueWithParametersCompanion *shared __attribute__((swift_name("shared")));
- (id _Nullable)parseValue:(NSString *)value init:(id _Nullable (^)(NSString *, NSArray<CnmeshKtor_httpHeaderValueParam *> *))init __attribute__((swift_name("parse(value:init:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpContentType.Companion")))
@interface CnmeshKtor_httpContentTypeCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_httpContentTypeCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshKtor_httpContentType *)parseValue:(NSString *)value __attribute__((swift_name("parse(value:)")));
@property (readonly) CnmeshKtor_httpContentType *Any __attribute__((swift_name("Any")));
@end;

__attribute__((swift_name("KotlinKType")))
@protocol CnmeshKotlinKType
@required
@property (readonly) NSArray<CnmeshKotlinKTypeProjection *> *arguments __attribute__((swift_name("arguments")));
@property (readonly) id<CnmeshKotlinKClassifier> _Nullable classifier __attribute__((swift_name("classifier")));
@property (readonly) BOOL isMarkedNullable __attribute__((swift_name("isMarkedNullable")));
@end;

__attribute__((swift_name("Ktor_ioBuffer")))
@interface CnmeshKtor_ioBuffer : CnmeshBase
- (instancetype)initWithMemory:(CnmeshKtor_ioMemory *)memory __attribute__((swift_name("init(memory:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshKtor_ioBufferCompanion *companion __attribute__((swift_name("companion")));
- (void)commitWrittenCount:(int32_t)count __attribute__((swift_name("commitWritten(count:)")));
- (void)discardExactCount:(int32_t)count __attribute__((swift_name("discardExact(count:)")));
- (CnmeshKtor_ioBuffer *)duplicate __attribute__((swift_name("duplicate()")));
- (void)duplicateToCopy:(CnmeshKtor_ioBuffer *)copy __attribute__((swift_name("duplicateTo(copy:)")));
- (int8_t)readByte __attribute__((swift_name("readByte()")));
- (void)reserveEndGapEndGap:(int32_t)endGap __attribute__((swift_name("reserveEndGap(endGap:)")));
- (void)reserveStartGapStartGap:(int32_t)startGap __attribute__((swift_name("reserveStartGap(startGap:)")));
- (void)reset __attribute__((swift_name("reset()")));
- (void)resetForRead __attribute__((swift_name("resetForRead()")));
- (void)resetForWrite __attribute__((swift_name("resetForWrite()")));
- (void)resetForWriteLimit:(int32_t)limit __attribute__((swift_name("resetForWrite(limit:)")));
- (void)rewindCount:(int32_t)count __attribute__((swift_name("rewind(count:)")));
- (NSString *)description __attribute__((swift_name("description()")));
- (int32_t)tryPeekByte __attribute__((swift_name("tryPeekByte()")));
- (int32_t)tryReadByte __attribute__((swift_name("tryReadByte()")));
- (void)writeByteValue:(int8_t)value __attribute__((swift_name("writeByte(value:)")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));
@property (readonly) int32_t endGap __attribute__((swift_name("endGap")));
@property (readonly) int32_t limit __attribute__((swift_name("limit")));
@property (readonly) CnmeshKtor_ioMemory *memory __attribute__((swift_name("memory")));
@property (readonly) int32_t readPosition __attribute__((swift_name("readPosition")));
@property (readonly) int32_t readRemaining __attribute__((swift_name("readRemaining")));
@property (readonly) int32_t startGap __attribute__((swift_name("startGap")));
@property (readonly) int32_t writePosition __attribute__((swift_name("writePosition")));
@property (readonly) int32_t writeRemaining __attribute__((swift_name("writeRemaining")));
@end;

__attribute__((swift_name("Ktor_ioChunkBuffer")))
@interface CnmeshKtor_ioChunkBuffer : CnmeshKtor_ioBuffer
- (instancetype)initWithMemory:(CnmeshKtor_ioMemory *)memory origin:(CnmeshKtor_ioChunkBuffer * _Nullable)origin parentPool:(id<CnmeshKtor_ioObjectPool> _Nullable)parentPool __attribute__((swift_name("init(memory:origin:parentPool:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMemory:(CnmeshKtor_ioMemory *)memory __attribute__((swift_name("init(memory:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) CnmeshKtor_ioChunkBufferCompanion *companion __attribute__((swift_name("companion")));
- (CnmeshKtor_ioChunkBuffer * _Nullable)cleanNext __attribute__((swift_name("cleanNext()")));
- (CnmeshKtor_ioChunkBuffer *)duplicate __attribute__((swift_name("duplicate()")));
- (void)releasePool:(id<CnmeshKtor_ioObjectPool>)pool __attribute__((swift_name("release(pool:)")));
- (void)reset __attribute__((swift_name("reset()")));
@property (getter=next_) CnmeshKtor_ioChunkBuffer * _Nullable next __attribute__((swift_name("next")));
@property (readonly) CnmeshKtor_ioChunkBuffer * _Nullable origin __attribute__((swift_name("origin")));
@property (readonly) int32_t referenceCount __attribute__((swift_name("referenceCount")));
@end;

__attribute__((swift_name("Ktor_ioObjectPool")))
@protocol CnmeshKtor_ioObjectPool <CnmeshKtor_ioCloseable>
@required
- (id)borrow __attribute__((swift_name("borrow()")));
- (void)dispose __attribute__((swift_name("dispose()")));
- (void)recycleInstance:(id)instance __attribute__((swift_name("recycle(instance:)")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_ioInput.Companion")))
@interface CnmeshKtor_ioInputCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_ioInputCompanion *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_ioMemory")))
@interface CnmeshKtor_ioMemory : CnmeshBase
- (instancetype)initWithPointer:(void *)pointer size:(int64_t)size __attribute__((swift_name("init(pointer:size:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshKtor_ioMemoryCompanion *companion __attribute__((swift_name("companion")));
- (void)doCopyToDestination:(CnmeshKtor_ioMemory *)destination offset:(int32_t)offset length:(int32_t)length destinationOffset:(int32_t)destinationOffset __attribute__((swift_name("doCopyTo(destination:offset:length:destinationOffset:)")));
- (void)doCopyToDestination:(CnmeshKtor_ioMemory *)destination offset:(int64_t)offset length:(int64_t)length destinationOffset_:(int64_t)destinationOffset __attribute__((swift_name("doCopyTo(destination:offset:length:destinationOffset_:)")));
- (int8_t)loadAtIndex:(int32_t)index __attribute__((swift_name("loadAt(index:)")));
- (int8_t)loadAtIndex_:(int64_t)index __attribute__((swift_name("loadAt(index_:)")));
- (CnmeshKtor_ioMemory *)sliceOffset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("slice(offset:length:)")));
- (CnmeshKtor_ioMemory *)sliceOffset:(int64_t)offset length_:(int64_t)length __attribute__((swift_name("slice(offset:length_:)")));
- (void)storeAtIndex:(int32_t)index value:(int8_t)value __attribute__((swift_name("storeAt(index:value:)")));
- (void)storeAtIndex:(int64_t)index value_:(int8_t)value __attribute__((swift_name("storeAt(index:value_:)")));
@property (readonly) void *pointer __attribute__((swift_name("pointer")));
@property (readonly) int64_t size __attribute__((swift_name("size")));
@property (readonly) int32_t size32 __attribute__((swift_name("size32")));
@end;

__attribute__((swift_name("Ktor_ioReadSession")))
@protocol CnmeshKtor_ioReadSession
@required
- (int32_t)discardN:(int32_t)n __attribute__((swift_name("discard(n:)")));
- (CnmeshKtor_ioChunkBuffer * _Nullable)requestAtLeast:(int32_t)atLeast __attribute__((swift_name("request(atLeast:)")));
@property (readonly) int32_t availableForRead __attribute__((swift_name("availableForRead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpUrl.Companion")))
@interface CnmeshKtor_httpUrlCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_httpUrlCompanion *shared __attribute__((swift_name("shared")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpURLProtocol")))
@interface CnmeshKtor_httpURLProtocol : CnmeshBase
- (instancetype)initWithName:(NSString *)name defaultPort:(int32_t)defaultPort __attribute__((swift_name("init(name:defaultPort:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshKtor_httpURLProtocolCompanion *companion __attribute__((swift_name("companion")));
- (NSString *)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (int32_t)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKtor_httpURLProtocol *)doCopyName:(NSString *)name defaultPort:(int32_t)defaultPort __attribute__((swift_name("doCopy(name:defaultPort:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t defaultPort __attribute__((swift_name("defaultPort")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@end;

__attribute__((swift_name("KotlinMapEntry")))
@protocol CnmeshKotlinMapEntry
@required
@property (readonly) id _Nullable key __attribute__((swift_name("key")));
@property (readonly) id _Nullable value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHttpStatusCode.Companion")))
@interface CnmeshKtor_httpHttpStatusCodeCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_httpHttpStatusCodeCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshKtor_httpHttpStatusCode *)fromValueValue:(int32_t)value __attribute__((swift_name("fromValue(value:)")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *Accepted __attribute__((swift_name("Accepted")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *BadGateway __attribute__((swift_name("BadGateway")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *BadRequest __attribute__((swift_name("BadRequest")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *Conflict __attribute__((swift_name("Conflict")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *Continue __attribute__((swift_name("Continue")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *Created __attribute__((swift_name("Created")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *ExpectationFailed __attribute__((swift_name("ExpectationFailed")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *FailedDependency __attribute__((swift_name("FailedDependency")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *Forbidden __attribute__((swift_name("Forbidden")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *Found __attribute__((swift_name("Found")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *GatewayTimeout __attribute__((swift_name("GatewayTimeout")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *Gone __attribute__((swift_name("Gone")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *InsufficientStorage __attribute__((swift_name("InsufficientStorage")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *InternalServerError __attribute__((swift_name("InternalServerError")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *LengthRequired __attribute__((swift_name("LengthRequired")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *Locked __attribute__((swift_name("Locked")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *MethodNotAllowed __attribute__((swift_name("MethodNotAllowed")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *MovedPermanently __attribute__((swift_name("MovedPermanently")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *MultiStatus __attribute__((swift_name("MultiStatus")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *MultipleChoices __attribute__((swift_name("MultipleChoices")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *NoContent __attribute__((swift_name("NoContent")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *NonAuthoritativeInformation __attribute__((swift_name("NonAuthoritativeInformation")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *NotAcceptable __attribute__((swift_name("NotAcceptable")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *NotFound __attribute__((swift_name("NotFound")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *NotImplemented __attribute__((swift_name("NotImplemented")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *NotModified __attribute__((swift_name("NotModified")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *OK __attribute__((swift_name("OK")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *PartialContent __attribute__((swift_name("PartialContent")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *PayloadTooLarge __attribute__((swift_name("PayloadTooLarge")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *PaymentRequired __attribute__((swift_name("PaymentRequired")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *PermanentRedirect __attribute__((swift_name("PermanentRedirect")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *PreconditionFailed __attribute__((swift_name("PreconditionFailed")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *Processing __attribute__((swift_name("Processing")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *ProxyAuthenticationRequired __attribute__((swift_name("ProxyAuthenticationRequired")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *RequestHeaderFieldTooLarge __attribute__((swift_name("RequestHeaderFieldTooLarge")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *RequestTimeout __attribute__((swift_name("RequestTimeout")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *RequestURITooLong __attribute__((swift_name("RequestURITooLong")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *RequestedRangeNotSatisfiable __attribute__((swift_name("RequestedRangeNotSatisfiable")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *ResetContent __attribute__((swift_name("ResetContent")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *SeeOther __attribute__((swift_name("SeeOther")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *ServiceUnavailable __attribute__((swift_name("ServiceUnavailable")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *SwitchProxy __attribute__((swift_name("SwitchProxy")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *SwitchingProtocols __attribute__((swift_name("SwitchingProtocols")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *TemporaryRedirect __attribute__((swift_name("TemporaryRedirect")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *TooManyRequests __attribute__((swift_name("TooManyRequests")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *Unauthorized __attribute__((swift_name("Unauthorized")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *UnprocessableEntity __attribute__((swift_name("UnprocessableEntity")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *UnsupportedMediaType __attribute__((swift_name("UnsupportedMediaType")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *UpgradeRequired __attribute__((swift_name("UpgradeRequired")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *UseProxy __attribute__((swift_name("UseProxy")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *VariantAlsoNegotiates __attribute__((swift_name("VariantAlsoNegotiates")));
@property (readonly) CnmeshKtor_httpHttpStatusCode *VersionNotSupported __attribute__((swift_name("VersionNotSupported")));
@property (readonly) NSArray<CnmeshKtor_httpHttpStatusCode *> *allStatusCodes __attribute__((swift_name("allStatusCodes")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHttpMethod.Companion")))
@interface CnmeshKtor_httpHttpMethodCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_httpHttpMethodCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshKtor_httpHttpMethod *)parseMethod:(NSString *)method __attribute__((swift_name("parse(method:)")));
@property (readonly) NSArray<CnmeshKtor_httpHttpMethod *> *DefaultMethods __attribute__((swift_name("DefaultMethods")));
@property (readonly) CnmeshKtor_httpHttpMethod *Delete __attribute__((swift_name("Delete")));
@property (readonly) CnmeshKtor_httpHttpMethod *Get __attribute__((swift_name("Get")));
@property (readonly) CnmeshKtor_httpHttpMethod *Head __attribute__((swift_name("Head")));
@property (readonly) CnmeshKtor_httpHttpMethod *Options __attribute__((swift_name("Options")));
@property (readonly) CnmeshKtor_httpHttpMethod *Patch __attribute__((swift_name("Patch")));
@property (readonly) CnmeshKtor_httpHttpMethod *Post __attribute__((swift_name("Post")));
@property (readonly) CnmeshKtor_httpHttpMethod *Put __attribute__((swift_name("Put")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpURLBuilder.Companion")))
@interface CnmeshKtor_httpURLBuilderCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_httpURLBuilderCompanion *shared __attribute__((swift_name("shared")));
@end;

__attribute__((swift_name("Ktor_httpParametersBuilder")))
@protocol CnmeshKtor_httpParametersBuilder <CnmeshKtor_utilsStringValuesBuilder>
@required
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsGMTDate.Companion")))
@interface CnmeshKtor_utilsGMTDateCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_utilsGMTDateCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) CnmeshKtor_utilsGMTDate *START __attribute__((swift_name("START")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsWeekDay")))
@interface CnmeshKtor_utilsWeekDay : CnmeshKotlinEnum<CnmeshKtor_utilsWeekDay *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) CnmeshKtor_utilsWeekDayCompanion *companion __attribute__((swift_name("companion")));
@property (class, readonly) CnmeshKtor_utilsWeekDay *monday __attribute__((swift_name("monday")));
@property (class, readonly) CnmeshKtor_utilsWeekDay *tuesday __attribute__((swift_name("tuesday")));
@property (class, readonly) CnmeshKtor_utilsWeekDay *wednesday __attribute__((swift_name("wednesday")));
@property (class, readonly) CnmeshKtor_utilsWeekDay *thursday __attribute__((swift_name("thursday")));
@property (class, readonly) CnmeshKtor_utilsWeekDay *friday __attribute__((swift_name("friday")));
@property (class, readonly) CnmeshKtor_utilsWeekDay *saturday __attribute__((swift_name("saturday")));
@property (class, readonly) CnmeshKtor_utilsWeekDay *sunday __attribute__((swift_name("sunday")));
+ (CnmeshKotlinArray<CnmeshKtor_utilsWeekDay *> *)values __attribute__((swift_name("values()")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsMonth")))
@interface CnmeshKtor_utilsMonth : CnmeshKotlinEnum<CnmeshKtor_utilsMonth *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) CnmeshKtor_utilsMonthCompanion *companion __attribute__((swift_name("companion")));
@property (class, readonly) CnmeshKtor_utilsMonth *january __attribute__((swift_name("january")));
@property (class, readonly) CnmeshKtor_utilsMonth *february __attribute__((swift_name("february")));
@property (class, readonly) CnmeshKtor_utilsMonth *march __attribute__((swift_name("march")));
@property (class, readonly) CnmeshKtor_utilsMonth *april __attribute__((swift_name("april")));
@property (class, readonly) CnmeshKtor_utilsMonth *may __attribute__((swift_name("may")));
@property (class, readonly) CnmeshKtor_utilsMonth *june __attribute__((swift_name("june")));
@property (class, readonly) CnmeshKtor_utilsMonth *july __attribute__((swift_name("july")));
@property (class, readonly) CnmeshKtor_utilsMonth *august __attribute__((swift_name("august")));
@property (class, readonly) CnmeshKtor_utilsMonth *september __attribute__((swift_name("september")));
@property (class, readonly) CnmeshKtor_utilsMonth *october __attribute__((swift_name("october")));
@property (class, readonly) CnmeshKtor_utilsMonth *november __attribute__((swift_name("november")));
@property (class, readonly) CnmeshKtor_utilsMonth *december __attribute__((swift_name("december")));
+ (CnmeshKotlinArray<CnmeshKtor_utilsMonth *> *)values __attribute__((swift_name("values()")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpHttpProtocolVersion.Companion")))
@interface CnmeshKtor_httpHttpProtocolVersionCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_httpHttpProtocolVersionCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshKtor_httpHttpProtocolVersion *)fromValueName:(NSString *)name major:(int32_t)major minor:(int32_t)minor __attribute__((swift_name("fromValue(name:major:minor:)")));
- (CnmeshKtor_httpHttpProtocolVersion *)parseValue:(id)value __attribute__((swift_name("parse(value:)")));
@property (readonly) CnmeshKtor_httpHttpProtocolVersion *HTTP_1_0 __attribute__((swift_name("HTTP_1_0")));
@property (readonly) CnmeshKtor_httpHttpProtocolVersion *HTTP_1_1 __attribute__((swift_name("HTTP_1_1")));
@property (readonly) CnmeshKtor_httpHttpProtocolVersion *HTTP_2_0 __attribute__((swift_name("HTTP_2_0")));
@property (readonly) CnmeshKtor_httpHttpProtocolVersion *QUIC __attribute__((swift_name("QUIC")));
@property (readonly) CnmeshKtor_httpHttpProtocolVersion *SPDY_3 __attribute__((swift_name("SPDY_3")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_ioByteReadPacket.Companion")))
@interface CnmeshKtor_ioByteReadPacketCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_ioByteReadPacketCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) CnmeshKtor_ioByteReadPacket *Empty __attribute__((swift_name("Empty")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpContentDisposition")))
@interface CnmeshKtor_httpContentDisposition : CnmeshKtor_httpHeaderValueWithParameters
- (instancetype)initWithDisposition:(NSString *)disposition parameters:(NSArray<CnmeshKtor_httpHeaderValueParam *> *)parameters __attribute__((swift_name("init(disposition:parameters:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithContent:(NSString *)content parameters:(NSArray<CnmeshKtor_httpHeaderValueParam *> *)parameters __attribute__((swift_name("init(content:parameters:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) CnmeshKtor_httpContentDispositionCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (CnmeshKtor_httpContentDisposition *)withParameterKey:(NSString *)key value:(NSString *)value __attribute__((swift_name("withParameter(key:value:)")));
- (CnmeshKtor_httpContentDisposition *)withParametersNewParameters:(NSArray<CnmeshKtor_httpHeaderValueParam *> *)newParameters __attribute__((swift_name("withParameters(newParameters:)")));
@property (readonly) NSString *disposition __attribute__((swift_name("disposition")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsDelegatingConversionServiceConfiguration")))
@interface CnmeshKtor_utilsDelegatingConversionServiceConfiguration<T> : CnmeshBase
- (void)decodeConverter:(T (^)(NSArray<NSString *> *))converter __attribute__((swift_name("decode(converter:)")));
- (void)encodeConverter:(NSArray<NSString *> *(^)(T))converter __attribute__((swift_name("encode(converter:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_ioCharset.Companion")))
@interface CnmeshKtor_ioCharsetCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_ioCharsetCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshKtor_ioCharset *)forNameName:(NSString *)name __attribute__((swift_name("forName(name:)")));
- (BOOL)isSupportedCharset:(NSString *)charset __attribute__((swift_name("isSupported(charset:)")));
@end;

__attribute__((swift_name("Ktor_ioCharsetDecoder")))
@interface CnmeshKtor_ioCharsetDecoder : CnmeshBase
- (instancetype)initWith_charset:(CnmeshKtor_ioCharset *)_charset __attribute__((swift_name("init(_charset:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((swift_name("Ktor_ioCharsetEncoder")))
@interface CnmeshKtor_ioCharsetEncoder : CnmeshBase
- (instancetype)initWith_charset:(CnmeshKtor_ioCharset *)_charset __attribute__((swift_name("init(_charset:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_websocketsFrame.Companion")))
@interface CnmeshKtor_websocketsFrameCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_websocketsFrameCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshKtor_websocketsFrame *)byTypeFin:(BOOL)fin frameType:(CnmeshKtor_websocketsFrameType *)frameType data:(CnmeshKotlinByteArray *)data rsv1:(BOOL)rsv1 rsv2:(BOOL)rsv2 rsv3:(BOOL)rsv3 __attribute__((swift_name("byType(fin:frameType:data:rsv1:rsv2:rsv3:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_websocketsFrameType")))
@interface CnmeshKtor_websocketsFrameType : CnmeshKotlinEnum<CnmeshKtor_websocketsFrameType *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) CnmeshKtor_websocketsFrameTypeCompanion *companion __attribute__((swift_name("companion")));
@property (class, readonly) CnmeshKtor_websocketsFrameType *text __attribute__((swift_name("text")));
@property (class, readonly) CnmeshKtor_websocketsFrameType *binary __attribute__((swift_name("binary")));
@property (class, readonly) CnmeshKtor_websocketsFrameType *close __attribute__((swift_name("close")));
@property (class, readonly) CnmeshKtor_websocketsFrameType *ping __attribute__((swift_name("ping")));
@property (class, readonly) CnmeshKtor_websocketsFrameType *pong __attribute__((swift_name("pong")));
+ (CnmeshKotlinArray<CnmeshKtor_websocketsFrameType *> *)values __attribute__((swift_name("values()")));
@property (readonly) BOOL controlFrame __attribute__((swift_name("controlFrame")));
@property (readonly) int32_t opcode __attribute__((swift_name("opcode")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_websocketsWebSocketExtensionHeader")))
@interface CnmeshKtor_websocketsWebSocketExtensionHeader : CnmeshBase
- (instancetype)initWithName:(NSString *)name parameters:(NSArray<NSString *> *)parameters __attribute__((swift_name("init(name:parameters:)"))) __attribute__((objc_designated_initializer));
- (id<CnmeshKotlinSequence>)parseParameters __attribute__((swift_name("parseParameters()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) NSArray<NSString *> *parameters __attribute__((swift_name("parameters")));
@end;

__attribute__((swift_name("Ktor_websocketsWebSocketExtensionFactory")))
@protocol CnmeshKtor_websocketsWebSocketExtensionFactory
@required
- (id<CnmeshKtor_websocketsWebSocketExtension>)installConfig:(void (^)(id))config __attribute__((swift_name("install(config:)")));
@property (readonly) CnmeshKtor_utilsAttributeKey<id<CnmeshKtor_websocketsWebSocketExtension>> *key __attribute__((swift_name("key")));
@property (readonly) BOOL rsv1 __attribute__((swift_name("rsv1")));
@property (readonly) BOOL rsv2 __attribute__((swift_name("rsv2")));
@property (readonly) BOOL rsv3 __attribute__((swift_name("rsv3")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpCookieEncoding")))
@interface CnmeshKtor_httpCookieEncoding : CnmeshKotlinEnum<CnmeshKtor_httpCookieEncoding *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) CnmeshKtor_httpCookieEncoding *raw __attribute__((swift_name("raw")));
@property (class, readonly) CnmeshKtor_httpCookieEncoding *dquotes __attribute__((swift_name("dquotes")));
@property (class, readonly) CnmeshKtor_httpCookieEncoding *uriEncoding __attribute__((swift_name("uriEncoding")));
@property (class, readonly) CnmeshKtor_httpCookieEncoding *base64Encoding __attribute__((swift_name("base64Encoding")));
+ (CnmeshKotlinArray<CnmeshKtor_httpCookieEncoding *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicfuSynchronizedObject.Status")))
@interface CnmeshAtomicfuSynchronizedObjectStatus : CnmeshKotlinEnum<CnmeshAtomicfuSynchronizedObjectStatus *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) CnmeshAtomicfuSynchronizedObjectStatus *unlocked __attribute__((swift_name("unlocked")));
@property (class, readonly) CnmeshAtomicfuSynchronizedObjectStatus *thin __attribute__((swift_name("thin")));
@property (class, readonly) CnmeshAtomicfuSynchronizedObjectStatus *fat __attribute__((swift_name("fat")));
+ (CnmeshKotlinArray<CnmeshAtomicfuSynchronizedObjectStatus *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("KotlinAnnotation")))
@protocol CnmeshKotlinAnnotation
@required
@end;

__attribute__((swift_name("Kotlinx_serialization_coreSerialKind")))
@interface CnmeshKotlinx_serialization_coreSerialKind : CnmeshBase
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((swift_name("Kotlinx_serialization_coreSerializersModuleCollector")))
@protocol CnmeshKotlinx_serialization_coreSerializersModuleCollector
@required
- (void)contextualKClass:(id<CnmeshKotlinKClass>)kClass provider:(id<CnmeshKotlinx_serialization_coreKSerializer> (^)(NSArray<id<CnmeshKotlinx_serialization_coreKSerializer>> *))provider __attribute__((swift_name("contextual(kClass:provider:)")));
- (void)contextualKClass:(id<CnmeshKotlinKClass>)kClass serializer:(id<CnmeshKotlinx_serialization_coreKSerializer>)serializer __attribute__((swift_name("contextual(kClass:serializer:)")));
- (void)polymorphicBaseClass:(id<CnmeshKotlinKClass>)baseClass actualClass:(id<CnmeshKotlinKClass>)actualClass actualSerializer:(id<CnmeshKotlinx_serialization_coreKSerializer>)actualSerializer __attribute__((swift_name("polymorphic(baseClass:actualClass:actualSerializer:)")));
- (void)polymorphicDefaultBaseClass:(id<CnmeshKotlinKClass>)baseClass defaultDeserializerProvider:(id<CnmeshKotlinx_serialization_coreDeserializationStrategy> _Nullable (^)(NSString * _Nullable))defaultDeserializerProvider __attribute__((swift_name("polymorphicDefault(baseClass:defaultDeserializerProvider:)")));
- (void)polymorphicDefaultDeserializerBaseClass:(id<CnmeshKotlinKClass>)baseClass defaultDeserializerProvider:(id<CnmeshKotlinx_serialization_coreDeserializationStrategy> _Nullable (^)(NSString * _Nullable))defaultDeserializerProvider __attribute__((swift_name("polymorphicDefaultDeserializer(baseClass:defaultDeserializerProvider:)")));
- (void)polymorphicDefaultSerializerBaseClass:(id<CnmeshKotlinKClass>)baseClass defaultSerializerProvider:(id<CnmeshKotlinx_serialization_coreSerializationStrategy> _Nullable (^)(id))defaultSerializerProvider __attribute__((swift_name("polymorphicDefaultSerializer(baseClass:defaultSerializerProvider:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinCharArray")))
@interface CnmeshKotlinCharArray : CnmeshBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(id (^)(CnmeshInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (unichar)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (CnmeshKotlinCharIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(unichar)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("KotlinTimeMark")))
@protocol CnmeshKotlinTimeMark
@required
- (int64_t)elapsedNow __attribute__((swift_name("elapsedNow()")));
- (BOOL)hasNotPassedNow __attribute__((swift_name("hasNotPassedNow()")));
- (BOOL)hasPassedNow __attribute__((swift_name("hasPassedNow()")));
- (id<CnmeshKotlinTimeMark>)minusDuration:(int64_t)duration __attribute__((swift_name("minus(duration:)")));
- (id<CnmeshKotlinTimeMark>)plusDuration:(int64_t)duration __attribute__((swift_name("plus(duration:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinKTypeProjection")))
@interface CnmeshKotlinKTypeProjection : CnmeshBase
- (instancetype)initWithVariance:(CnmeshKotlinKVariance * _Nullable)variance type:(id<CnmeshKotlinKType> _Nullable)type __attribute__((swift_name("init(variance:type:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) CnmeshKotlinKTypeProjectionCompanion *companion __attribute__((swift_name("companion")));
- (CnmeshKotlinKVariance * _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("use corresponding property instead")));
- (id<CnmeshKotlinKType> _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("use corresponding property instead")));
- (CnmeshKotlinKTypeProjection *)doCopyVariance:(CnmeshKotlinKVariance * _Nullable)variance type:(id<CnmeshKotlinKType> _Nullable)type __attribute__((swift_name("doCopy(variance:type:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<CnmeshKotlinKType> _Nullable type __attribute__((swift_name("type")));
@property (readonly) CnmeshKotlinKVariance * _Nullable variance __attribute__((swift_name("variance")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_ioBuffer.Companion")))
@interface CnmeshKtor_ioBufferCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_ioBufferCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) CnmeshKtor_ioBuffer *Empty __attribute__((swift_name("Empty")));
@property (readonly) int32_t ReservedSize __attribute__((swift_name("ReservedSize")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_ioChunkBuffer.Companion")))
@interface CnmeshKtor_ioChunkBufferCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_ioChunkBufferCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) CnmeshKtor_ioChunkBuffer *Empty __attribute__((swift_name("Empty")));
@property (readonly) id<CnmeshKtor_ioObjectPool> EmptyPool __attribute__((swift_name("EmptyPool")));
@property (readonly) id<CnmeshKtor_ioObjectPool> Pool __attribute__((swift_name("Pool")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_ioMemory.Companion")))
@interface CnmeshKtor_ioMemoryCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_ioMemoryCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) CnmeshKtor_ioMemory *Empty __attribute__((swift_name("Empty")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpURLProtocol.Companion")))
@interface CnmeshKtor_httpURLProtocolCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_httpURLProtocolCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshKtor_httpURLProtocol *)createOrDefaultName:(NSString *)name __attribute__((swift_name("createOrDefault(name:)")));
@property (readonly) CnmeshKtor_httpURLProtocol *HTTP __attribute__((swift_name("HTTP")));
@property (readonly) CnmeshKtor_httpURLProtocol *HTTPS __attribute__((swift_name("HTTPS")));
@property (readonly) CnmeshKtor_httpURLProtocol *SOCKS __attribute__((swift_name("SOCKS")));
@property (readonly) CnmeshKtor_httpURLProtocol *WS __attribute__((swift_name("WS")));
@property (readonly) CnmeshKtor_httpURLProtocol *WSS __attribute__((swift_name("WSS")));
@property (readonly) NSDictionary<NSString *, CnmeshKtor_httpURLProtocol *> *byName __attribute__((swift_name("byName")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsWeekDay.Companion")))
@interface CnmeshKtor_utilsWeekDayCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_utilsWeekDayCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshKtor_utilsWeekDay *)fromOrdinal:(int32_t)ordinal __attribute__((swift_name("from(ordinal:)")));
- (CnmeshKtor_utilsWeekDay *)fromValue:(NSString *)value __attribute__((swift_name("from(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_utilsMonth.Companion")))
@interface CnmeshKtor_utilsMonthCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_utilsMonthCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshKtor_utilsMonth *)fromOrdinal:(int32_t)ordinal __attribute__((swift_name("from(ordinal:)")));
- (CnmeshKtor_utilsMonth *)fromValue:(NSString *)value __attribute__((swift_name("from(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_httpContentDisposition.Companion")))
@interface CnmeshKtor_httpContentDispositionCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_httpContentDispositionCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshKtor_httpContentDisposition *)parseValue:(NSString *)value __attribute__((swift_name("parse(value:)")));
@property (readonly) CnmeshKtor_httpContentDisposition *Attachment __attribute__((swift_name("Attachment")));
@property (readonly) CnmeshKtor_httpContentDisposition *File __attribute__((swift_name("File")));
@property (readonly) CnmeshKtor_httpContentDisposition *Inline __attribute__((swift_name("Inline")));
@property (readonly) CnmeshKtor_httpContentDisposition *Mixed __attribute__((swift_name("Mixed")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ktor_websocketsFrameType.Companion")))
@interface CnmeshKtor_websocketsFrameTypeCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKtor_websocketsFrameTypeCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshKtor_websocketsFrameType * _Nullable)getOpcode:(int32_t)opcode __attribute__((swift_name("get(opcode:)")));
@end;

__attribute__((swift_name("KotlinCharIterator")))
@interface CnmeshKotlinCharIterator : CnmeshBase <CnmeshKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id)next __attribute__((swift_name("next()")));
- (unichar)nextChar __attribute__((swift_name("nextChar()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinKVariance")))
@interface CnmeshKotlinKVariance : CnmeshKotlinEnum<CnmeshKotlinKVariance *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) CnmeshKotlinKVariance *invariant __attribute__((swift_name("invariant")));
@property (class, readonly) CnmeshKotlinKVariance *in __attribute__((swift_name("in")));
@property (class, readonly) CnmeshKotlinKVariance *out __attribute__((swift_name("out")));
+ (CnmeshKotlinArray<CnmeshKotlinKVariance *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinKTypeProjection.Companion")))
@interface CnmeshKotlinKTypeProjectionCompanion : CnmeshBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) CnmeshKotlinKTypeProjectionCompanion *shared __attribute__((swift_name("shared")));
- (CnmeshKotlinKTypeProjection *)contravariantType:(id<CnmeshKotlinKType>)type __attribute__((swift_name("contravariant(type:)")));
- (CnmeshKotlinKTypeProjection *)covariantType:(id<CnmeshKotlinKType>)type __attribute__((swift_name("covariant(type:)")));
- (CnmeshKotlinKTypeProjection *)invariantType:(id<CnmeshKotlinKType>)type __attribute__((swift_name("invariant(type:)")));
@property (readonly) CnmeshKotlinKTypeProjection *STAR __attribute__((swift_name("STAR")));
@end;

#pragma pop_macro("_Nullable_result")
#pragma clang diagnostic pop
NS_ASSUME_NONNULL_END
